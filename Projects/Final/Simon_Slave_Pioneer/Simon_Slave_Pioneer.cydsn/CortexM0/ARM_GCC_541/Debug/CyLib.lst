ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"CyLib.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	cydelayFreqHz
  20              		.data
  21              		.align	2
  22              		.type	cydelayFreqHz, %object
  23              		.size	cydelayFreqHz, 4
  24              	cydelayFreqHz:
  25 0000 00366E01 		.word	24000000
  26              		.global	cydelayFreqKhz
  27              		.align	2
  28              		.type	cydelayFreqKhz, %object
  29              		.size	cydelayFreqKhz, 4
  30              	cydelayFreqKhz:
  31 0004 C05D0000 		.word	24000
  32              		.global	cydelayFreqMhz
  33              		.type	cydelayFreqMhz, %object
  34              		.size	cydelayFreqMhz, 1
  35              	cydelayFreqMhz:
  36 0008 18       		.byte	24
  37              		.global	cydelay32kMs
  38 0009 000000   		.align	2
  39              		.type	cydelay32kMs, %object
  40              		.size	cydelay32kMs, 4
  41              	cydelay32kMs:
  42 000c 0000E02E 		.word	786432000
  43              		.bss
  44              		.align	2
  45              	CySysTickCallbacks:
  46 0000 00000000 		.space	20
  46      00000000 
  46      00000000 
  46      00000000 
  46      00000000 
  47              		.global	CySysTickInitVar
  48              		.align	2
  49              		.type	CySysTickInitVar, %object
  50              		.size	CySysTickInitVar, 4
  51              	CySysTickInitVar:
  52 0014 00000000 		.space	4
  53              		.global	cyImoFreqMhz2Reg
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 2


  54              		.section	.rodata
  55              		.align	2
  56              		.type	cyImoFreqMhz2Reg, %object
  57              		.size	cyImoFreqMhz2Reg, 46
  58              	cyImoFreqMhz2Reg:
  59 0000 03       		.byte	3
  60 0001 04       		.byte	4
  61 0002 05       		.byte	5
  62 0003 06       		.byte	6
  63 0004 07       		.byte	7
  64 0005 08       		.byte	8
  65 0006 09       		.byte	9
  66 0007 0A       		.byte	10
  67 0008 0B       		.byte	11
  68 0009 0C       		.byte	12
  69 000a 0E       		.byte	14
  70 000b 0F       		.byte	15
  71 000c 10       		.byte	16
  72 000d 11       		.byte	17
  73 000e 12       		.byte	18
  74 000f 13       		.byte	19
  75 0010 14       		.byte	20
  76 0011 15       		.byte	21
  77 0012 16       		.byte	22
  78 0013 17       		.byte	23
  79 0014 18       		.byte	24
  80 0015 19       		.byte	25
  81 0016 1B       		.byte	27
  82 0017 1C       		.byte	28
  83 0018 1D       		.byte	29
  84 0019 1E       		.byte	30
  85 001a 1F       		.byte	31
  86 001b 20       		.byte	32
  87 001c 21       		.byte	33
  88 001d 22       		.byte	34
  89 001e 23       		.byte	35
  90 001f 25       		.byte	37
  91 0020 26       		.byte	38
  92 0021 27       		.byte	39
  93 0022 28       		.byte	40
  94 0023 29       		.byte	41
  95 0024 2A       		.byte	42
  96 0025 2B       		.byte	43
  97 0026 2E       		.byte	46
  98 0027 2F       		.byte	47
  99 0028 30       		.byte	48
 100 0029 31       		.byte	49
 101 002a 32       		.byte	50
 102 002b 33       		.byte	51
 103 002c 34       		.byte	52
 104 002d 35       		.byte	53
 105              		.global	CySysClkPumpConfig
 106              		.data
 107              		.align	2
 108              		.type	CySysClkPumpConfig, %object
 109              		.size	CySysClkPumpConfig, 4
 110              	CySysClkPumpConfig:
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 3


 111 0010 01000000 		.word	1
 112              		.section	.text.CySysClkImoStart,"ax",%progbits
 113              		.align	2
 114              		.global	CySysClkImoStart
 115              		.code	16
 116              		.thumb_func
 117              		.type	CySysClkImoStart, %function
 118              	CySysClkImoStart:
 119              	.LFB0:
 120              		.file 1 "Generated_Source\\PSoC4\\CyLib.c"
   1:Generated_Source\PSoC4/CyLib.c **** /***************************************************************************//**
   2:Generated_Source\PSoC4/CyLib.c **** * \file CyLib.c
   3:Generated_Source\PSoC4/CyLib.c **** * \version 5.60
   4:Generated_Source\PSoC4/CyLib.c **** *
   5:Generated_Source\PSoC4/CyLib.c **** * \brief Provides a system API for the Clocking, Interrupts, SysTick, and
   6:Generated_Source\PSoC4/CyLib.c **** * Voltage Detect.
   7:Generated_Source\PSoC4/CyLib.c **** *
   8:Generated_Source\PSoC4/CyLib.c **** * \note Documentation of the API's in this file is located in the PSoC 4 System
   9:Generated_Source\PSoC4/CyLib.c **** * Reference Guide provided with PSoC Creator.
  10:Generated_Source\PSoC4/CyLib.c **** *
  11:Generated_Source\PSoC4/CyLib.c **** ********************************************************************************
  12:Generated_Source\PSoC4/CyLib.c **** * \copyright
  13:Generated_Source\PSoC4/CyLib.c **** * Copyright 2010-2017, Cypress Semiconductor Corporation.  All rights reserved.
  14:Generated_Source\PSoC4/CyLib.c **** * You may use this file only in accordance with the license, terms, conditions,
  15:Generated_Source\PSoC4/CyLib.c **** * disclaimers, and limitations in the end user license agreement accompanying
  16:Generated_Source\PSoC4/CyLib.c **** * the software package with which this file was provided.
  17:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
  18:Generated_Source\PSoC4/CyLib.c **** 
  19:Generated_Source\PSoC4/CyLib.c **** #include "CyLib.h"
  20:Generated_Source\PSoC4/CyLib.c **** 
  21:Generated_Source\PSoC4/CyLib.c **** /* CySysClkWriteImoFreq() || CySysClkImoEnableWcoLock() */
  22:Generated_Source\PSoC4/CyLib.c **** #if ((CY_IP_SRSSV2 && CY_IP_FMLT) || CY_IP_IMO_TRIMMABLE_BY_WCO)
  23:Generated_Source\PSoC4/CyLib.c ****     #include "CyFlash.h"
  24:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2 && CY_IP_FMLT) */
  25:Generated_Source\PSoC4/CyLib.c **** 
  26:Generated_Source\PSoC4/CyLib.c **** /* Do not use these definitions directly in your application */
  27:Generated_Source\PSoC4/CyLib.c **** uint32 cydelayFreqHz  = CYDEV_BCLK__SYSCLK__HZ;
  28:Generated_Source\PSoC4/CyLib.c **** uint32 cydelayFreqKhz = (CYDEV_BCLK__SYSCLK__HZ + CY_DELAY_1K_MINUS_1_THRESHOLD) / CY_DELAY_1K_THRE
  29:Generated_Source\PSoC4/CyLib.c **** uint8  cydelayFreqMhz = (uint8)((CYDEV_BCLK__SYSCLK__HZ + CY_DELAY_1M_MINUS_1_THRESHOLD) / CY_DELAY
  30:Generated_Source\PSoC4/CyLib.c **** uint32 cydelay32kMs   = CY_DELAY_MS_OVERFLOW * ((CYDEV_BCLK__SYSCLK__HZ + CY_DELAY_1K_MINUS_1_THRES
  31:Generated_Source\PSoC4/CyLib.c ****                         CY_DELAY_1K_THRESHOLD);
  32:Generated_Source\PSoC4/CyLib.c **** 
  33:Generated_Source\PSoC4/CyLib.c **** 
  34:Generated_Source\PSoC4/CyLib.c **** static cySysTickCallback CySysTickCallbacks[CY_SYS_SYST_NUM_OF_CALLBACKS];
  35:Generated_Source\PSoC4/CyLib.c **** static void CySysTickServiceCallbacks(void);
  36:Generated_Source\PSoC4/CyLib.c **** 
  37:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_SRSSV2 && CY_IP_PLL)
  38:Generated_Source\PSoC4/CyLib.c ****     static uint32 CySysClkPllGetBypassMode(uint32 pll);
  39:Generated_Source\PSoC4/CyLib.c ****     static cystatus CySysClkPllConfigChangeAllowed(uint32 pll);
  40:Generated_Source\PSoC4/CyLib.c **** #endif /* #if (CY_IP_SRSSV2 && CY_IP_PLL) */
  41:Generated_Source\PSoC4/CyLib.c **** 
  42:Generated_Source\PSoC4/CyLib.c **** 
  43:Generated_Source\PSoC4/CyLib.c **** /***************************************************************************//**
  44:Generated_Source\PSoC4/CyLib.c **** * Indicates whether or not the SysTick has been initialized. The variable is
  45:Generated_Source\PSoC4/CyLib.c **** * initialized to 0 and set to 1 the first time CySysTickStart() is called.
  46:Generated_Source\PSoC4/CyLib.c **** *
  47:Generated_Source\PSoC4/CyLib.c **** * This allows the component to restart without reinitialization after the first
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 4


  48:Generated_Source\PSoC4/CyLib.c **** * call to the CySysTickStart() routine.
  49:Generated_Source\PSoC4/CyLib.c **** *
  50:Generated_Source\PSoC4/CyLib.c **** * If reinitialization of the SysTick is required, call CySysTickInit() before
  51:Generated_Source\PSoC4/CyLib.c **** * calling CySysTickStart(). Alternatively, the SysTick can be reinitialized by
  52:Generated_Source\PSoC4/CyLib.c **** * calling the CySysTickInit() and CySysTickEnable() functions.
  53:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
  54:Generated_Source\PSoC4/CyLib.c **** uint32 CySysTickInitVar = 0u;
  55:Generated_Source\PSoC4/CyLib.c **** 
  56:Generated_Source\PSoC4/CyLib.c **** 
  57:Generated_Source\PSoC4/CyLib.c **** #if(CY_IP_SRSSV2)
  58:Generated_Source\PSoC4/CyLib.c ****         /* Conversion between CySysClkWriteImoFreq() parameter and register's value */
  59:Generated_Source\PSoC4/CyLib.c ****         const uint8 cyImoFreqMhz2Reg[CY_SYS_CLK_IMO_FREQ_TABLE_SIZE] = {
  60:Generated_Source\PSoC4/CyLib.c ****             /*  3 MHz */ 0x03u,  /*  4 MHz */ 0x04u,  /*  5 MHz */ 0x05u,  /*  6 MHz */ 0x06u,
  61:Generated_Source\PSoC4/CyLib.c ****             /*  7 MHz */ 0x07u,  /*  8 MHz */ 0x08u,  /*  9 MHz */ 0x09u,  /* 10 MHz */ 0x0Au,
  62:Generated_Source\PSoC4/CyLib.c ****             /* 11 MHz */ 0x0Bu,  /* 12 MHz */ 0x0Cu,  /* 13 MHz */ 0x0Eu,  /* 14 MHz */ 0x0Fu,
  63:Generated_Source\PSoC4/CyLib.c ****             /* 15 MHz */ 0x10u,  /* 16 MHz */ 0x11u,  /* 17 MHz */ 0x12u,  /* 18 MHz */ 0x13u,
  64:Generated_Source\PSoC4/CyLib.c ****             /* 19 MHz */ 0x14u,  /* 20 MHz */ 0x15u,  /* 21 MHz */ 0x16u,  /* 22 MHz */ 0x17u,
  65:Generated_Source\PSoC4/CyLib.c ****             /* 23 MHz */ 0x18u,  /* 24 MHz */ 0x19u,  /* 25 MHz */ 0x1Bu,  /* 26 MHz */ 0x1Cu,
  66:Generated_Source\PSoC4/CyLib.c ****             /* 27 MHz */ 0x1Du,  /* 28 MHz */ 0x1Eu,  /* 29 MHz */ 0x1Fu,  /* 30 MHz */ 0x20u,
  67:Generated_Source\PSoC4/CyLib.c ****             /* 31 MHz */ 0x21u,  /* 32 MHz */ 0x22u,  /* 33 MHz */ 0x23u,  /* 34 MHz */ 0x25u,
  68:Generated_Source\PSoC4/CyLib.c ****             /* 35 MHz */ 0x26u,  /* 36 MHz */ 0x27u,  /* 37 MHz */ 0x28u,  /* 38 MHz */ 0x29u,
  69:Generated_Source\PSoC4/CyLib.c ****             /* 39 MHz */ 0x2Au,  /* 40 MHz */ 0x2Bu,  /* 41 MHz */ 0x2Eu,  /* 42 MHz */ 0x2Fu,
  70:Generated_Source\PSoC4/CyLib.c ****             /* 43 MHz */ 0x30u,  /* 44 MHz */ 0x31u,  /* 45 MHz */ 0x32u,  /* 46 MHz */ 0x33u,
  71:Generated_Source\PSoC4/CyLib.c ****             /* 47 MHz */ 0x34u,  /* 48 MHz */ 0x35u };
  72:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2) */
  73:Generated_Source\PSoC4/CyLib.c **** 
  74:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
  75:Generated_Source\PSoC4/CyLib.c ****         /* Conversion between IMO frequency and WCO DPLL max offset steps */
  76:Generated_Source\PSoC4/CyLib.c ****         const uint8 cyImoFreqMhz2DpllOffset[CY_SYS_CLK_IMO_FREQ_WCO_DPLL_TABLE_SIZE] = {
  77:Generated_Source\PSoC4/CyLib.c ****             /* 26 MHz */  238u, /* 27 MHz */  219u, /* 28 MHz */  201u, /* 29 MHz */  185u,
  78:Generated_Source\PSoC4/CyLib.c ****             /* 30 MHz */  170u, /* 31 MHz */  155u, /* 32 MHz */  142u, /* 33 MHz */  130u,
  79:Generated_Source\PSoC4/CyLib.c ****             /* 34 MHz */  118u, /* 35 MHz */  107u, /* 36 MHz */   96u, /* 37 MHz */  86u,
  80:Generated_Source\PSoC4/CyLib.c ****             /* 38 MHz */   77u, /* 39 MHz */   68u, /* 40 MHz */   59u, /* 41 MHz */  51u,
  81:Generated_Source\PSoC4/CyLib.c ****             /* 42 MHz */   44u, /* 43 MHz */   36u, /* 44 MHz */   29u, /* 45 MHz */  23u,
  82:Generated_Source\PSoC4/CyLib.c ****             /* 46 MHz */   16u, /* 47 MHz */   10u, /* 48 MHz */   4u };
  83:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
  84:Generated_Source\PSoC4/CyLib.c **** 
  85:Generated_Source\PSoC4/CyLib.c **** /* Stored CY_SYS_CLK_IMO_TRIM4_REG when modified for USB lock */
  86:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_IMO_TRIMMABLE_BY_USB && CY_IP_SRSSV2)
  87:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkImoTrim4 = 0u;
  88:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_IMO_TRIMMABLE_BY_USB && CY_IP_SRSSV2) */
  89:Generated_Source\PSoC4/CyLib.c **** 
  90:Generated_Source\PSoC4/CyLib.c **** /* Stored PUMP_SEL configuration during disable (IMO output by default) */
  91:Generated_Source\PSoC4/CyLib.c **** uint32 CySysClkPumpConfig = CY_SYS_CLK_PUMP_ENABLE;
  92:Generated_Source\PSoC4/CyLib.c **** 
  93:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
  94:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkImoStart
  95:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
  96:Generated_Source\PSoC4/CyLib.c **** *
  97:Generated_Source\PSoC4/CyLib.c **** * Enables the IMO.
  98:Generated_Source\PSoC4/CyLib.c **** *
  99:Generated_Source\PSoC4/CyLib.c **** * For PSoC 4100M / PSoC 4200M / PSoC 4000S / PSoC 4100S / PSoC 4400 devices,
 100:Generated_Source\PSoC4/CyLib.c **** * this function will also enable WCO lock if selected in the Design Wide
 101:Generated_Source\PSoC4/CyLib.c **** * Resources tab.
 102:Generated_Source\PSoC4/CyLib.c **** *
 103:Generated_Source\PSoC4/CyLib.c **** * For PSoC 4200L / devices, this function will also enable USB lock if selected
 104:Generated_Source\PSoC4/CyLib.c **** * in the Design Wide Resources tab.
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 5


 105:Generated_Source\PSoC4/CyLib.c **** *
 106:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 107:Generated_Source\PSoC4/CyLib.c **** void CySysClkImoStart(void)
 108:Generated_Source\PSoC4/CyLib.c **** {
 121              		.loc 1 108 0
 122              		.cfi_startproc
 123              		@ args = 0, pretend = 0, frame = 0
 124              		@ frame_needed = 1, uses_anonymous_args = 0
 125 0000 80B5     		push	{r7, lr}
 126              		.cfi_def_cfa_offset 8
 127              		.cfi_offset 7, -8
 128              		.cfi_offset 14, -4
 129 0002 00AF     		add	r7, sp, #0
 130              		.cfi_def_cfa_register 7
 109:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_CLK_IMO_CONFIG_REG |= CY_SYS_CLK_IMO_CONFIG_ENABLE;
 131              		.loc 1 109 0
 132 0004 044B     		ldr	r3, .L2
 133 0006 044A     		ldr	r2, .L2
 134 0008 1268     		ldr	r2, [r2]
 135 000a 8021     		movs	r1, #128
 136 000c 0906     		lsls	r1, r1, #24
 137 000e 0A43     		orrs	r2, r1
 138 0010 1A60     		str	r2, [r3]
 110:Generated_Source\PSoC4/CyLib.c **** 
 111:Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 112:Generated_Source\PSoC4/CyLib.c ****         #if (CYDEV_IMO_TRIMMED_BY_WCO == 1u)
 113:Generated_Source\PSoC4/CyLib.c ****             CySysClkImoEnableWcoLock();
 114:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CYDEV_IMO_TRIMMED_BY_WCO == 1u) */
 115:Generated_Source\PSoC4/CyLib.c ****     #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 116:Generated_Source\PSoC4/CyLib.c **** 
 117:Generated_Source\PSoC4/CyLib.c **** 
 118:Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 119:Generated_Source\PSoC4/CyLib.c ****         #if (CYDEV_IMO_TRIMMED_BY_USB == 1u)
 120:Generated_Source\PSoC4/CyLib.c ****             CySysClkImoEnableUsbLock();
 121:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 1u) */
 122:Generated_Source\PSoC4/CyLib.c ****     #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 123:Generated_Source\PSoC4/CyLib.c **** 
 124:Generated_Source\PSoC4/CyLib.c **** }
 139              		.loc 1 124 0
 140 0012 C046     		nop
 141 0014 BD46     		mov	sp, r7
 142              		@ sp needed
 143 0016 80BD     		pop	{r7, pc}
 144              	.L3:
 145              		.align	2
 146              	.L2:
 147 0018 08010B40 		.word	1074462984
 148              		.cfi_endproc
 149              	.LFE0:
 150              		.size	CySysClkImoStart, .-CySysClkImoStart
 151              		.section	.text.CySysClkImoStop,"ax",%progbits
 152              		.align	2
 153              		.global	CySysClkImoStop
 154              		.code	16
 155              		.thumb_func
 156              		.type	CySysClkImoStop, %function
 157              	CySysClkImoStop:
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 6


 158              	.LFB1:
 125:Generated_Source\PSoC4/CyLib.c **** 
 126:Generated_Source\PSoC4/CyLib.c **** 
 127:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
 128:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkImoStop
 129:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
 130:Generated_Source\PSoC4/CyLib.c **** *
 131:Generated_Source\PSoC4/CyLib.c **** * Disables the IMO.
 132:Generated_Source\PSoC4/CyLib.c **** *
 133:Generated_Source\PSoC4/CyLib.c **** * For PSoC 4100M / PSoC 4200M / PSoC 4000S / PSoC 4100S / PSoC 4400 devices,
 134:Generated_Source\PSoC4/CyLib.c **** * this function will also disable WCO lock.
 135:Generated_Source\PSoC4/CyLib.c **** *
 136:Generated_Source\PSoC4/CyLib.c **** * For PSoC PSoC 4200L devices, this function will also disable USB lock.
 137:Generated_Source\PSoC4/CyLib.c **** *
 138:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 139:Generated_Source\PSoC4/CyLib.c **** void CySysClkImoStop(void)
 140:Generated_Source\PSoC4/CyLib.c **** {
 159              		.loc 1 140 0
 160              		.cfi_startproc
 161              		@ args = 0, pretend = 0, frame = 0
 162              		@ frame_needed = 1, uses_anonymous_args = 0
 163 0000 80B5     		push	{r7, lr}
 164              		.cfi_def_cfa_offset 8
 165              		.cfi_offset 7, -8
 166              		.cfi_offset 14, -4
 167 0002 00AF     		add	r7, sp, #0
 168              		.cfi_def_cfa_register 7
 141:Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 142:Generated_Source\PSoC4/CyLib.c ****         CySysClkImoDisableWcoLock();
 143:Generated_Source\PSoC4/CyLib.c ****     #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 144:Generated_Source\PSoC4/CyLib.c **** 
 145:Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 146:Generated_Source\PSoC4/CyLib.c ****         CySysClkImoDisableUsbLock();
 147:Generated_Source\PSoC4/CyLib.c ****     #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 148:Generated_Source\PSoC4/CyLib.c **** 
 149:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_CLK_IMO_CONFIG_REG &= ( uint32 ) ( ~( uint32 )CY_SYS_CLK_IMO_CONFIG_ENABLE);
 169              		.loc 1 149 0
 170 0004 044B     		ldr	r3, .L5
 171 0006 044A     		ldr	r2, .L5
 172 0008 1268     		ldr	r2, [r2]
 173 000a 5200     		lsls	r2, r2, #1
 174 000c 5208     		lsrs	r2, r2, #1
 175 000e 1A60     		str	r2, [r3]
 150:Generated_Source\PSoC4/CyLib.c **** }
 176              		.loc 1 150 0
 177 0010 C046     		nop
 178 0012 BD46     		mov	sp, r7
 179              		@ sp needed
 180 0014 80BD     		pop	{r7, pc}
 181              	.L6:
 182 0016 C046     		.align	2
 183              	.L5:
 184 0018 08010B40 		.word	1074462984
 185              		.cfi_endproc
 186              	.LFE1:
 187              		.size	CySysClkImoStop, .-CySysClkImoStop
 188              		.section	.text.CySysClkWriteHfclkDirect,"ax",%progbits
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 7


 189              		.align	2
 190              		.global	CySysClkWriteHfclkDirect
 191              		.code	16
 192              		.thumb_func
 193              		.type	CySysClkWriteHfclkDirect, %function
 194              	CySysClkWriteHfclkDirect:
 195              	.LFB2:
 151:Generated_Source\PSoC4/CyLib.c **** 
 152:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 153:Generated_Source\PSoC4/CyLib.c **** 
 154:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 155:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoEnableWcoLock
 156:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 157:Generated_Source\PSoC4/CyLib.c ****     *
 158:Generated_Source\PSoC4/CyLib.c ****     * Enables the IMO to WCO lock feature. This function works only if the WCO is
 159:Generated_Source\PSoC4/CyLib.c ****     * already enabled. If the WCO is not enabled then this function returns
 160:Generated_Source\PSoC4/CyLib.c ****     * without enabling the lock feature.
 161:Generated_Source\PSoC4/CyLib.c ****     *
 162:Generated_Source\PSoC4/CyLib.c ****     * It takes up to 20 ms for the IMO to stabilize. The delay is implemented with
 163:Generated_Source\PSoC4/CyLib.c ****     * CyDelay() function. The delay interval is measured based on the system
 164:Generated_Source\PSoC4/CyLib.c ****     * frequency defined by PSoC Creator at build time. If System clock frequency
 165:Generated_Source\PSoC4/CyLib.c ****     * is changed in runtime, the CyDelayFreq() with the appropriate parameter
 166:Generated_Source\PSoC4/CyLib.c ****     * should be called.
 167:Generated_Source\PSoC4/CyLib.c ****     *
 168:Generated_Source\PSoC4/CyLib.c ****     * For PSoC 4200L devices, note that the IMO can lock to either WCO or USB
 169:Generated_Source\PSoC4/CyLib.c ****     * but not both.
 170:Generated_Source\PSoC4/CyLib.c ****     *
 171:Generated_Source\PSoC4/CyLib.c ****     * This function is applicable for PSoC 4100M / PSoC 4200M / PSoC 4000S /
 172:Generated_Source\PSoC4/CyLib.c ****     * PSoC 4100S / PSoC 4400 / PSoC 4200L.
 173:Generated_Source\PSoC4/CyLib.c ****     *
 174:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 175:Generated_Source\PSoC4/CyLib.c ****     void CySysClkImoEnableWcoLock(void)
 176:Generated_Source\PSoC4/CyLib.c ****     {
 177:Generated_Source\PSoC4/CyLib.c ****         #if(CY_IP_SRSSV2)
 178:Generated_Source\PSoC4/CyLib.c ****             uint32 i;
 179:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_SRSSV2) */
 180:Generated_Source\PSoC4/CyLib.c **** 
 181:Generated_Source\PSoC4/CyLib.c ****         uint32 freq;
 182:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
 183:Generated_Source\PSoC4/CyLib.c ****         uint32 regTmp;
 184:Generated_Source\PSoC4/CyLib.c ****         uint32 lfLimit = 0u;
 185:Generated_Source\PSoC4/CyLib.c ****         volatile uint32 flashCtlReg;
 186:Generated_Source\PSoC4/CyLib.c **** 
 187:Generated_Source\PSoC4/CyLib.c ****         if (0u != CySysClkWcoEnabled())
 188:Generated_Source\PSoC4/CyLib.c ****         {
 189:Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
 190:Generated_Source\PSoC4/CyLib.c **** 
 191:Generated_Source\PSoC4/CyLib.c ****             /* Set oscillator interface control port to WCO */
 192:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_WCO && CY_IP_IMO_TRIMMABLE_BY_USB)
 193:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_OSCINTF_CTL_REG =
 194:Generated_Source\PSoC4/CyLib.c ****                     (CY_SYS_CLK_OSCINTF_CTL_REG & (uint32) ~CY_SYS_CLK_OSCINTF_CTL_PORT_SEL_MASK) |
 195:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_CLK_OSCINTF_CTL_PORT_SEL_WCO;
 196:Generated_Source\PSoC4/CyLib.c ****             #endif /* (CY_IP_IMO_TRIMMABLE_BY_WCO && CY_IP_IMO_TRIMMABLE_BY_USB) */
 197:Generated_Source\PSoC4/CyLib.c **** 
 198:Generated_Source\PSoC4/CyLib.c ****             /* Get current IMO frequency based on the register value */
 199:Generated_Source\PSoC4/CyLib.c ****             #if(CY_IP_SRSSV2)
 200:Generated_Source\PSoC4/CyLib.c ****                 freq = CY_SYS_CLK_IMO_MIN_FREQ_MHZ;
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 8


 201:Generated_Source\PSoC4/CyLib.c ****                 for(i = 0u; i < CY_SYS_CLK_IMO_FREQ_TABLE_SIZE; i++)
 202:Generated_Source\PSoC4/CyLib.c ****                 {
 203:Generated_Source\PSoC4/CyLib.c ****                     if ((uint8) (CY_SYS_CLK_IMO_TRIM2_REG & CY_SYS_CLK_IMO_FREQ_BITS_MASK) == cyImo
 204:Generated_Source\PSoC4/CyLib.c ****                     {
 205:Generated_Source\PSoC4/CyLib.c ****                         freq = i + CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET;
 206:Generated_Source\PSoC4/CyLib.c ****                         break;
 207:Generated_Source\PSoC4/CyLib.c ****                     }
 208:Generated_Source\PSoC4/CyLib.c ****                 }
 209:Generated_Source\PSoC4/CyLib.c ****             #else
 210:Generated_Source\PSoC4/CyLib.c ****                 /* Calculate frequency by shifting register field value and adding constant. */
 211:Generated_Source\PSoC4/CyLib.c ****                 #if(CY_IP_SRSSLT)
 212:Generated_Source\PSoC4/CyLib.c ****                     freq = (((uint32) ((CY_SYS_CLK_IMO_SELECT_REG & ((uint32) CY_SYS_CLK_IMO_SELECT
 213:Generated_Source\PSoC4/CyLib.c ****                                         CY_SYS_CLK_IMO_SELECT_FREQ_SHIFT) + CY_SYS_CLK_IMO_MIN_FREQ
 214:Generated_Source\PSoC4/CyLib.c ****                                       ((CY_SYS_CLK_SELECT_REG >> CY_SYS_CLK_SELECT_HFCLK_DIV_SHIFT)
 215:Generated_Source\PSoC4/CyLib.c ****                                        (uint32) CY_SYS_CLK_SELECT_HFCLK_DIV_MASK));
 216:Generated_Source\PSoC4/CyLib.c ****                 #else
 217:Generated_Source\PSoC4/CyLib.c ****                     freq = ((uint32) ((CY_SYS_CLK_IMO_SELECT_REG & ((uint32) CY_SYS_CLK_IMO_SELECT_
 218:Generated_Source\PSoC4/CyLib.c ****                                        CY_SYS_CLK_IMO_SELECT_FREQ_SHIFT) + CY_SYS_CLK_IMO_MIN_FREQ_
 219:Generated_Source\PSoC4/CyLib.c ****                 #endif  /* (CY_IP_SRSSLT) */
 220:Generated_Source\PSoC4/CyLib.c **** 
 221:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_SRSSV2) */
 222:Generated_Source\PSoC4/CyLib.c **** 
 223:Generated_Source\PSoC4/CyLib.c ****             /* For the WCO locking mode, the IMO gain needs to be CY_SYS_CLK_IMO_TRIM4_GAIN */
 224:Generated_Source\PSoC4/CyLib.c ****             #if(CY_IP_SRSSV2)
 225:Generated_Source\PSoC4/CyLib.c ****                 if ((CY_SYS_CLK_IMO_TRIM4_REG & CY_SYS_CLK_IMO_TRIM4_GAIN_MASK) == 0u)
 226:Generated_Source\PSoC4/CyLib.c ****                 {
 227:Generated_Source\PSoC4/CyLib.c **** 			         CY_SYS_CLK_IMO_TRIM4_REG = (CY_SYS_CLK_IMO_TRIM4_REG & (uint32) ~CY_SYS_CLK_IMO_TRIM4_G
 228:Generated_Source\PSoC4/CyLib.c **** 			                  				     CY_SYS_CLK_IMO_TRIM4_WCO_GAIN;
 229:Generated_Source\PSoC4/CyLib.c ****                 }
 230:Generated_Source\PSoC4/CyLib.c ****             #endif /* (CY_IP_SRSSV2) */
 231:Generated_Source\PSoC4/CyLib.c **** 
 232:Generated_Source\PSoC4/CyLib.c ****             regTmp  = CY_SYS_CLK_WCO_DPLL_REG & ~(CY_SYS_CLK_WCO_DPLL_MULT_MASK |
 233:Generated_Source\PSoC4/CyLib.c ****                                                   CY_SYS_CLK_WCO_CONFIG_DPLL_LF_IGAIN_MASK |
 234:Generated_Source\PSoC4/CyLib.c ****                                                   CY_SYS_CLK_WCO_CONFIG_DPLL_LF_PGAIN_MASK |
 235:Generated_Source\PSoC4/CyLib.c ****                                                   CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_MASK);
 236:Generated_Source\PSoC4/CyLib.c **** 
 237:Generated_Source\PSoC4/CyLib.c ****             /* Set multiplier to determine IMO frequency in multiples of the WCO frequency */
 238:Generated_Source\PSoC4/CyLib.c ****             regTmp |= (CY_SYS_CLK_WCO_DPLL_MULT_VALUE(freq) & CY_SYS_CLK_WCO_DPLL_MULT_MASK);
 239:Generated_Source\PSoC4/CyLib.c **** 
 240:Generated_Source\PSoC4/CyLib.c ****             /* Set DPLL Loop Filter Integral and Proportional Gains Setting */
 241:Generated_Source\PSoC4/CyLib.c ****             regTmp |= (CY_SYS_CLK_WCO_CONFIG_DPLL_LF_IGAIN | CY_SYS_CLK_WCO_CONFIG_DPLL_LF_PGAIN);
 242:Generated_Source\PSoC4/CyLib.c **** 
 243:Generated_Source\PSoC4/CyLib.c ****             /* Set maximum allowed IMO offset */
 244:Generated_Source\PSoC4/CyLib.c ****             if (freq < CY_SYS_CLK_IMO_FREQ_WCO_DPLL_SAFE_POINT)
 245:Generated_Source\PSoC4/CyLib.c ****             {
 246:Generated_Source\PSoC4/CyLib.c ****                 regTmp |= (CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_MAX << CY_SYS_CLK_WCO_CONFIG_DPLL_LF
 247:Generated_Source\PSoC4/CyLib.c ****             }
 248:Generated_Source\PSoC4/CyLib.c ****             else
 249:Generated_Source\PSoC4/CyLib.c ****             {
 250:Generated_Source\PSoC4/CyLib.c ****                 lfLimit = (uint32) CY_SFLASH_IMO_TRIM_REG(freq - CY_SYS_CLK_IMO_MIN_FREQ_MHZ) +
 251:Generated_Source\PSoC4/CyLib.c ****                     cyImoFreqMhz2DpllOffset[freq - CY_SYS_CLK_IMO_FREQ_WCO_DPLL_TABLE_OFFSET];
 252:Generated_Source\PSoC4/CyLib.c **** 
 253:Generated_Source\PSoC4/CyLib.c ****                 lfLimit = (lfLimit > CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_MAX) ?
 254:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_MAX : lfLimit;
 255:Generated_Source\PSoC4/CyLib.c **** 
 256:Generated_Source\PSoC4/CyLib.c ****                 regTmp |= (lfLimit << CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_SHIFT);
 257:Generated_Source\PSoC4/CyLib.c ****             }
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 9


 258:Generated_Source\PSoC4/CyLib.c **** 
 259:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_WCO_DPLL_REG = regTmp;
 260:Generated_Source\PSoC4/CyLib.c **** 
 261:Generated_Source\PSoC4/CyLib.c ****             flashCtlReg = CY_FLASH_CTL_REG;
 262:Generated_Source\PSoC4/CyLib.c ****             CySysFlashSetWaitCycles(CY_SYS_CLK_IMO_MAX_FREQ_MHZ);
 263:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_WCO_CONFIG_REG |= CY_SYS_CLK_WCO_CONFIG_DPLL_ENABLE;
 264:Generated_Source\PSoC4/CyLib.c ****             CyDelay(CY_SYS_CLK_WCO_IMO_TIMEOUT_MS);
 265:Generated_Source\PSoC4/CyLib.c ****             CY_FLASH_CTL_REG = flashCtlReg;
 266:Generated_Source\PSoC4/CyLib.c **** 
 267:Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
 268:Generated_Source\PSoC4/CyLib.c ****         }
 269:Generated_Source\PSoC4/CyLib.c ****     }
 270:Generated_Source\PSoC4/CyLib.c **** 
 271:Generated_Source\PSoC4/CyLib.c **** 
 272:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 273:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoDisableWcoLock
 274:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 275:Generated_Source\PSoC4/CyLib.c ****     *
 276:Generated_Source\PSoC4/CyLib.c ****     * Disables the IMO to WCO lock feature.
 277:Generated_Source\PSoC4/CyLib.c ****     *
 278:Generated_Source\PSoC4/CyLib.c ****     * For PSoC 4200L devices, note that the IMO can lock to either WCO or USB
 279:Generated_Source\PSoC4/CyLib.c ****     * but not both.
 280:Generated_Source\PSoC4/CyLib.c ****     *
 281:Generated_Source\PSoC4/CyLib.c ****     * This function is applicable for PSoC 4100M / PSoC 4200M / PSoC 4000S /
 282:Generated_Source\PSoC4/CyLib.c ****     * PSoC 4100S / PSoC 4400 / PSoC 4200L.
 283:Generated_Source\PSoC4/CyLib.c ****     *
 284:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 285:Generated_Source\PSoC4/CyLib.c ****     void CySysClkImoDisableWcoLock(void)
 286:Generated_Source\PSoC4/CyLib.c ****     {
 287:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CLK_WCO_CONFIG_REG &= (uint32) ~CY_SYS_CLK_WCO_CONFIG_DPLL_ENABLE;
 288:Generated_Source\PSoC4/CyLib.c ****     }
 289:Generated_Source\PSoC4/CyLib.c **** 
 290:Generated_Source\PSoC4/CyLib.c **** 
 291:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 292:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoGetWcoLock
 293:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 294:Generated_Source\PSoC4/CyLib.c ****     *
 295:Generated_Source\PSoC4/CyLib.c ****     * Reports the IMO to WCO lock enable state.
 296:Generated_Source\PSoC4/CyLib.c ****     *
 297:Generated_Source\PSoC4/CyLib.c ****     * This function is applicable for PSoC 4100M / PSoC 4200M / PSoC 4000S /
 298:Generated_Source\PSoC4/CyLib.c ****     * PSoC 4100S / PSoC 4400 / PSoC 4200L.
 299:Generated_Source\PSoC4/CyLib.c ****     *
 300:Generated_Source\PSoC4/CyLib.c ****     * \return 1 if IMO to WCO lock is enabled.
 301:Generated_Source\PSoC4/CyLib.c ****     * \return 0 if IMO to WCO lock is disabled.
 302:Generated_Source\PSoC4/CyLib.c ****     *
 303:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 304:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkImoGetWcoLock(void)
 305:Generated_Source\PSoC4/CyLib.c ****     {
 306:Generated_Source\PSoC4/CyLib.c ****         return ((0u != (CY_SYS_CLK_WCO_CONFIG_REG & CY_SYS_CLK_WCO_CONFIG_DPLL_ENABLE)) ?
 307:Generated_Source\PSoC4/CyLib.c ****                 (uint32) 1u :
 308:Generated_Source\PSoC4/CyLib.c ****                 (uint32) 0u);
 309:Generated_Source\PSoC4/CyLib.c ****     }
 310:Generated_Source\PSoC4/CyLib.c **** 
 311:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 312:Generated_Source\PSoC4/CyLib.c **** 
 313:Generated_Source\PSoC4/CyLib.c **** 
 314:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_IMO_TRIMMABLE_BY_USB)
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 10


 315:Generated_Source\PSoC4/CyLib.c **** 
 316:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 317:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoEnableUsbLock
 318:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 319:Generated_Source\PSoC4/CyLib.c ****     *
 320:Generated_Source\PSoC4/CyLib.c ****     * Enables the IMO to USB lock feature.
 321:Generated_Source\PSoC4/CyLib.c ****     *
 322:Generated_Source\PSoC4/CyLib.c ****     * This function must be called before CySysClkWriteImoFreq().
 323:Generated_Source\PSoC4/CyLib.c ****     *
 324:Generated_Source\PSoC4/CyLib.c ****     * This function is called from CySysClkImoStart() function if USB lock
 325:Generated_Source\PSoC4/CyLib.c ****     * selected in the Design Wide Resources tab.
 326:Generated_Source\PSoC4/CyLib.c ****     *
 327:Generated_Source\PSoC4/CyLib.c ****     * This is applicable for PSoC 4200L family of devices only. For PSoC 4200L
 328:Generated_Source\PSoC4/CyLib.c ****     * devices, the IMO can lock to either WCO or USB, but not both.
 329:Generated_Source\PSoC4/CyLib.c ****     *
 330:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 331:Generated_Source\PSoC4/CyLib.c ****     void CySysClkImoEnableUsbLock(void)
 332:Generated_Source\PSoC4/CyLib.c ****     {
 333:Generated_Source\PSoC4/CyLib.c ****         /* Set oscillator interface control port to USB */
 334:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_WCO && CY_IP_IMO_TRIMMABLE_BY_USB)
 335:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_OSCINTF_CTL_REG = (CY_SYS_CLK_OSCINTF_CTL_REG & (uint32) ~CY_SYS_CLK_OSCINTF
 336:Generated_Source\PSoC4/CyLib.c ****                                           CY_SYS_CLK_OSCINTF_CTL_PORT_SEL_USB;
 337:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_IMO_TRIMMABLE_BY_WCO && CY_IP_IMO_TRIMMABLE_BY_USB) */
 338:Generated_Source\PSoC4/CyLib.c **** 
 339:Generated_Source\PSoC4/CyLib.c ****         #if(CY_IP_SRSSV2)
 340:Generated_Source\PSoC4/CyLib.c ****             /* Save CY_SYS_CLK_IMO_TRIM4_REG and set IMO gain for USB lock */
 341:Generated_Source\PSoC4/CyLib.c ****             CySysClkImoTrim4 = CY_SYS_CLK_IMO_TRIM4_REG & (uint32) ~CY_SYS_CLK_IMO_TRIM4_GAIN_MASK;
 342:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM4_REG = (CY_SYS_CLK_IMO_TRIM4_REG & (uint32) ~CY_SYS_CLK_IMO_TRIM4_G
 343:Generated_Source\PSoC4/CyLib.c ****                                         CY_SYS_CLK_IMO_TRIM4_USB_GAIN;
 344:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_SRSSV2) */
 345:Generated_Source\PSoC4/CyLib.c **** 
 346:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CLK_USBDEVv2_CR1_REG |= CY_SYS_CLK_USBDEVv2_CR1_ENABLE_LOCK;
 347:Generated_Source\PSoC4/CyLib.c ****     }
 348:Generated_Source\PSoC4/CyLib.c **** 
 349:Generated_Source\PSoC4/CyLib.c **** 
 350:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 351:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoDisableUsbLock
 352:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 353:Generated_Source\PSoC4/CyLib.c ****     *
 354:Generated_Source\PSoC4/CyLib.c ****     * Disables the IMO to USB lock feature.
 355:Generated_Source\PSoC4/CyLib.c ****     *
 356:Generated_Source\PSoC4/CyLib.c ****     * This function is called from CySysClkImoStop() function if USB lock selected
 357:Generated_Source\PSoC4/CyLib.c ****     * in the Design Wide Resources tab.
 358:Generated_Source\PSoC4/CyLib.c ****     *
 359:Generated_Source\PSoC4/CyLib.c ****     * This is applicable for PSoC 4200L family of devices only. For PSoC 4200L
 360:Generated_Source\PSoC4/CyLib.c ****     * devices, the IMO can lock to either WCO or USB, but not both.
 361:Generated_Source\PSoC4/CyLib.c ****     *
 362:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 363:Generated_Source\PSoC4/CyLib.c ****     void CySysClkImoDisableUsbLock(void)
 364:Generated_Source\PSoC4/CyLib.c ****     {
 365:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CLK_USBDEVv2_CR1_REG &= (uint32) ~CY_SYS_CLK_USBDEVv2_CR1_ENABLE_LOCK;
 366:Generated_Source\PSoC4/CyLib.c **** 
 367:Generated_Source\PSoC4/CyLib.c ****         #if(CY_IP_SRSSV2)
 368:Generated_Source\PSoC4/CyLib.c ****             /* Restore CY_SYS_CLK_IMO_TRIM4_REG */
 369:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM4_REG = (CY_SYS_CLK_IMO_TRIM4_REG & (uint32) ~CY_SYS_CLK_IMO_TRIM4_G
 370:Generated_Source\PSoC4/CyLib.c ****                                     CySysClkImoTrim4;
 371:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_SRSSV2) */
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 11


 372:Generated_Source\PSoC4/CyLib.c ****     }
 373:Generated_Source\PSoC4/CyLib.c **** 
 374:Generated_Source\PSoC4/CyLib.c **** 
 375:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 376:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoGetUsbLock
 377:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 378:Generated_Source\PSoC4/CyLib.c ****     *
 379:Generated_Source\PSoC4/CyLib.c ****     * Reports the IMO to USB lock enable state.
 380:Generated_Source\PSoC4/CyLib.c ****     *
 381:Generated_Source\PSoC4/CyLib.c ****     * This is applicable for PSoC 4200L family of devices only. For PSoC 4200L
 382:Generated_Source\PSoC4/CyLib.c ****     * devices, the IMO can lock to either WCO or USB, but not both.
 383:Generated_Source\PSoC4/CyLib.c ****     *
 384:Generated_Source\PSoC4/CyLib.c ****     * \return 1 if IMO to USB lock is enabled.
 385:Generated_Source\PSoC4/CyLib.c ****     * \return 0 if IMO to USB lock is disabled.
 386:Generated_Source\PSoC4/CyLib.c ****     *
 387:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 388:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkImoGetUsbLock(void)
 389:Generated_Source\PSoC4/CyLib.c ****     {
 390:Generated_Source\PSoC4/CyLib.c ****         return ((0u != (CY_SYS_CLK_USBDEVv2_CR1_REG & CY_SYS_CLK_USBDEVv2_CR1_ENABLE_LOCK)) ?
 391:Generated_Source\PSoC4/CyLib.c ****                 (uint32) 1u :
 392:Generated_Source\PSoC4/CyLib.c ****                 (uint32) 0u);
 393:Generated_Source\PSoC4/CyLib.c ****     }
 394:Generated_Source\PSoC4/CyLib.c **** #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 395:Generated_Source\PSoC4/CyLib.c **** 
 396:Generated_Source\PSoC4/CyLib.c **** 
 397:Generated_Source\PSoC4/CyLib.c **** 
 398:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
 399:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkWriteHfclkDirect
 400:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
 401:Generated_Source\PSoC4/CyLib.c **** *
 402:Generated_Source\PSoC4/CyLib.c **** * Selects the direct source for the HFCLK.
 403:Generated_Source\PSoC4/CyLib.c **** *
 404:Generated_Source\PSoC4/CyLib.c **** * The new source must be running and stable before calling this function.
 405:Generated_Source\PSoC4/CyLib.c **** *
 406:Generated_Source\PSoC4/CyLib.c **** * PSoC 4000:
 407:Generated_Source\PSoC4/CyLib.c **** * The SYSCLK has a maximum speed of 16 MHz, so HFCLK and SYSCLK dividers should
 408:Generated_Source\PSoC4/CyLib.c **** * be selected in a way to not to exceed 16 MHz for the System clock.
 409:Generated_Source\PSoC4/CyLib.c **** *
 410:Generated_Source\PSoC4/CyLib.c **** * If the SYSCLK clock frequency increases during device operation, call
 411:Generated_Source\PSoC4/CyLib.c **** * CySysFlashSetWaitCycles() with the appropriate parameter to adjust the number
 412:Generated_Source\PSoC4/CyLib.c **** * of clock cycles the cache will wait before sampling data comes back from
 413:Generated_Source\PSoC4/CyLib.c **** * Flash. If the SYSCLK clock frequency decreases, you can call
 414:Generated_Source\PSoC4/CyLib.c **** * CySysFlashSetWaitCycles() to improve the CPU performance. See
 415:Generated_Source\PSoC4/CyLib.c **** * CySysFlashSetWaitCycles() description for more information.
 416:Generated_Source\PSoC4/CyLib.c **** *
 417:Generated_Source\PSoC4/CyLib.c **** * Do not select PLL as the source for HFCLK if PLL output frequency exceeds
 418:Generated_Source\PSoC4/CyLib.c **** * maximum permissible value for HFCLK.
 419:Generated_Source\PSoC4/CyLib.c **** *
 420:Generated_Source\PSoC4/CyLib.c **** * \param clkSelect One of the available HFCLK direct sources.
 421:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_HFCLK_IMO     IMO.
 422:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_HFCLK_EXTCLK  External clock pin.
 423:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_HFCLK_ECO     External crystal oscillator. Applicable for
 424:Generated_Source\PSoC4/CyLib.c **** *                          PSoC 4100 BLE / PSoC 4200 BLE / PSoC 4200L.
 425:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_HFCLK_PLL0    PLL#0. Applicable for PSoC 4200L.
 426:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_HFCLK_PLL1    PLL#1. Applicable for PSoC 4200L.
 427:Generated_Source\PSoC4/CyLib.c **** *
 428:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 12


 429:Generated_Source\PSoC4/CyLib.c **** void CySysClkWriteHfclkDirect(uint32 clkSelect)
 430:Generated_Source\PSoC4/CyLib.c **** {
 196              		.loc 1 430 0
 197              		.cfi_startproc
 198              		@ args = 0, pretend = 0, frame = 16
 199              		@ frame_needed = 1, uses_anonymous_args = 0
 200 0000 90B5     		push	{r4, r7, lr}
 201              		.cfi_def_cfa_offset 12
 202              		.cfi_offset 4, -12
 203              		.cfi_offset 7, -8
 204              		.cfi_offset 14, -4
 205 0002 85B0     		sub	sp, sp, #20
 206              		.cfi_def_cfa_offset 32
 207 0004 00AF     		add	r7, sp, #0
 208              		.cfi_def_cfa_register 7
 209 0006 7860     		str	r0, [r7, #4]
 431:Generated_Source\PSoC4/CyLib.c ****     uint8  interruptState;
 432:Generated_Source\PSoC4/CyLib.c ****     uint32 tmpReg;
 433:Generated_Source\PSoC4/CyLib.c **** 
 434:Generated_Source\PSoC4/CyLib.c ****     interruptState = CyEnterCriticalSection();
 210              		.loc 1 434 0
 211 0008 0F23     		movs	r3, #15
 212 000a FC18     		adds	r4, r7, r3
 213 000c FFF7FEFF 		bl	CyEnterCriticalSection
 214 0010 0300     		movs	r3, r0
 215 0012 2370     		strb	r3, [r4]
 435:Generated_Source\PSoC4/CyLib.c **** 
 436:Generated_Source\PSoC4/CyLib.c **** 
 437:Generated_Source\PSoC4/CyLib.c ****     tmpReg = CY_SYS_CLK_SELECT_REG & ~(CY_SYS_CLK_SELECT_DIRECT_SEL_MASK |
 216              		.loc 1 437 0
 217 0014 0B4B     		ldr	r3, .L8
 218 0016 1B68     		ldr	r3, [r3]
 219 0018 0722     		movs	r2, #7
 220 001a 9343     		bics	r3, r2
 221 001c BB60     		str	r3, [r7, #8]
 438:Generated_Source\PSoC4/CyLib.c ****                                        CY_SYS_CLK_SELECT_HFCLK_SEL_MASK);
 439:Generated_Source\PSoC4/CyLib.c **** 
 440:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_SRSSV2 && CY_IP_PLL)
 441:Generated_Source\PSoC4/CyLib.c ****     if ((CY_SYS_CLK_HFCLK_PLL0 == clkSelect) || (CY_SYS_CLK_HFCLK_PLL1 == clkSelect))
 442:Generated_Source\PSoC4/CyLib.c ****     {
 443:Generated_Source\PSoC4/CyLib.c ****         tmpReg |= (clkSelect & CY_SYS_CLK_SELECT_HFCLK_SEL_MASK);
 444:Generated_Source\PSoC4/CyLib.c ****     }
 445:Generated_Source\PSoC4/CyLib.c ****     else
 446:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2 && CY_IP_PLL) */
 447:Generated_Source\PSoC4/CyLib.c ****     {
 448:Generated_Source\PSoC4/CyLib.c ****         tmpReg |= (clkSelect & CY_SYS_CLK_SELECT_DIRECT_SEL_MASK);
 222              		.loc 1 448 0
 223 001e 7B68     		ldr	r3, [r7, #4]
 224 0020 0722     		movs	r2, #7
 225 0022 1340     		ands	r3, r2
 226 0024 BA68     		ldr	r2, [r7, #8]
 227 0026 1343     		orrs	r3, r2
 228 0028 BB60     		str	r3, [r7, #8]
 449:Generated_Source\PSoC4/CyLib.c ****     }
 450:Generated_Source\PSoC4/CyLib.c **** 
 451:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_CLK_SELECT_REG = tmpReg;
 229              		.loc 1 451 0
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 13


 230 002a 064B     		ldr	r3, .L8
 231 002c BA68     		ldr	r2, [r7, #8]
 232 002e 1A60     		str	r2, [r3]
 452:Generated_Source\PSoC4/CyLib.c **** 
 453:Generated_Source\PSoC4/CyLib.c ****     CyExitCriticalSection(interruptState);
 233              		.loc 1 453 0
 234 0030 0F23     		movs	r3, #15
 235 0032 FB18     		adds	r3, r7, r3
 236 0034 1B78     		ldrb	r3, [r3]
 237 0036 1800     		movs	r0, r3
 238 0038 FFF7FEFF 		bl	CyExitCriticalSection
 454:Generated_Source\PSoC4/CyLib.c **** }
 239              		.loc 1 454 0
 240 003c C046     		nop
 241 003e BD46     		mov	sp, r7
 242 0040 05B0     		add	sp, sp, #20
 243              		@ sp needed
 244 0042 90BD     		pop	{r4, r7, pc}
 245              	.L9:
 246              		.align	2
 247              	.L8:
 248 0044 00010B40 		.word	1074462976
 249              		.cfi_endproc
 250              	.LFE2:
 251              		.size	CySysClkWriteHfclkDirect, .-CySysClkWriteHfclkDirect
 252              		.section	.text.CySysEnablePumpClock,"ax",%progbits
 253              		.align	2
 254              		.global	CySysEnablePumpClock
 255              		.code	16
 256              		.thumb_func
 257              		.type	CySysEnablePumpClock, %function
 258              	CySysEnablePumpClock:
 259              	.LFB3:
 455:Generated_Source\PSoC4/CyLib.c **** 
 456:Generated_Source\PSoC4/CyLib.c **** 
 457:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
 458:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysEnablePumpClock
 459:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
 460:Generated_Source\PSoC4/CyLib.c **** *
 461:Generated_Source\PSoC4/CyLib.c **** * Enables / disables the pump clock.
 462:Generated_Source\PSoC4/CyLib.c **** *
 463:Generated_Source\PSoC4/CyLib.c **** * \param enable  
 464:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_PUMP_DISABLE - Disables the pump clock
 465:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_PUMP_ENABLE - Enables and restores the operating source of 
 466:Generated_Source\PSoC4/CyLib.c **** * the pump clock.
 467:Generated_Source\PSoC4/CyLib.c **** *
 468:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
 469:Generated_Source\PSoC4/CyLib.c **** *  Enabling/disabling the pump clock does not guarantee glitch free operation 
 470:Generated_Source\PSoC4/CyLib.c **** *  when changing the IMO parameters or clock divider settings.
 471:Generated_Source\PSoC4/CyLib.c **** *
 472:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 473:Generated_Source\PSoC4/CyLib.c **** void CySysEnablePumpClock(uint32 enable)
 474:Generated_Source\PSoC4/CyLib.c **** {
 260              		.loc 1 474 0
 261              		.cfi_startproc
 262              		@ args = 0, pretend = 0, frame = 8
 263              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 14


 264 0000 80B5     		push	{r7, lr}
 265              		.cfi_def_cfa_offset 8
 266              		.cfi_offset 7, -8
 267              		.cfi_offset 14, -4
 268 0002 82B0     		sub	sp, sp, #8
 269              		.cfi_def_cfa_offset 16
 270 0004 00AF     		add	r7, sp, #0
 271              		.cfi_def_cfa_register 7
 272 0006 7860     		str	r0, [r7, #4]
 475:Generated_Source\PSoC4/CyLib.c ****     #if(CY_IP_SRSSV2)
 476:Generated_Source\PSoC4/CyLib.c ****         if (0u != (CY_SYS_CLK_PUMP_ENABLE & enable))
 273              		.loc 1 476 0
 274 0008 7B68     		ldr	r3, [r7, #4]
 275 000a 0122     		movs	r2, #1
 276 000c 1340     		ands	r3, r2
 277 000e 08D0     		beq	.L11
 477:Generated_Source\PSoC4/CyLib.c ****         {
 478:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_CONFIG_REG |= (CySysClkPumpConfig << CY_SYS_CLK_IMO_CONFIG_PUMP_SEL_SHIF
 278              		.loc 1 478 0
 279 0010 0C4A     		ldr	r2, .L14
 280 0012 0C4B     		ldr	r3, .L14
 281 0014 1968     		ldr	r1, [r3]
 282 0016 0C4B     		ldr	r3, .L14+4
 283 0018 1B68     		ldr	r3, [r3]
 284 001a 5B06     		lsls	r3, r3, #25
 285 001c 0B43     		orrs	r3, r1
 286 001e 1360     		str	r3, [r2]
 479:Generated_Source\PSoC4/CyLib.c ****         }
 480:Generated_Source\PSoC4/CyLib.c ****         else
 481:Generated_Source\PSoC4/CyLib.c ****         {
 482:Generated_Source\PSoC4/CyLib.c ****             CySysClkPumpConfig = (CY_SYS_CLK_IMO_CONFIG_REG >> CY_SYS_CLK_IMO_CONFIG_PUMP_SEL_SHIFT
 483:Generated_Source\PSoC4/CyLib.c ****                                   CY_SYS_CLK_IMO_CONFIG_PUMP_SEL_MASK;
 484:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_CONFIG_REG &= ~(CY_SYS_CLK_IMO_CONFIG_PUMP_SEL_MASK << CY_SYS_CLK_IMO_CO
 485:Generated_Source\PSoC4/CyLib.c ****         }
 486:Generated_Source\PSoC4/CyLib.c ****     #else /* CY_IP_SRSSLT */
 487:Generated_Source\PSoC4/CyLib.c ****         if (0u != (CY_SYS_CLK_PUMP_ENABLE & enable))
 488:Generated_Source\PSoC4/CyLib.c ****         {
 489:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_SELECT_REG |= (CySysClkPumpConfig << CY_SYS_CLK_SELECT_PUMP_SEL_SHIFT);
 490:Generated_Source\PSoC4/CyLib.c ****         }
 491:Generated_Source\PSoC4/CyLib.c ****         else
 492:Generated_Source\PSoC4/CyLib.c ****         {
 493:Generated_Source\PSoC4/CyLib.c ****             CySysClkPumpConfig = (CY_SYS_CLK_SELECT_REG >> CY_SYS_CLK_SELECT_PUMP_SEL_SHIFT) & 
 494:Generated_Source\PSoC4/CyLib.c ****                                   CY_SYS_CLK_SELECT_PUMP_SEL_MASK;
 495:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_SELECT_REG &= ~(CY_SYS_CLK_SELECT_PUMP_SEL_MASK << CY_SYS_CLK_SELECT_PUMP_SE
 496:Generated_Source\PSoC4/CyLib.c ****         }
 497:Generated_Source\PSoC4/CyLib.c ****     #endif  /* (CY_IP_SRSSV2) */
 498:Generated_Source\PSoC4/CyLib.c **** }
 287              		.loc 1 498 0
 288 0020 0CE0     		b	.L13
 289              	.L11:
 482:Generated_Source\PSoC4/CyLib.c ****                                   CY_SYS_CLK_IMO_CONFIG_PUMP_SEL_MASK;
 290              		.loc 1 482 0
 291 0022 084B     		ldr	r3, .L14
 292 0024 1B68     		ldr	r3, [r3]
 293 0026 5B0E     		lsrs	r3, r3, #25
 294 0028 0722     		movs	r2, #7
 295 002a 1A40     		ands	r2, r3
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 15


 296 002c 064B     		ldr	r3, .L14+4
 297 002e 1A60     		str	r2, [r3]
 484:Generated_Source\PSoC4/CyLib.c ****         }
 298              		.loc 1 484 0
 299 0030 044B     		ldr	r3, .L14
 300 0032 044A     		ldr	r2, .L14
 301 0034 1268     		ldr	r2, [r2]
 302 0036 0549     		ldr	r1, .L14+8
 303 0038 0A40     		ands	r2, r1
 304 003a 1A60     		str	r2, [r3]
 305              	.L13:
 306              		.loc 1 498 0
 307 003c C046     		nop
 308 003e BD46     		mov	sp, r7
 309 0040 02B0     		add	sp, sp, #8
 310              		@ sp needed
 311 0042 80BD     		pop	{r7, pc}
 312              	.L15:
 313              		.align	2
 314              	.L14:
 315 0044 08010B40 		.word	1074462984
 316 0048 00000000 		.word	CySysClkPumpConfig
 317 004c FFFFFFF1 		.word	-234881025
 318              		.cfi_endproc
 319              	.LFE3:
 320              		.size	CySysEnablePumpClock, .-CySysEnablePumpClock
 321              		.section	.text.CySysClkGetSysclkSource,"ax",%progbits
 322              		.align	2
 323              		.global	CySysClkGetSysclkSource
 324              		.code	16
 325              		.thumb_func
 326              		.type	CySysClkGetSysclkSource, %function
 327              	CySysClkGetSysclkSource:
 328              	.LFB4:
 499:Generated_Source\PSoC4/CyLib.c **** 
 500:Generated_Source\PSoC4/CyLib.c **** 
 501:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
 502:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkGetSysclkSource
 503:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
 504:Generated_Source\PSoC4/CyLib.c **** *
 505:Generated_Source\PSoC4/CyLib.c **** * Returns the source of the System clock.
 506:Generated_Source\PSoC4/CyLib.c **** *
 507:Generated_Source\PSoC4/CyLib.c **** * \return The same as \ref CySysClkWriteHfclkDirect() function parameters.
 508:Generated_Source\PSoC4/CyLib.c **** *
 509:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 510:Generated_Source\PSoC4/CyLib.c **** uint32 CySysClkGetSysclkSource(void)
 511:Generated_Source\PSoC4/CyLib.c **** {
 329              		.loc 1 511 0
 330              		.cfi_startproc
 331              		@ args = 0, pretend = 0, frame = 8
 332              		@ frame_needed = 1, uses_anonymous_args = 0
 333 0000 90B5     		push	{r4, r7, lr}
 334              		.cfi_def_cfa_offset 12
 335              		.cfi_offset 4, -12
 336              		.cfi_offset 7, -8
 337              		.cfi_offset 14, -4
 338 0002 83B0     		sub	sp, sp, #12
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 16


 339              		.cfi_def_cfa_offset 24
 340 0004 00AF     		add	r7, sp, #0
 341              		.cfi_def_cfa_register 7
 512:Generated_Source\PSoC4/CyLib.c ****     uint8  interruptState;
 513:Generated_Source\PSoC4/CyLib.c ****     uint32 sysclkSource;
 514:Generated_Source\PSoC4/CyLib.c **** 
 515:Generated_Source\PSoC4/CyLib.c ****     interruptState = CyEnterCriticalSection();
 342              		.loc 1 515 0
 343 0006 FC1D     		adds	r4, r7, #7
 344 0008 FFF7FEFF 		bl	CyEnterCriticalSection
 345 000c 0300     		movs	r3, r0
 346 000e 2370     		strb	r3, [r4]
 516:Generated_Source\PSoC4/CyLib.c **** 
 517:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_SRSSV2 && CY_IP_PLL)
 518:Generated_Source\PSoC4/CyLib.c ****     if ((CY_SYS_CLK_SELECT_REG & CY_SYS_CLK_SELECT_HFCLK_SEL_MASK) != 0u)
 519:Generated_Source\PSoC4/CyLib.c ****     {
 520:Generated_Source\PSoC4/CyLib.c ****         sysclkSource = (CY_SYS_CLK_SELECT_REG & CY_SYS_CLK_SELECT_HFCLK_SEL_MASK);
 521:Generated_Source\PSoC4/CyLib.c ****     }
 522:Generated_Source\PSoC4/CyLib.c ****     else
 523:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2 && CY_IP_PLL) */
 524:Generated_Source\PSoC4/CyLib.c ****     {
 525:Generated_Source\PSoC4/CyLib.c ****         sysclkSource = (CY_SYS_CLK_SELECT_REG & CY_SYS_CLK_SELECT_DIRECT_SEL_MASK);
 347              		.loc 1 525 0
 348 0010 074B     		ldr	r3, .L18
 349 0012 1B68     		ldr	r3, [r3]
 350 0014 0722     		movs	r2, #7
 351 0016 1340     		ands	r3, r2
 352 0018 3B60     		str	r3, [r7]
 526:Generated_Source\PSoC4/CyLib.c ****     }
 527:Generated_Source\PSoC4/CyLib.c **** 
 528:Generated_Source\PSoC4/CyLib.c ****     CyExitCriticalSection(interruptState);
 353              		.loc 1 528 0
 354 001a FB1D     		adds	r3, r7, #7
 355 001c 1B78     		ldrb	r3, [r3]
 356 001e 1800     		movs	r0, r3
 357 0020 FFF7FEFF 		bl	CyExitCriticalSection
 529:Generated_Source\PSoC4/CyLib.c **** 
 530:Generated_Source\PSoC4/CyLib.c ****     return (sysclkSource);
 358              		.loc 1 530 0
 359 0024 3B68     		ldr	r3, [r7]
 531:Generated_Source\PSoC4/CyLib.c **** }
 360              		.loc 1 531 0
 361 0026 1800     		movs	r0, r3
 362 0028 BD46     		mov	sp, r7
 363 002a 03B0     		add	sp, sp, #12
 364              		@ sp needed
 365 002c 90BD     		pop	{r4, r7, pc}
 366              	.L19:
 367 002e C046     		.align	2
 368              	.L18:
 369 0030 00010B40 		.word	1074462976
 370              		.cfi_endproc
 371              	.LFE4:
 372              		.size	CySysClkGetSysclkSource, .-CySysClkGetSysclkSource
 373              		.section	.text.CySysClkWriteSysclkDiv,"ax",%progbits
 374              		.align	2
 375              		.global	CySysClkWriteSysclkDiv
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 17


 376              		.code	16
 377              		.thumb_func
 378              		.type	CySysClkWriteSysclkDiv, %function
 379              	CySysClkWriteSysclkDiv:
 380              	.LFB5:
 532:Generated_Source\PSoC4/CyLib.c **** 
 533:Generated_Source\PSoC4/CyLib.c **** 
 534:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
 535:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkWriteSysclkDiv
 536:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
 537:Generated_Source\PSoC4/CyLib.c **** *
 538:Generated_Source\PSoC4/CyLib.c **** * Selects the prescaler divide amount for SYSCLK from HFCLK.
 539:Generated_Source\PSoC4/CyLib.c **** *
 540:Generated_Source\PSoC4/CyLib.c **** * PSoC 4000: The SYSCLK has the speed of 16 MHz, so HFCLK and SYSCLK dividers
 541:Generated_Source\PSoC4/CyLib.c **** * should be selected in a way, not to exceed 16 MHz for SYSCLK.
 542:Generated_Source\PSoC4/CyLib.c **** *
 543:Generated_Source\PSoC4/CyLib.c **** * PSoC 4100 \ PSoC 4100 BLE \ PSoC 4100M: The SYSCLK has the speed of 24 MHz,
 544:Generated_Source\PSoC4/CyLib.c **** * so HFCLK and SYSCLK dividers should be selected in a way, not to exceed 24 MHz
 545:Generated_Source\PSoC4/CyLib.c **** * for SYSCLK.
 546:Generated_Source\PSoC4/CyLib.c **** *
 547:Generated_Source\PSoC4/CyLib.c **** * If the SYSCLK clock frequency increases during the device operation, call
 548:Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() with the appropriate parameter to adjust the
 549:Generated_Source\PSoC4/CyLib.c **** * number of clock cycles the cache will wait before sampling data comes back
 550:Generated_Source\PSoC4/CyLib.c **** * from Flash. If the SYSCLK clock frequency decreases, you can call
 551:Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() to improve the CPU performance. See
 552:Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() description for more information.
 553:Generated_Source\PSoC4/CyLib.c **** *
 554:Generated_Source\PSoC4/CyLib.c **** * \param divider Power of 2 prescaler selection
 555:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV1        SYSCLK = HFCLK / 1
 556:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV2        SYSCLK = HFCLK / 2
 557:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV4        SYSCLK = HFCLK / 4
 558:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV8        SYSCLK = HFCLK / 8
 559:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV16       SYSCLK = HFCLK / 16  (N/A for 4000 Family)
 560:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV32       SYSCLK = HFCLK / 32  (N/A for 4000 Family)
 561:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV64       SYSCLK = HFCLK / 64  (N/A for 4000 Family)
 562:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV128      SYSCLK = HFCLK / 128 (N/A for 4000 Family)
 563:Generated_Source\PSoC4/CyLib.c **** *
 564:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 565:Generated_Source\PSoC4/CyLib.c **** void CySysClkWriteSysclkDiv(uint32 divider)
 566:Generated_Source\PSoC4/CyLib.c **** {
 381              		.loc 1 566 0
 382              		.cfi_startproc
 383              		@ args = 0, pretend = 0, frame = 16
 384              		@ frame_needed = 1, uses_anonymous_args = 0
 385 0000 90B5     		push	{r4, r7, lr}
 386              		.cfi_def_cfa_offset 12
 387              		.cfi_offset 4, -12
 388              		.cfi_offset 7, -8
 389              		.cfi_offset 14, -4
 390 0002 85B0     		sub	sp, sp, #20
 391              		.cfi_def_cfa_offset 32
 392 0004 00AF     		add	r7, sp, #0
 393              		.cfi_def_cfa_register 7
 394 0006 7860     		str	r0, [r7, #4]
 567:Generated_Source\PSoC4/CyLib.c ****     uint8  interruptState;
 568:Generated_Source\PSoC4/CyLib.c **** 
 569:Generated_Source\PSoC4/CyLib.c ****     interruptState = CyEnterCriticalSection();
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 18


 395              		.loc 1 569 0
 396 0008 0F23     		movs	r3, #15
 397 000a FC18     		adds	r4, r7, r3
 398 000c FFF7FEFF 		bl	CyEnterCriticalSection
 399 0010 0300     		movs	r3, r0
 400 0012 2370     		strb	r3, [r4]
 570:Generated_Source\PSoC4/CyLib.c **** 
 571:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_CLK_SELECT_REG = ((uint32)(((uint32)divider & CY_SYS_CLK_SELECT_SYSCLK_DIV_MASK) <<
 401              		.loc 1 571 0
 402 0014 0A4B     		ldr	r3, .L21
 403 0016 7A68     		ldr	r2, [r7, #4]
 404 0018 D104     		lsls	r1, r2, #19
 405 001a E022     		movs	r2, #224
 406 001c 9203     		lsls	r2, r2, #14
 407 001e 1140     		ands	r1, r2
 572:Generated_Source\PSoC4/CyLib.c ****                                     CY_SYS_CLK_SELECT_SYSCLK_DIV_SHIFT)) |
 573:Generated_Source\PSoC4/CyLib.c ****                             (CY_SYS_CLK_SELECT_REG & ((uint32)(~(uint32)(CY_SYS_CLK_SELECT_SYSCLK_D
 408              		.loc 1 573 0
 409 0020 074A     		ldr	r2, .L21
 410 0022 1268     		ldr	r2, [r2]
 411 0024 0748     		ldr	r0, .L21+4
 412 0026 0240     		ands	r2, r0
 572:Generated_Source\PSoC4/CyLib.c ****                                     CY_SYS_CLK_SELECT_SYSCLK_DIV_SHIFT)) |
 413              		.loc 1 572 0
 414 0028 0A43     		orrs	r2, r1
 571:Generated_Source\PSoC4/CyLib.c ****                                     CY_SYS_CLK_SELECT_SYSCLK_DIV_SHIFT)) |
 415              		.loc 1 571 0
 416 002a 1A60     		str	r2, [r3]
 574:Generated_Source\PSoC4/CyLib.c ****                                     CY_SYS_CLK_SELECT_SYSCLK_DIV_SHIFT))));
 575:Generated_Source\PSoC4/CyLib.c **** 
 576:Generated_Source\PSoC4/CyLib.c ****     CyExitCriticalSection(interruptState);
 417              		.loc 1 576 0
 418 002c 0F23     		movs	r3, #15
 419 002e FB18     		adds	r3, r7, r3
 420 0030 1B78     		ldrb	r3, [r3]
 421 0032 1800     		movs	r0, r3
 422 0034 FFF7FEFF 		bl	CyExitCriticalSection
 577:Generated_Source\PSoC4/CyLib.c **** }
 423              		.loc 1 577 0
 424 0038 C046     		nop
 425 003a BD46     		mov	sp, r7
 426 003c 05B0     		add	sp, sp, #20
 427              		@ sp needed
 428 003e 90BD     		pop	{r4, r7, pc}
 429              	.L22:
 430              		.align	2
 431              	.L21:
 432 0040 00010B40 		.word	1074462976
 433 0044 FFFFC7FF 		.word	-3670017
 434              		.cfi_endproc
 435              	.LFE5:
 436              		.size	CySysClkWriteSysclkDiv, .-CySysClkWriteSysclkDiv
 437              		.section	.text.CySysClkWriteImoFreq,"ax",%progbits
 438              		.align	2
 439              		.global	CySysClkWriteImoFreq
 440              		.code	16
 441              		.thumb_func
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 19


 442              		.type	CySysClkWriteImoFreq, %function
 443              	CySysClkWriteImoFreq:
 444              	.LFB6:
 578:Generated_Source\PSoC4/CyLib.c **** 
 579:Generated_Source\PSoC4/CyLib.c **** 
 580:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
 581:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkWriteImoFreq
 582:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
 583:Generated_Source\PSoC4/CyLib.c **** *
 584:Generated_Source\PSoC4/CyLib.c **** * Sets the frequency of the IMO.
 585:Generated_Source\PSoC4/CyLib.c **** *
 586:Generated_Source\PSoC4/CyLib.c **** * PSoC 4000: The SYSCLK has the speed of 16 MHz, so HFCLK and SYSCLK dividers
 587:Generated_Source\PSoC4/CyLib.c **** * should be selected in a way, not to exceed 16 MHz for SYSCLK.
 588:Generated_Source\PSoC4/CyLib.c **** *
 589:Generated_Source\PSoC4/CyLib.c **** * PSoC 4100 \ PSoC 4100 BLE \ PSoC 4100M: The SYSCLK has the speed of 24 MHz,
 590:Generated_Source\PSoC4/CyLib.c **** * so HFCLK and SYSCLK dividers should be selected in a way, not to exceed 24 MHz
 591:Generated_Source\PSoC4/CyLib.c **** * for SYSCLK.
 592:Generated_Source\PSoC4/CyLib.c **** *
 593:Generated_Source\PSoC4/CyLib.c **** * For PSoC 4200M and PSoC 4200L device families, if WCO lock feature is enabled
 594:Generated_Source\PSoC4/CyLib.c **** * then this API will disable the lock, write the new IMO frequency and then
 595:Generated_Source\PSoC4/CyLib.c **** * re-enable the lock.
 596:Generated_Source\PSoC4/CyLib.c **** *
 597:Generated_Source\PSoC4/CyLib.c **** * For PSoC 4200L device families, this function enables the USB lock when 24 or
 598:Generated_Source\PSoC4/CyLib.c **** * 48 MHz passed as a parameter if the USB lock option is enabled in Design Wide
 599:Generated_Source\PSoC4/CyLib.c **** * Resources tab or CySysClkImoEnableUsbLock() was called before. Note the USB
 600:Generated_Source\PSoC4/CyLib.c **** * lock is disabled during IMO frequency change.
 601:Generated_Source\PSoC4/CyLib.c **** *
 602:Generated_Source\PSoC4/CyLib.c **** * The CPU is halted if new frequency is invalid and project is compiled
 603:Generated_Source\PSoC4/CyLib.c **** * in debug mode.
 604:Generated_Source\PSoC4/CyLib.c **** *
 605:Generated_Source\PSoC4/CyLib.c **** * If the SYSCLK clock frequency increases during the device operation, call
 606:Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() with the appropriate parameter to adjust the
 607:Generated_Source\PSoC4/CyLib.c **** * number of clock cycles the cache will wait before sampling data comes back
 608:Generated_Source\PSoC4/CyLib.c **** * from Flash. If the SYSCLK clock frequency decreases, you can call
 609:Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() to improve the CPU performance. See
 610:Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() description for more information.
 611:Generated_Source\PSoC4/CyLib.c **** *
 612:Generated_Source\PSoC4/CyLib.c **** * PSoC 4000: The System Clock (SYSCLK) has maximum speed of 16 MHz, so HFCLK
 613:Generated_Source\PSoC4/CyLib.c **** * and SYSCLK dividers should be selected in a way, to not to exceed 16 MHz for
 614:Generated_Source\PSoC4/CyLib.c **** * the System clock.
 615:Generated_Source\PSoC4/CyLib.c **** *
 616:Generated_Source\PSoC4/CyLib.c **** * \param freq All PSoC 4 families excluding the following: Valid range [3-48]
 617:Generated_Source\PSoC4/CyLib.c **** * with step size equals 1. PSoC 4000: Valid values are 24, 32, and 48.
 618:Generated_Source\PSoC4/CyLib.c **** * PSoC 4000S / PSoC 4100S / PSoC 4400: Valid range [24-48] with step size equals
 619:Generated_Source\PSoC4/CyLib.c **** * 4.
 620:Generated_Source\PSoC4/CyLib.c **** *
 621:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 622:Generated_Source\PSoC4/CyLib.c **** #if(CY_IP_SRSSV2)
 623:Generated_Source\PSoC4/CyLib.c ****     void CySysClkWriteImoFreq(uint32 freq)
 624:Generated_Source\PSoC4/CyLib.c ****     {
 445              		.loc 1 624 0
 446              		.cfi_startproc
 447              		@ args = 0, pretend = 0, frame = 16
 448              		@ frame_needed = 1, uses_anonymous_args = 0
 449 0000 90B5     		push	{r4, r7, lr}
 450              		.cfi_def_cfa_offset 12
 451              		.cfi_offset 4, -12
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 20


 452              		.cfi_offset 7, -8
 453              		.cfi_offset 14, -4
 454 0002 85B0     		sub	sp, sp, #20
 455              		.cfi_def_cfa_offset 32
 456 0004 00AF     		add	r7, sp, #0
 457              		.cfi_def_cfa_register 7
 458 0006 7860     		str	r0, [r7, #4]
 625:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_FMLT)
 626:Generated_Source\PSoC4/CyLib.c ****             volatile uint32   parameters[2u];
 627:Generated_Source\PSoC4/CyLib.c ****             volatile uint32   regValues[4u];
 628:Generated_Source\PSoC4/CyLib.c ****         #else
 629:Generated_Source\PSoC4/CyLib.c ****             uint8  bgTrim4;
 630:Generated_Source\PSoC4/CyLib.c ****             uint8  bgTrim5;
 631:Generated_Source\PSoC4/CyLib.c ****             uint8  newImoTrim2Value;
 632:Generated_Source\PSoC4/CyLib.c ****             uint8  currentImoTrim2Value;
 633:Generated_Source\PSoC4/CyLib.c ****             uint8  imoTrim1Value;
 634:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_FM) */
 635:Generated_Source\PSoC4/CyLib.c **** 
 636:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 637:Generated_Source\PSoC4/CyLib.c ****             uint32 wcoLock = 0u;
 638:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 639:Generated_Source\PSoC4/CyLib.c **** 
 640:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 641:Generated_Source\PSoC4/CyLib.c ****             uint32 usbLock = 0u;
 642:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 643:Generated_Source\PSoC4/CyLib.c **** 
 644:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
 645:Generated_Source\PSoC4/CyLib.c **** 
 646:Generated_Source\PSoC4/CyLib.c **** 
 647:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
 459              		.loc 1 647 0
 460 0008 0C23     		movs	r3, #12
 461 000a FC18     		adds	r4, r7, r3
 462 000c FFF7FEFF 		bl	CyEnterCriticalSection
 463 0010 0300     		movs	r3, r0
 464 0012 2370     		strb	r3, [r4]
 648:Generated_Source\PSoC4/CyLib.c **** 
 649:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 650:Generated_Source\PSoC4/CyLib.c ****             if(0u != CySysClkImoGetWcoLock())
 651:Generated_Source\PSoC4/CyLib.c ****             {
 652:Generated_Source\PSoC4/CyLib.c ****                 wcoLock = 1u;
 653:Generated_Source\PSoC4/CyLib.c ****                 CySysClkImoDisableWcoLock();
 654:Generated_Source\PSoC4/CyLib.c ****             }
 655:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 656:Generated_Source\PSoC4/CyLib.c **** 
 657:Generated_Source\PSoC4/CyLib.c **** 
 658:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 659:Generated_Source\PSoC4/CyLib.c **** 
 660:Generated_Source\PSoC4/CyLib.c ****             #if (CYDEV_IMO_TRIMMED_BY_USB == 0u)
 661:Generated_Source\PSoC4/CyLib.c ****                 if(0u != CySysClkImoGetUsbLock())
 662:Generated_Source\PSoC4/CyLib.c ****                 {
 663:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
 664:Generated_Source\PSoC4/CyLib.c **** 
 665:Generated_Source\PSoC4/CyLib.c ****                 if ((24u == freq) || (48u == freq))
 666:Generated_Source\PSoC4/CyLib.c ****                 {
 667:Generated_Source\PSoC4/CyLib.c ****                     usbLock = 1u;
 668:Generated_Source\PSoC4/CyLib.c ****                     CySysClkImoDisableUsbLock();
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 21


 669:Generated_Source\PSoC4/CyLib.c ****                 }
 670:Generated_Source\PSoC4/CyLib.c **** 
 671:Generated_Source\PSoC4/CyLib.c ****             #if (CYDEV_IMO_TRIMMED_BY_USB == 0u)
 672:Generated_Source\PSoC4/CyLib.c ****                 }
 673:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
 674:Generated_Source\PSoC4/CyLib.c **** 
 675:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
 676:Generated_Source\PSoC4/CyLib.c **** 
 677:Generated_Source\PSoC4/CyLib.c **** 
 678:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_FMLT)
 679:Generated_Source\PSoC4/CyLib.c **** 
 680:Generated_Source\PSoC4/CyLib.c ****             /* FM-Lite Clock Restore */
 681:Generated_Source\PSoC4/CyLib.c ****             regValues[0u] = CY_SYS_CLK_IMO_CONFIG_REG;
 682:Generated_Source\PSoC4/CyLib.c ****             regValues[1u] = CY_SYS_CLK_SELECT_REG;
 683:Generated_Source\PSoC4/CyLib.c ****             regValues[2u] = cyImoFreqMhz2Reg[freq - CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET];
 684:Generated_Source\PSoC4/CyLib.c ****             regValues[3u] = CY_FLASH_CTL_REG;
 685:Generated_Source\PSoC4/CyLib.c **** 
 686:Generated_Source\PSoC4/CyLib.c ****             parameters[0u] =
 687:Generated_Source\PSoC4/CyLib.c ****                 (uint32) ((CY_FLASH_KEY_TWO(CY_FLASH_API_OPCODE_CLK_RESTORE) <<  CY_FLASH_PARAM_KEY
 688:Generated_Source\PSoC4/CyLib.c ****                             CY_FLASH_KEY_ONE);
 689:Generated_Source\PSoC4/CyLib.c ****             parameters[1u] = (uint32) &regValues[0u];
 690:Generated_Source\PSoC4/CyLib.c **** 
 691:Generated_Source\PSoC4/CyLib.c ****             CY_FLASH_CPUSS_SYSARG_REG = (uint32) &parameters[0u];
 692:Generated_Source\PSoC4/CyLib.c ****             CY_FLASH_CPUSS_SYSREQ_REG = CY_FLASH_CPUSS_REQ_START | CY_FLASH_API_OPCODE_CLK_RESTORE;
 693:Generated_Source\PSoC4/CyLib.c ****             (void) CY_FLASH_CPUSS_SYSARG_REG;
 694:Generated_Source\PSoC4/CyLib.c **** 
 695:Generated_Source\PSoC4/CyLib.c ****         #else /* (CY_IP_FM) */
 696:Generated_Source\PSoC4/CyLib.c **** 
 697:Generated_Source\PSoC4/CyLib.c ****         if ((freq >= CY_SYS_CLK_IMO_MIN_FREQ_MHZ) && (freq <= CY_SYS_CLK_IMO_MAX_FREQ_MHZ))
 465              		.loc 1 697 0
 466 0014 7B68     		ldr	r3, [r7, #4]
 467 0016 022B     		cmp	r3, #2
 468 0018 00D8     		bhi	.LCB302
 469 001a B3E0     		b	.L24	@long jump
 470              	.LCB302:
 471              		.loc 1 697 0 is_stmt 0 discriminator 1
 472 001c 7B68     		ldr	r3, [r7, #4]
 473 001e 302B     		cmp	r3, #48
 474 0020 00D9     		bls	.LCB305
 475 0022 AFE0     		b	.L24	@long jump
 476              	.LCB305:
 698:Generated_Source\PSoC4/CyLib.c ****         {
 699:Generated_Source\PSoC4/CyLib.c ****             if(freq <= CY_SFLASH_IMO_MAXF0_REG)
 477              		.loc 1 699 0 is_stmt 1
 478 0024 5E4B     		ldr	r3, .L35
 479 0026 1B78     		ldrb	r3, [r3]
 480 0028 DBB2     		uxtb	r3, r3
 481 002a 1A00     		movs	r2, r3
 482 002c 7B68     		ldr	r3, [r7, #4]
 483 002e 9A42     		cmp	r2, r3
 484 0030 0AD3     		bcc	.L25
 700:Generated_Source\PSoC4/CyLib.c ****             {
 701:Generated_Source\PSoC4/CyLib.c ****                 bgTrim4 = CY_SFLASH_IMO_ABS0_REG;
 485              		.loc 1 701 0
 486 0032 5C4A     		ldr	r2, .L35+4
 487 0034 0F23     		movs	r3, #15
 488 0036 FB18     		adds	r3, r7, r3
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 22


 489 0038 1278     		ldrb	r2, [r2]
 490 003a 1A70     		strb	r2, [r3]
 702:Generated_Source\PSoC4/CyLib.c ****                 bgTrim5 = CY_SFLASH_IMO_TMPCO0_REG;
 491              		.loc 1 702 0
 492 003c 5A4A     		ldr	r2, .L35+8
 493 003e 0E23     		movs	r3, #14
 494 0040 FB18     		adds	r3, r7, r3
 495 0042 1278     		ldrb	r2, [r2]
 496 0044 1A70     		strb	r2, [r3]
 497 0046 3FE0     		b	.L26
 498              	.L25:
 703:Generated_Source\PSoC4/CyLib.c ****             }
 704:Generated_Source\PSoC4/CyLib.c ****             else if(freq <= CY_SFLASH_IMO_MAXF1_REG)
 499              		.loc 1 704 0
 500 0048 584B     		ldr	r3, .L35+12
 501 004a 1B78     		ldrb	r3, [r3]
 502 004c DBB2     		uxtb	r3, r3
 503 004e 1A00     		movs	r2, r3
 504 0050 7B68     		ldr	r3, [r7, #4]
 505 0052 9A42     		cmp	r2, r3
 506 0054 0AD3     		bcc	.L27
 705:Generated_Source\PSoC4/CyLib.c ****             {
 706:Generated_Source\PSoC4/CyLib.c ****                 bgTrim4 = CY_SFLASH_IMO_ABS1_REG;
 507              		.loc 1 706 0
 508 0056 564A     		ldr	r2, .L35+16
 509 0058 0F23     		movs	r3, #15
 510 005a FB18     		adds	r3, r7, r3
 511 005c 1278     		ldrb	r2, [r2]
 512 005e 1A70     		strb	r2, [r3]
 707:Generated_Source\PSoC4/CyLib.c ****                 bgTrim5 = CY_SFLASH_IMO_TMPCO1_REG;
 513              		.loc 1 707 0
 514 0060 544A     		ldr	r2, .L35+20
 515 0062 0E23     		movs	r3, #14
 516 0064 FB18     		adds	r3, r7, r3
 517 0066 1278     		ldrb	r2, [r2]
 518 0068 1A70     		strb	r2, [r3]
 519 006a 2DE0     		b	.L26
 520              	.L27:
 708:Generated_Source\PSoC4/CyLib.c ****             }
 709:Generated_Source\PSoC4/CyLib.c ****             else if(freq <= CY_SFLASH_IMO_MAXF2_REG)
 521              		.loc 1 709 0
 522 006c 524B     		ldr	r3, .L35+24
 523 006e 1B78     		ldrb	r3, [r3]
 524 0070 DBB2     		uxtb	r3, r3
 525 0072 1A00     		movs	r2, r3
 526 0074 7B68     		ldr	r3, [r7, #4]
 527 0076 9A42     		cmp	r2, r3
 528 0078 0AD3     		bcc	.L28
 710:Generated_Source\PSoC4/CyLib.c ****             {
 711:Generated_Source\PSoC4/CyLib.c ****                 bgTrim4 = CY_SFLASH_IMO_ABS2_REG;
 529              		.loc 1 711 0
 530 007a 504A     		ldr	r2, .L35+28
 531 007c 0F23     		movs	r3, #15
 532 007e FB18     		adds	r3, r7, r3
 533 0080 1278     		ldrb	r2, [r2]
 534 0082 1A70     		strb	r2, [r3]
 712:Generated_Source\PSoC4/CyLib.c ****                 bgTrim5 = CY_SFLASH_IMO_TMPCO2_REG;
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 23


 535              		.loc 1 712 0
 536 0084 4E4A     		ldr	r2, .L35+32
 537 0086 0E23     		movs	r3, #14
 538 0088 FB18     		adds	r3, r7, r3
 539 008a 1278     		ldrb	r2, [r2]
 540 008c 1A70     		strb	r2, [r3]
 541 008e 1BE0     		b	.L26
 542              	.L28:
 713:Generated_Source\PSoC4/CyLib.c ****             }
 714:Generated_Source\PSoC4/CyLib.c ****             else if(freq <= CY_SFLASH_IMO_MAXF3_REG)
 543              		.loc 1 714 0
 544 0090 4C4B     		ldr	r3, .L35+36
 545 0092 1B78     		ldrb	r3, [r3]
 546 0094 DBB2     		uxtb	r3, r3
 547 0096 1A00     		movs	r2, r3
 548 0098 7B68     		ldr	r3, [r7, #4]
 549 009a 9A42     		cmp	r2, r3
 550 009c 0AD3     		bcc	.L29
 715:Generated_Source\PSoC4/CyLib.c ****             {
 716:Generated_Source\PSoC4/CyLib.c ****                 bgTrim4 = CY_SFLASH_IMO_ABS3_REG;
 551              		.loc 1 716 0
 552 009e 4A4A     		ldr	r2, .L35+40
 553 00a0 0F23     		movs	r3, #15
 554 00a2 FB18     		adds	r3, r7, r3
 555 00a4 1278     		ldrb	r2, [r2]
 556 00a6 1A70     		strb	r2, [r3]
 717:Generated_Source\PSoC4/CyLib.c ****                 bgTrim5 = CY_SFLASH_IMO_TMPCO3_REG;
 557              		.loc 1 717 0
 558 00a8 484A     		ldr	r2, .L35+44
 559 00aa 0E23     		movs	r3, #14
 560 00ac FB18     		adds	r3, r7, r3
 561 00ae 1278     		ldrb	r2, [r2]
 562 00b0 1A70     		strb	r2, [r3]
 563 00b2 09E0     		b	.L26
 564              	.L29:
 718:Generated_Source\PSoC4/CyLib.c ****             }
 719:Generated_Source\PSoC4/CyLib.c ****             else
 720:Generated_Source\PSoC4/CyLib.c ****             {
 721:Generated_Source\PSoC4/CyLib.c ****                 bgTrim4 = CY_SFLASH_IMO_ABS4_REG;
 565              		.loc 1 721 0
 566 00b4 464A     		ldr	r2, .L35+48
 567 00b6 0F23     		movs	r3, #15
 568 00b8 FB18     		adds	r3, r7, r3
 569 00ba 1278     		ldrb	r2, [r2]
 570 00bc 1A70     		strb	r2, [r3]
 722:Generated_Source\PSoC4/CyLib.c ****                 bgTrim5 = CY_SFLASH_IMO_TMPCO4_REG;
 571              		.loc 1 722 0
 572 00be 454A     		ldr	r2, .L35+52
 573 00c0 0E23     		movs	r3, #14
 574 00c2 FB18     		adds	r3, r7, r3
 575 00c4 1278     		ldrb	r2, [r2]
 576 00c6 1A70     		strb	r2, [r3]
 577              	.L26:
 723:Generated_Source\PSoC4/CyLib.c ****             }
 724:Generated_Source\PSoC4/CyLib.c **** 
 725:Generated_Source\PSoC4/CyLib.c ****             /* Get IMO_TRIM2 value for the new frequency */
 726:Generated_Source\PSoC4/CyLib.c ****             newImoTrim2Value = cyImoFreqMhz2Reg[freq - CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET];
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 24


 578              		.loc 1 726 0
 579 00c8 7B68     		ldr	r3, [r7, #4]
 580 00ca DA1E     		subs	r2, r3, #3
 581 00cc 0B23     		movs	r3, #11
 582 00ce FB18     		adds	r3, r7, r3
 583 00d0 4149     		ldr	r1, .L35+56
 584 00d2 8A5C     		ldrb	r2, [r1, r2]
 585 00d4 1A70     		strb	r2, [r3]
 727:Generated_Source\PSoC4/CyLib.c **** 
 728:Generated_Source\PSoC4/CyLib.c **** 
 729:Generated_Source\PSoC4/CyLib.c ****             /****************************************************************************
 730:Generated_Source\PSoC4/CyLib.c ****             * The IMO can have a different trim per frequency. To avoid possible corner
 731:Generated_Source\PSoC4/CyLib.c ****             * cases where a trim change can exceed the maximum frequency, the trim must
 732:Generated_Source\PSoC4/CyLib.c ****             * be applied at a frequency that is low enough.
 733:Generated_Source\PSoC4/CyLib.c ****             *
 734:Generated_Source\PSoC4/CyLib.c ****             * Comparing IMO_TRIM2 values for the current and new frequencies, since
 735:Generated_Source\PSoC4/CyLib.c ****             * IMO_TRIM2 value as a function of IMO frequency is a strictly increasing
 736:Generated_Source\PSoC4/CyLib.c ****             * function and is time-invariant.
 737:Generated_Source\PSoC4/CyLib.c ****             ***************************************************************************/
 738:Generated_Source\PSoC4/CyLib.c ****             if ((newImoTrim2Value >= CY_SYS_CLK_IMO_BOUNDARY_FREQ_TRIM2) && (freq >= CY_SYS_CLK_IMO
 586              		.loc 1 738 0
 587 00d6 0B23     		movs	r3, #11
 588 00d8 FB18     		adds	r3, r7, r3
 589 00da 1B78     		ldrb	r3, [r3]
 590 00dc 2F2B     		cmp	r3, #47
 591 00de 0DD9     		bls	.L30
 592              		.loc 1 738 0 is_stmt 0 discriminator 1
 593 00e0 7B68     		ldr	r3, [r7, #4]
 594 00e2 2A2B     		cmp	r3, #42
 595 00e4 0AD9     		bls	.L30
 739:Generated_Source\PSoC4/CyLib.c ****             {
 740:Generated_Source\PSoC4/CyLib.c ****                 /* Set boundary IMO frequency: safe for IMO above 48 MHZ trimming */
 741:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_TRIM2_REG = (uint32) cyImoFreqMhz2Reg[CY_SYS_CLK_IMO_TEMP_FREQ_MHZ -
 596              		.loc 1 741 0 is_stmt 1
 597 00e6 3D4B     		ldr	r3, .L35+60
 598 00e8 1922     		movs	r2, #25
 599 00ea 1A60     		str	r2, [r3]
 742:Generated_Source\PSoC4/CyLib.c ****                                                                      CY_SYS_CLK_IMO_FREQ_TABLE_OFFS
 743:Generated_Source\PSoC4/CyLib.c **** 
 744:Generated_Source\PSoC4/CyLib.c ****                 CyDelayCycles(CY_SYS_CLK_IMO_FREQ_TIMEOUT_CYCLES);
 600              		.loc 1 744 0
 601 00ec 0520     		movs	r0, #5
 602 00ee FFF7FEFF 		bl	CyDelayCycles
 745:Generated_Source\PSoC4/CyLib.c **** 
 746:Generated_Source\PSoC4/CyLib.c ****                 currentImoTrim2Value = CY_SYS_CLK_IMO_TEMP_FREQ_TRIM2;
 603              		.loc 1 746 0
 604 00f2 0D23     		movs	r3, #13
 605 00f4 FB18     		adds	r3, r7, r3
 606 00f6 1922     		movs	r2, #25
 607 00f8 1A70     		strb	r2, [r3]
 608 00fa 07E0     		b	.L31
 609              	.L30:
 747:Generated_Source\PSoC4/CyLib.c ****             }
 748:Generated_Source\PSoC4/CyLib.c ****             else
 749:Generated_Source\PSoC4/CyLib.c ****             {
 750:Generated_Source\PSoC4/CyLib.c ****                 currentImoTrim2Value = (uint8) (CY_SYS_CLK_IMO_TRIM2_REG & CY_SYS_CLK_IMO_FREQ_BITS
 610              		.loc 1 750 0
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 25


 611 00fc 374B     		ldr	r3, .L35+60
 612 00fe 1B68     		ldr	r3, [r3]
 613 0100 DAB2     		uxtb	r2, r3
 614 0102 0D23     		movs	r3, #13
 615 0104 FB18     		adds	r3, r7, r3
 616 0106 3F21     		movs	r1, #63
 617 0108 0A40     		ands	r2, r1
 618 010a 1A70     		strb	r2, [r3]
 619              	.L31:
 751:Generated_Source\PSoC4/CyLib.c ****             }
 752:Generated_Source\PSoC4/CyLib.c **** 
 753:Generated_Source\PSoC4/CyLib.c **** 
 754:Generated_Source\PSoC4/CyLib.c ****             /***************************************************************************
 755:Generated_Source\PSoC4/CyLib.c ****             * A trim change needs to be allowed to settle (within 5us) before the Freq
 756:Generated_Source\PSoC4/CyLib.c ****             * can be changed to a new frequency.
 757:Generated_Source\PSoC4/CyLib.c ****             *
 758:Generated_Source\PSoC4/CyLib.c ****             * Comparing IMO_TRIM2 values for the current and new frequencies, since
 759:Generated_Source\PSoC4/CyLib.c ****             * IMO_TRIM2 value as a function of IMO frequency is a strictly increasing
 760:Generated_Source\PSoC4/CyLib.c ****             * function and is time-invariant.
 761:Generated_Source\PSoC4/CyLib.c ****             ***************************************************************************/
 762:Generated_Source\PSoC4/CyLib.c ****             if (newImoTrim2Value < currentImoTrim2Value)
 620              		.loc 1 762 0
 621 010c 0B23     		movs	r3, #11
 622 010e FA18     		adds	r2, r7, r3
 623 0110 0D23     		movs	r3, #13
 624 0112 FB18     		adds	r3, r7, r3
 625 0114 1278     		ldrb	r2, [r2]
 626 0116 1B78     		ldrb	r3, [r3]
 627 0118 9A42     		cmp	r2, r3
 628 011a 08D2     		bcs	.L32
 763:Generated_Source\PSoC4/CyLib.c ****             {
 764:Generated_Source\PSoC4/CyLib.c ****                 /* Set new IMO frequency */
 765:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_TRIM2_REG = cyImoFreqMhz2Reg[freq - CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET
 629              		.loc 1 765 0
 630 011c 2F4B     		ldr	r3, .L35+60
 631 011e 7A68     		ldr	r2, [r7, #4]
 632 0120 033A     		subs	r2, r2, #3
 633 0122 2D49     		ldr	r1, .L35+56
 634 0124 8A5C     		ldrb	r2, [r1, r2]
 635 0126 1A60     		str	r2, [r3]
 766:Generated_Source\PSoC4/CyLib.c ****                 CyDelayCycles(CY_SYS_CLK_IMO_FREQ_TIMEOUT_CYCLES);
 636              		.loc 1 766 0
 637 0128 0520     		movs	r0, #5
 638 012a FFF7FEFF 		bl	CyDelayCycles
 639              	.L32:
 767:Generated_Source\PSoC4/CyLib.c ****             }
 768:Generated_Source\PSoC4/CyLib.c **** 
 769:Generated_Source\PSoC4/CyLib.c ****             /* Set trims for the new IMO frequency */
 770:Generated_Source\PSoC4/CyLib.c **** 
 771:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 772:Generated_Source\PSoC4/CyLib.c ****                 if ((1u == usbLock) && (48u == freq))
 773:Generated_Source\PSoC4/CyLib.c ****                 {
 774:Generated_Source\PSoC4/CyLib.c ****                     imoTrim1Value = CY_SFLASH_IMO_TRIM_USBMODE_48_REG;
 775:Generated_Source\PSoC4/CyLib.c ****                 }
 776:Generated_Source\PSoC4/CyLib.c ****                 else if ((1u == usbLock) && (24u == freq))
 777:Generated_Source\PSoC4/CyLib.c ****                 {
 778:Generated_Source\PSoC4/CyLib.c ****                     imoTrim1Value = CY_SFLASH_IMO_TRIM_USBMODE_24_REG;
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 26


 779:Generated_Source\PSoC4/CyLib.c ****                 }
 780:Generated_Source\PSoC4/CyLib.c ****                 else
 781:Generated_Source\PSoC4/CyLib.c ****                 {
 782:Generated_Source\PSoC4/CyLib.c ****                     imoTrim1Value = (uint8) CY_SFLASH_IMO_TRIM_REG(freq - CY_SYS_CLK_IMO_FREQ_TABLE
 783:Generated_Source\PSoC4/CyLib.c ****                 }
 784:Generated_Source\PSoC4/CyLib.c ****             #else
 785:Generated_Source\PSoC4/CyLib.c ****                 imoTrim1Value = (uint8) CY_SFLASH_IMO_TRIM_REG(freq - CY_SYS_CLK_IMO_FREQ_TABLE_OFF
 640              		.loc 1 785 0
 641 012e 7B68     		ldr	r3, [r7, #4]
 642 0130 284A     		ldr	r2, .L35+52
 643 0132 9A18     		adds	r2, r3, r2
 644 0134 0A23     		movs	r3, #10
 645 0136 FB18     		adds	r3, r7, r3
 646 0138 1278     		ldrb	r2, [r2]
 647 013a 1A70     		strb	r2, [r3]
 786:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 787:Generated_Source\PSoC4/CyLib.c **** 
 788:Generated_Source\PSoC4/CyLib.c **** 
 789:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM1_REG = (uint32) imoTrim1Value;
 648              		.loc 1 789 0
 649 013c 284B     		ldr	r3, .L35+64
 650 013e 0A22     		movs	r2, #10
 651 0140 BA18     		adds	r2, r7, r2
 652 0142 1278     		ldrb	r2, [r2]
 653 0144 1A60     		str	r2, [r3]
 790:Generated_Source\PSoC4/CyLib.c ****             CY_PWR_BG_TRIM4_REG  = bgTrim4;
 654              		.loc 1 790 0
 655 0146 274B     		ldr	r3, .L35+68
 656 0148 0F22     		movs	r2, #15
 657 014a BA18     		adds	r2, r7, r2
 658 014c 1278     		ldrb	r2, [r2]
 659 014e 1A60     		str	r2, [r3]
 791:Generated_Source\PSoC4/CyLib.c ****             CY_PWR_BG_TRIM5_REG  = bgTrim5;
 660              		.loc 1 791 0
 661 0150 254B     		ldr	r3, .L35+72
 662 0152 0E22     		movs	r2, #14
 663 0154 BA18     		adds	r2, r7, r2
 664 0156 1278     		ldrb	r2, [r2]
 665 0158 1A60     		str	r2, [r3]
 792:Generated_Source\PSoC4/CyLib.c ****             CyDelayUs(CY_SYS_CLK_IMO_TRIM_TIMEOUT_US);
 666              		.loc 1 792 0
 667 015a 0520     		movs	r0, #5
 668 015c FFF7FEFF 		bl	CyDelayUs
 793:Generated_Source\PSoC4/CyLib.c **** 
 794:Generated_Source\PSoC4/CyLib.c ****             if (newImoTrim2Value > currentImoTrim2Value)
 669              		.loc 1 794 0
 670 0160 0B23     		movs	r3, #11
 671 0162 FA18     		adds	r2, r7, r3
 672 0164 0D23     		movs	r3, #13
 673 0166 FB18     		adds	r3, r7, r3
 674 0168 1278     		ldrb	r2, [r2]
 675 016a 1B78     		ldrb	r3, [r3]
 676 016c 9A42     		cmp	r2, r3
 677 016e 0CD9     		bls	.L34
 795:Generated_Source\PSoC4/CyLib.c ****             {
 796:Generated_Source\PSoC4/CyLib.c ****                 /* Set new IMO frequency */
 797:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_TRIM2_REG = cyImoFreqMhz2Reg[freq - CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 27


 678              		.loc 1 797 0
 679 0170 1A4B     		ldr	r3, .L35+60
 680 0172 7A68     		ldr	r2, [r7, #4]
 681 0174 033A     		subs	r2, r2, #3
 682 0176 1849     		ldr	r1, .L35+56
 683 0178 8A5C     		ldrb	r2, [r1, r2]
 684 017a 1A60     		str	r2, [r3]
 798:Generated_Source\PSoC4/CyLib.c ****                 CyDelayCycles(CY_SYS_CLK_IMO_FREQ_TIMEOUT_CYCLES);
 685              		.loc 1 798 0
 686 017c 0520     		movs	r0, #5
 687 017e FFF7FEFF 		bl	CyDelayCycles
 794:Generated_Source\PSoC4/CyLib.c ****             {
 688              		.loc 1 794 0
 689 0182 02E0     		b	.L34
 690              	.L24:
 799:Generated_Source\PSoC4/CyLib.c ****             }
 800:Generated_Source\PSoC4/CyLib.c ****         }
 801:Generated_Source\PSoC4/CyLib.c ****         else
 802:Generated_Source\PSoC4/CyLib.c ****         {
 803:Generated_Source\PSoC4/CyLib.c ****             /* Halt CPU in debug mode if new frequency is invalid */
 804:Generated_Source\PSoC4/CyLib.c ****             CYASSERT(0u != 0u);
 691              		.loc 1 804 0 discriminator 1
 692 0184 0020     		movs	r0, #0
 693 0186 FFF7FEFF 		bl	CyHalt
 694              	.L34:
 805:Generated_Source\PSoC4/CyLib.c ****         }
 806:Generated_Source\PSoC4/CyLib.c **** 
 807:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_FMLT) */
 808:Generated_Source\PSoC4/CyLib.c **** 
 809:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 810:Generated_Source\PSoC4/CyLib.c ****             if (1u == wcoLock)
 811:Generated_Source\PSoC4/CyLib.c ****             {
 812:Generated_Source\PSoC4/CyLib.c ****                 CySysClkImoEnableWcoLock();
 813:Generated_Source\PSoC4/CyLib.c ****             }
 814:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 815:Generated_Source\PSoC4/CyLib.c **** 
 816:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 817:Generated_Source\PSoC4/CyLib.c ****             if (1u == usbLock)
 818:Generated_Source\PSoC4/CyLib.c ****             {
 819:Generated_Source\PSoC4/CyLib.c ****                 CySysClkImoEnableUsbLock();
 820:Generated_Source\PSoC4/CyLib.c ****             }
 821:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 822:Generated_Source\PSoC4/CyLib.c **** 
 823:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
 695              		.loc 1 823 0
 696 018a 0C23     		movs	r3, #12
 697 018c FB18     		adds	r3, r7, r3
 698 018e 1B78     		ldrb	r3, [r3]
 699 0190 1800     		movs	r0, r3
 700 0192 FFF7FEFF 		bl	CyExitCriticalSection
 824:Generated_Source\PSoC4/CyLib.c ****     }
 701              		.loc 1 824 0
 702 0196 C046     		nop
 703 0198 BD46     		mov	sp, r7
 704 019a 05B0     		add	sp, sp, #20
 705              		@ sp needed
 706 019c 90BD     		pop	{r4, r7, pc}
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 28


 707              	.L36:
 708 019e C046     		.align	2
 709              	.L35:
 710 01a0 C0F1FF0F 		.word	268431808
 711 01a4 C1F1FF0F 		.word	268431809
 712 01a8 C2F1FF0F 		.word	268431810
 713 01ac C3F1FF0F 		.word	268431811
 714 01b0 C4F1FF0F 		.word	268431812
 715 01b4 C5F1FF0F 		.word	268431813
 716 01b8 C6F1FF0F 		.word	268431814
 717 01bc C7F1FF0F 		.word	268431815
 718 01c0 C8F1FF0F 		.word	268431816
 719 01c4 C9F1FF0F 		.word	268431817
 720 01c8 CAF1FF0F 		.word	268431818
 721 01cc CBF1FF0F 		.word	268431819
 722 01d0 CCF1FF0F 		.word	268431820
 723 01d4 CDF1FF0F 		.word	268431821
 724 01d8 00000000 		.word	cyImoFreqMhz2Reg
 725 01dc 2CFF0B40 		.word	1074528044
 726 01e0 28FF0B40 		.word	1074528040
 727 01e4 1CFF0B40 		.word	1074528028
 728 01e8 20FF0B40 		.word	1074528032
 729              		.cfi_endproc
 730              	.LFE6:
 731              		.size	CySysClkWriteImoFreq, .-CySysClkWriteImoFreq
 732              		.section	.text.CySysLvdEnable,"ax",%progbits
 733              		.align	2
 734              		.global	CySysLvdEnable
 735              		.code	16
 736              		.thumb_func
 737              		.type	CySysLvdEnable, %function
 738              	CySysLvdEnable:
 739              	.LFB7:
 825:Generated_Source\PSoC4/CyLib.c **** 
 826:Generated_Source\PSoC4/CyLib.c **** #else
 827:Generated_Source\PSoC4/CyLib.c **** 
 828:Generated_Source\PSoC4/CyLib.c ****     void CySysClkWriteImoFreq(uint32 freq)
 829:Generated_Source\PSoC4/CyLib.c ****     {
 830:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
 831:Generated_Source\PSoC4/CyLib.c ****         uint8  imoTrim1Value;
 832:Generated_Source\PSoC4/CyLib.c **** 
 833:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 834:Generated_Source\PSoC4/CyLib.c ****             uint32 wcoLock = 0u;
 835:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */        
 836:Generated_Source\PSoC4/CyLib.c ****         
 837:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 838:Generated_Source\PSoC4/CyLib.c ****             uint32 usbLock = 0u;
 839:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 840:Generated_Source\PSoC4/CyLib.c **** 
 841:Generated_Source\PSoC4/CyLib.c ****         #if (CY_PSOC4_4000)
 842:Generated_Source\PSoC4/CyLib.c ****             if ((freq == 24u) || (freq == 32u) || (freq == 48u))
 843:Generated_Source\PSoC4/CyLib.c ****         #elif (CY_CCG3)
 844:Generated_Source\PSoC4/CyLib.c ****             if ((freq == 24u) || (freq == 36u) || (freq == 48u))
 845:Generated_Source\PSoC4/CyLib.c ****         #else
 846:Generated_Source\PSoC4/CyLib.c ****             if ((freq == 24u) || (freq == 28u) || (freq == 32u) ||
 847:Generated_Source\PSoC4/CyLib.c ****                 (freq == 36u) || (freq == 40u) || (freq == 44u) ||
 848:Generated_Source\PSoC4/CyLib.c ****                 (freq == 48u))
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 29


 849:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_PSOC4_4000) */
 850:Generated_Source\PSoC4/CyLib.c ****         {
 851:Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
 852:Generated_Source\PSoC4/CyLib.c **** 
 853:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 854:Generated_Source\PSoC4/CyLib.c ****                 if(0u != CySysClkImoGetWcoLock())
 855:Generated_Source\PSoC4/CyLib.c ****                 {
 856:Generated_Source\PSoC4/CyLib.c ****                     wcoLock = 1u;
 857:Generated_Source\PSoC4/CyLib.c ****                     CySysClkImoDisableWcoLock();
 858:Generated_Source\PSoC4/CyLib.c ****                 }
 859:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 860:Generated_Source\PSoC4/CyLib.c **** 
 861:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 862:Generated_Source\PSoC4/CyLib.c **** 
 863:Generated_Source\PSoC4/CyLib.c ****                 #if (CYDEV_IMO_TRIMMED_BY_USB == 0u)
 864:Generated_Source\PSoC4/CyLib.c ****                     if(0u != CySysClkImoGetUsbLock())
 865:Generated_Source\PSoC4/CyLib.c ****                     {
 866:Generated_Source\PSoC4/CyLib.c ****                 #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
 867:Generated_Source\PSoC4/CyLib.c **** 
 868:Generated_Source\PSoC4/CyLib.c ****                     if (48u == freq)
 869:Generated_Source\PSoC4/CyLib.c ****                     {
 870:Generated_Source\PSoC4/CyLib.c ****                         usbLock = 1u;
 871:Generated_Source\PSoC4/CyLib.c ****                         CySysClkImoDisableUsbLock();
 872:Generated_Source\PSoC4/CyLib.c ****                     }
 873:Generated_Source\PSoC4/CyLib.c **** 
 874:Generated_Source\PSoC4/CyLib.c ****                 #if (CYDEV_IMO_TRIMMED_BY_USB == 0u)
 875:Generated_Source\PSoC4/CyLib.c ****                     }
 876:Generated_Source\PSoC4/CyLib.c ****                 #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
 877:Generated_Source\PSoC4/CyLib.c **** 
 878:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
 879:Generated_Source\PSoC4/CyLib.c **** 
 880:Generated_Source\PSoC4/CyLib.c **** 
 881:Generated_Source\PSoC4/CyLib.c ****             /* Set IMO to 24 MHz - CLK_IMO_SELECT.FREQ = 0 */
 882:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_SELECT_REG &= ((uint32) ~CY_SYS_CLK_IMO_SELECT_FREQ_MASK);
 883:Generated_Source\PSoC4/CyLib.c **** 
 884:Generated_Source\PSoC4/CyLib.c **** 
 885:Generated_Source\PSoC4/CyLib.c ****             /* Apply coarse trim */
 886:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 887:Generated_Source\PSoC4/CyLib.c ****                 if ((1u == usbLock) && (48u == freq))
 888:Generated_Source\PSoC4/CyLib.c ****                 {
 889:Generated_Source\PSoC4/CyLib.c ****                     imoTrim1Value = CY_SFLASH_IMO_TRIM_USBMODE_48_REG;
 890:Generated_Source\PSoC4/CyLib.c ****                 }
 891:Generated_Source\PSoC4/CyLib.c ****                 else if ((1u == usbLock) && (24u == freq))
 892:Generated_Source\PSoC4/CyLib.c ****                 {
 893:Generated_Source\PSoC4/CyLib.c ****                     imoTrim1Value = CY_SFLASH_IMO_TRIM_USBMODE_24_REG;
 894:Generated_Source\PSoC4/CyLib.c ****                 }
 895:Generated_Source\PSoC4/CyLib.c ****                 else
 896:Generated_Source\PSoC4/CyLib.c ****                 {
 897:Generated_Source\PSoC4/CyLib.c ****                     imoTrim1Value = (uint8) CY_SFLASH_IMO_TRIM_REG(freq - CY_SYS_CLK_IMO_MIN_FREQ_M
 898:Generated_Source\PSoC4/CyLib.c ****                 }
 899:Generated_Source\PSoC4/CyLib.c ****             #else
 900:Generated_Source\PSoC4/CyLib.c ****                 imoTrim1Value = (uint8) CY_SFLASH_IMO_TRIM_REG(freq - CY_SYS_CLK_IMO_MIN_FREQ_MHZ);
 901:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 902:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM1_REG = (uint32) imoTrim1Value;
 903:Generated_Source\PSoC4/CyLib.c **** 
 904:Generated_Source\PSoC4/CyLib.c ****             /* Zero out fine trim */
 905:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM2_REG = CY_SYS_CLK_IMO_TRIM2_REG & ((uint32) ~CY_SYS_CLK_IMO_TRIM2_F
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 30


 906:Generated_Source\PSoC4/CyLib.c **** 
 907:Generated_Source\PSoC4/CyLib.c ****             /* Apply TC trim */
 908:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM3_REG = (CY_SYS_CLK_IMO_TRIM3_REG & ((uint32) ~CY_SYS_CLK_IMO_TRIM3_
 909:Generated_Source\PSoC4/CyLib.c ****                 (CY_SFLASH_IMO_TCTRIM_REG(freq - CY_SYS_CLK_IMO_MIN_FREQ_MHZ) & CY_SYS_CLK_IMO_TRIM
 910:Generated_Source\PSoC4/CyLib.c **** 
 911:Generated_Source\PSoC4/CyLib.c ****             CyDelayCycles(CY_SYS_CLK_IMO_TRIM_DELAY_CYCLES);
 912:Generated_Source\PSoC4/CyLib.c **** 
 913:Generated_Source\PSoC4/CyLib.c ****             if (freq > CY_SYS_CLK_IMO_MIN_FREQ_MHZ)
 914:Generated_Source\PSoC4/CyLib.c ****             {
 915:Generated_Source\PSoC4/CyLib.c ****                 /* Select nearby intermediate frequency */
 916:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_SELECT_REG = (CY_SYS_CLK_IMO_SELECT_REG & ((uint32) ~CY_SYS_CLK_IMO_
 917:Generated_Source\PSoC4/CyLib.c ****                     (((freq - 4u - CY_SYS_CLK_IMO_MIN_FREQ_MHZ) >> 2u) & CY_SYS_CLK_IMO_SELECT_FREQ
 918:Generated_Source\PSoC4/CyLib.c **** 
 919:Generated_Source\PSoC4/CyLib.c ****                 CyDelayCycles(CY_SYS_CLK_IMO_TRIM_DELAY_CYCLES);
 920:Generated_Source\PSoC4/CyLib.c **** 
 921:Generated_Source\PSoC4/CyLib.c ****                 /* Make small step to final frequency */
 922:Generated_Source\PSoC4/CyLib.c ****                 /* Select nearby intermediate frequency */
 923:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_SELECT_REG = (CY_SYS_CLK_IMO_SELECT_REG & ((uint32) ~CY_SYS_CLK_IMO_
 924:Generated_Source\PSoC4/CyLib.c ****                     (((freq - CY_SYS_CLK_IMO_MIN_FREQ_MHZ) >> 2u) & CY_SYS_CLK_IMO_SELECT_FREQ_MASK
 925:Generated_Source\PSoC4/CyLib.c ****             }
 926:Generated_Source\PSoC4/CyLib.c **** 
 927:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 928:Generated_Source\PSoC4/CyLib.c ****                 if (1u == wcoLock)
 929:Generated_Source\PSoC4/CyLib.c ****                 {
 930:Generated_Source\PSoC4/CyLib.c ****                     CySysClkImoEnableWcoLock();
 931:Generated_Source\PSoC4/CyLib.c ****                 }
 932:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 933:Generated_Source\PSoC4/CyLib.c ****         
 934:Generated_Source\PSoC4/CyLib.c ****         
 935:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 936:Generated_Source\PSoC4/CyLib.c ****                 if (1u == usbLock)
 937:Generated_Source\PSoC4/CyLib.c ****                 {
 938:Generated_Source\PSoC4/CyLib.c ****                     CySysClkImoEnableUsbLock();
 939:Generated_Source\PSoC4/CyLib.c ****                 }
 940:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 941:Generated_Source\PSoC4/CyLib.c **** 
 942:Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
 943:Generated_Source\PSoC4/CyLib.c ****         }
 944:Generated_Source\PSoC4/CyLib.c ****         else
 945:Generated_Source\PSoC4/CyLib.c ****         {
 946:Generated_Source\PSoC4/CyLib.c ****             /* Halt CPU in debug mode if new frequency is invalid */
 947:Generated_Source\PSoC4/CyLib.c ****             CYASSERT(0u != 0u);
 948:Generated_Source\PSoC4/CyLib.c ****         }
 949:Generated_Source\PSoC4/CyLib.c ****     }
 950:Generated_Source\PSoC4/CyLib.c **** 
 951:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2) */
 952:Generated_Source\PSoC4/CyLib.c **** 
 953:Generated_Source\PSoC4/CyLib.c **** 
 954:Generated_Source\PSoC4/CyLib.c **** #if(CY_IP_SRSSLT)
 955:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 956:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkWriteHfclkDiv
 957:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 958:Generated_Source\PSoC4/CyLib.c ****     *
 959:Generated_Source\PSoC4/CyLib.c ****     * Selects the pre-scaler divider value for HFCLK from IMO.
 960:Generated_Source\PSoC4/CyLib.c ****     *
 961:Generated_Source\PSoC4/CyLib.c ****     * The HFCLK predivider allows the device to divide the HFCLK selection mux
 962:Generated_Source\PSoC4/CyLib.c ****     * input before use as HFCLK. The predivider is capable of dividing the HFCLK by
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 31


 963:Generated_Source\PSoC4/CyLib.c ****     * powers of 2 between 1 and 8.
 964:Generated_Source\PSoC4/CyLib.c ****     *
 965:Generated_Source\PSoC4/CyLib.c ****     * PSoC 4000: The SYSCLK has the speed of 16 MHz, so HFCLK and SYSCLK dividers
 966:Generated_Source\PSoC4/CyLib.c ****     * should be selected in a way, not to exceed 16 MHz for SYSCLK.
 967:Generated_Source\PSoC4/CyLib.c ****     *
 968:Generated_Source\PSoC4/CyLib.c ****     * If the SYSCLK clock frequency increases during the device operation, call
 969:Generated_Source\PSoC4/CyLib.c ****     * \ref CySysFlashSetWaitCycles() with the appropriate parameter to adjust the
 970:Generated_Source\PSoC4/CyLib.c ****     * number of clock cycles the cache will wait before sampling data comes back
 971:Generated_Source\PSoC4/CyLib.c ****     * from Flash. If the SYSCLK clock frequency decreases, you can call
 972:Generated_Source\PSoC4/CyLib.c ****     * \ref CySysFlashSetWaitCycles() to improve the CPU performance. See
 973:Generated_Source\PSoC4/CyLib.c ****     * \ref CySysFlashSetWaitCycles() description for more information.
 974:Generated_Source\PSoC4/CyLib.c ****     *
 975:Generated_Source\PSoC4/CyLib.c ****     * \param \ref CY_SYS_CLK_HFCLK_DIV_NODIV    Transparent mode (w/o dividing)
 976:Generated_Source\PSoC4/CyLib.c ****     * \param \ref CY_SYS_CLK_HFCLK_DIV_2        Divide selected clock source by 2
 977:Generated_Source\PSoC4/CyLib.c ****     * \param \ref CY_SYS_CLK_HFCLK_DIV_4        Divide selected clock source by 4
 978:Generated_Source\PSoC4/CyLib.c ****     * \param \ref CY_SYS_CLK_HFCLK_DIV_8        Divide selected clock source by 8
 979:Generated_Source\PSoC4/CyLib.c ****     *
 980:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 981:Generated_Source\PSoC4/CyLib.c ****     void CySysClkWriteHfclkDiv(uint32 divider)
 982:Generated_Source\PSoC4/CyLib.c ****     {
 983:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
 984:Generated_Source\PSoC4/CyLib.c **** 
 985:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
 986:Generated_Source\PSoC4/CyLib.c **** 
 987:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CLK_SELECT_REG = ((CY_SYS_CLK_SELECT_REG & ((uint32) (~(CY_SYS_CLK_SELECT_HFCLK_DIV_
 988:Generated_Source\PSoC4/CyLib.c ****                                         CY_SYS_CLK_SELECT_HFCLK_DIV_SHIFT)))) |
 989:Generated_Source\PSoC4/CyLib.c ****                     ((uint32)((divider & CY_SYS_CLK_SELECT_HFCLK_DIV_MASK) << CY_SYS_CLK_SELECT_HFC
 990:Generated_Source\PSoC4/CyLib.c **** 
 991:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
 992:Generated_Source\PSoC4/CyLib.c ****     }
 993:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSLT) */
 994:Generated_Source\PSoC4/CyLib.c **** 
 995:Generated_Source\PSoC4/CyLib.c **** 
 996:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_ECO)
 997:Generated_Source\PSoC4/CyLib.c **** 
 998:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 999:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkEcoStart
1000:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1001:Generated_Source\PSoC4/CyLib.c ****     *
1002:Generated_Source\PSoC4/CyLib.c ****     * Starts the External Crystal Oscillator (ECO). Refer to the device datasheet
1003:Generated_Source\PSoC4/CyLib.c ****     * for the ECO startup time.
1004:Generated_Source\PSoC4/CyLib.c ****     *
1005:Generated_Source\PSoC4/CyLib.c ****     * The timeout interval is measured based on the system frequency defined by
1006:Generated_Source\PSoC4/CyLib.c ****     * PSoC Creator at build time. If System clock frequency is changed in
1007:Generated_Source\PSoC4/CyLib.c ****     * runtime, the \ref CyDelayFreq() with the appropriate parameter should be
1008:Generated_Source\PSoC4/CyLib.c ****     * called.
1009:Generated_Source\PSoC4/CyLib.c ****     *
1010:Generated_Source\PSoC4/CyLib.c ****     * PSoC 4100 BLE / PSoC 4200 BLE: The WCO must be enabled prior to enabling ECO.
1011:Generated_Source\PSoC4/CyLib.c ****     *
1012:Generated_Source\PSoC4/CyLib.c ****     * \param timeoutUs Timeout in microseconds.
1013:Generated_Source\PSoC4/CyLib.c ****     *
1014:Generated_Source\PSoC4/CyLib.c ****     * If zero is specified, the function does not wait for timeout and returns
1015:Generated_Source\PSoC4/CyLib.c ****     * CYRET_SUCCESS. If non-zero is specified, the function waits for the timeout.
1016:Generated_Source\PSoC4/CyLib.c ****     *
1017:Generated_Source\PSoC4/CyLib.c ****     * \return \ref CYRET_SUCCESS Completed successfully. The ECO is oscillating and
1018:Generated_Source\PSoC4/CyLib.c ****     * amplitude reached 60% and it does not mean 24 MHz crystal is within 50 ppm.
1019:Generated_Source\PSoC4/CyLib.c ****     *
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 32


1020:Generated_Source\PSoC4/CyLib.c ****     * \return \ref CYRET_TIMEOUT Timeout occurred. If the crystal is not oscillating
1021:Generated_Source\PSoC4/CyLib.c ****     * or amplitude didn't reach 60% after specified amount of time, CYRET_TIMEOUT
1022:Generated_Source\PSoC4/CyLib.c ****     * is returned.
1023:Generated_Source\PSoC4/CyLib.c ****     *
1024:Generated_Source\PSoC4/CyLib.c ****     * \return \ref CYRET_BAD_PARAM One or more invalid parameters.
1025:Generated_Source\PSoC4/CyLib.c ****     *
1026:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1027:Generated_Source\PSoC4/CyLib.c ****     cystatus CySysClkEcoStart(uint32 timeoutUs)
1028:Generated_Source\PSoC4/CyLib.c ****     {
1029:Generated_Source\PSoC4/CyLib.c ****         cystatus returnStatus = CYRET_SUCCESS;
1030:Generated_Source\PSoC4/CyLib.c **** 
1031:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_ECO_BLESS)
1032:Generated_Source\PSoC4/CyLib.c ****             /* Enable the RF oscillator band gap */
1033:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_XTAL_BLESS_RF_CONFIG_REG |= CY_SYS_XTAL_BLESS_RF_CONFIG_RF_ENABLE;
1034:Generated_Source\PSoC4/CyLib.c **** 
1035:Generated_Source\PSoC4/CyLib.c ****             /* Update trimming register */
1036:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_XTAL_BLERD_BB_XO_REG = CY_SYS_XTAL_BLERD_BB_XO_TRIM;
1037:Generated_Source\PSoC4/CyLib.c **** 
1038:Generated_Source\PSoC4/CyLib.c ****             /* Enable the Crystal */
1039:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_XTAL_BLERD_DBUS_REG |= CY_SYS_XTAL_BLERD_DBUS_XTAL_ENABLE;
1040:Generated_Source\PSoC4/CyLib.c ****         
1041:Generated_Source\PSoC4/CyLib.c ****         #elif (CY_IP_ECO_BLESSV3)
1042:Generated_Source\PSoC4/CyLib.c ****             uint32 regConfig;
1043:Generated_Source\PSoC4/CyLib.c ****             uint32 intrRegMaskStore = 0u;
1044:Generated_Source\PSoC4/CyLib.c ****             
1045:Generated_Source\PSoC4/CyLib.c ****             if (0u != (CY_SYS_BLESS_MT_CFG_REG & (CY_SYS_BLESS_MT_CFG_ENABLE_BLERD <<  CYFLD_BLE_BL
1046:Generated_Source\PSoC4/CyLib.c ****             {
1047:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_BLESS_MT_CFG_REG |= (CY_SYS_BLESS_MT_CFG_DPSLP_ECO_ON  <<  CYFLD_BLE_BLESS_D
1048:Generated_Source\PSoC4/CyLib.c ****             }
1049:Generated_Source\PSoC4/CyLib.c ****             else
1050:Generated_Source\PSoC4/CyLib.c ****             {
1051:Generated_Source\PSoC4/CyLib.c ****                 /* Init BLE core */
1052:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_BLESS_MT_DELAY_CFG_REG = CY_SYS_BLESS_MT_DELAY_CFG_INIT;
1053:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_BLESS_MT_DELAY_CFG2_REG = CY_SYS_BLESS_MT_DELAY_CFG2_INIT;
1054:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_BLESS_MT_DELAY_CFG3_REG = CY_SYS_BLESS_MT_DELAY_CFG3_INIT;
1055:Generated_Source\PSoC4/CyLib.c ****             
1056:Generated_Source\PSoC4/CyLib.c ****                 /* RCB init */
1057:Generated_Source\PSoC4/CyLib.c ****                 regConfig = CY_SYS_RCB_CTRL_REG;
1058:Generated_Source\PSoC4/CyLib.c ****                 regConfig &= CY_SYS_RCB_CTRL_CLEAR;
1059:Generated_Source\PSoC4/CyLib.c ****                 regConfig |= CY_SYS_RCB_CTRL_INIT;
1060:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_RCB_CTRL_REG = regConfig;
1061:Generated_Source\PSoC4/CyLib.c ****                 
1062:Generated_Source\PSoC4/CyLib.c ****                 intrRegMaskStore = CY_SYS_BLESS_INTR_MASK_REG;
1063:Generated_Source\PSoC4/CyLib.c ****                 if(0u != (CY_SYS_BLESS_BLERD_ACTIVE_INTR_MASK & intrRegMaskStore))
1064:Generated_Source\PSoC4/CyLib.c ****                 {
1065:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_BLESS_INTR_MASK_REG &= ~CY_SYS_BLESS_BLERD_ACTIVE_INTR_MASK;
1066:Generated_Source\PSoC4/CyLib.c ****                 }
1067:Generated_Source\PSoC4/CyLib.c ****                 
1068:Generated_Source\PSoC4/CyLib.c ****                 /* Enable BLE core */
1069:Generated_Source\PSoC4/CyLib.c ****                 regConfig = CY_SYS_BLESS_MT_CFG_REG;
1070:Generated_Source\PSoC4/CyLib.c ****                 regConfig &= CY_SYS_BLESS_MT_CFG_CLEAR;
1071:Generated_Source\PSoC4/CyLib.c ****                 regConfig |= CY_SYS_BLESS_MT_CFG_INIT;
1072:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_BLESS_MT_CFG_REG = regConfig;
1073:Generated_Source\PSoC4/CyLib.c **** 
1074:Generated_Source\PSoC4/CyLib.c ****                 while(0u == ((CY_SYS_BLESS_BLERD_ACTIVE_INTR_STAT & CY_SYS_BLESS_INTR_STAT_REG)))
1075:Generated_Source\PSoC4/CyLib.c ****                 {
1076:Generated_Source\PSoC4/CyLib.c ****                     /* Wait until BLERD55 moves to active state */
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 33


1077:Generated_Source\PSoC4/CyLib.c ****                 }
1078:Generated_Source\PSoC4/CyLib.c **** 
1079:Generated_Source\PSoC4/CyLib.c ****                 if(0u != (CY_SYS_BLESS_BLERD_ACTIVE_INTR_MASK & intrRegMaskStore))
1080:Generated_Source\PSoC4/CyLib.c ****                 {
1081:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_BLESS_INTR_MASK_REG |= CY_SYS_BLESS_BLERD_ACTIVE_INTR_MASK;
1082:Generated_Source\PSoC4/CyLib.c ****                 }
1083:Generated_Source\PSoC4/CyLib.c ****                 
1084:Generated_Source\PSoC4/CyLib.c ****                 /* Send write commands to RBUS */
1085:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_RCB_TX_FIFO_WR_REG = CY_SYS_RCB_RBUS_FREQ_NRST_SET;
1086:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_RCB_TX_FIFO_WR_REG = CY_SYS_RCB_RBUS_DIG_CLK_SET;
1087:Generated_Source\PSoC4/CyLib.c ****                 
1088:Generated_Source\PSoC4/CyLib.c ****                 #if (CY_SYS_BLE_CLK_ECO_FREQ_32MHZ == CYDEV_ECO_CLK_MHZ)
1089:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_RCB_TX_FIFO_WR_REG = CY_SYS_RCB_RBUS_FREQ_XTAL_DIV_SET;
1090:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_RCB_TX_FIFO_WR_REG = (CY_SYS_RCB_RBUS_RF_DCXO_CFG_SET | CY_SYS_RCB_RBUS_
1091:Generated_Source\PSoC4/CyLib.c ****                 #else
1092:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_RCB_TX_FIFO_WR_REG = CY_SYS_RCB_RBUS_FREQ_XTAL_NODIV_SET;
1093:Generated_Source\PSoC4/CyLib.c ****                 #endif
1094:Generated_Source\PSoC4/CyLib.c ****                 
1095:Generated_Source\PSoC4/CyLib.c ****                 intrRegMaskStore = CY_SYS_BLESS_INTR_MASK_REG;
1096:Generated_Source\PSoC4/CyLib.c ****                 if(0u != (CY_SYS_RCB_INTR_RCB_DONE & intrRegMaskStore))
1097:Generated_Source\PSoC4/CyLib.c ****                 {
1098:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_BLESS_INTR_MASK_REG &= ~(CY_SYS_RCB_INTR_RCB_DONE | CY_SYS_RCB_INTR_RCB_
1099:Generated_Source\PSoC4/CyLib.c ****                 }
1100:Generated_Source\PSoC4/CyLib.c ****                 
1101:Generated_Source\PSoC4/CyLib.c ****                 /* Send read commands to RBUS */
1102:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_RCB_TX_FIFO_WR_REG = (CY_SYS_RCB_RBUS_RD_CMD | 
1103:Generated_Source\PSoC4/CyLib.c ****                                             (CY_SYS_RCB_RBUS_RF_DCXO_CFG_SET & ~CY_SYS_RCB_RBUS_VAL
1104:Generated_Source\PSoC4/CyLib.c ****                                             
1105:Generated_Source\PSoC4/CyLib.c ****                 while (0u == (CY_SYS_RCB_INTR_RCB_RX_FIFO_NOT_EMPTY & CY_SYS_RCB_INTR_REG))
1106:Generated_Source\PSoC4/CyLib.c ****                 {
1107:Generated_Source\PSoC4/CyLib.c ****                     /* Wait until RX_FIFO_NOT_EMPTY state */
1108:Generated_Source\PSoC4/CyLib.c ****                 }
1109:Generated_Source\PSoC4/CyLib.c **** 
1110:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_RCB_INTR_REG |= CY_SYS_RCB_INTR_RCB_DONE;
1111:Generated_Source\PSoC4/CyLib.c ****                 
1112:Generated_Source\PSoC4/CyLib.c ****                 regConfig = CY_SYS_RCB_RX_FIFO_RD_REG & CY_SYS_RCB_RBUS_TRIM_MASK;
1113:Generated_Source\PSoC4/CyLib.c ****                 
1114:Generated_Source\PSoC4/CyLib.c ****                 /* Send write commands to RBUS */
1115:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_RCB_TX_FIFO_WR_REG = (CY_SYS_RCB_RBUS_RF_DCXO_CFG_SET | regConfig | CY_SYS_R
1116:Generated_Source\PSoC4/CyLib.c ****                 
1117:Generated_Source\PSoC4/CyLib.c ****                 while (0u == (CY_SYS_RCB_INTR_RCB_DONE & CY_SYS_RCB_INTR_REG))
1118:Generated_Source\PSoC4/CyLib.c ****                 {
1119:Generated_Source\PSoC4/CyLib.c ****                     /* Wait until RCB_DONE state */
1120:Generated_Source\PSoC4/CyLib.c ****                 }
1121:Generated_Source\PSoC4/CyLib.c ****                 
1122:Generated_Source\PSoC4/CyLib.c ****                 /* Clear Interrupt */
1123:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_RCB_INTR_REG = CY_SYS_RCB_INTR_CLEAR;
1124:Generated_Source\PSoC4/CyLib.c ****                 
1125:Generated_Source\PSoC4/CyLib.c ****                 if(0u != ((CY_SYS_RCB_INTR_RCB_DONE | CY_SYS_RCB_INTR_RCB_RX_FIFO_NOT_EMPTY) & intr
1126:Generated_Source\PSoC4/CyLib.c ****                 {
1127:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_BLESS_INTR_MASK_REG |= intrRegMaskStore;
1128:Generated_Source\PSoC4/CyLib.c ****                 }
1129:Generated_Source\PSoC4/CyLib.c ****                 
1130:Generated_Source\PSoC4/CyLib.c ****             }
1131:Generated_Source\PSoC4/CyLib.c ****         #else /* CY_IP_ECO_SRSSV2 */
1132:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_ECO_CONFIG_REG |= CY_SYS_CLK_ECO_CONFIG_ENABLE;
1133:Generated_Source\PSoC4/CyLib.c ****             CyDelayUs(CY_SYS_CLK_ECO_CONFIG_CLK_EN_TIMEOUT_US);
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 34


1134:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_ECO_CONFIG_REG |= CY_SYS_CLK_ECO_CONFIG_CLK_EN;
1135:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_ECO_BLESS) */
1136:Generated_Source\PSoC4/CyLib.c **** 
1137:Generated_Source\PSoC4/CyLib.c ****         if(timeoutUs > 0u)
1138:Generated_Source\PSoC4/CyLib.c ****         {
1139:Generated_Source\PSoC4/CyLib.c ****             returnStatus = CYRET_TIMEOUT;
1140:Generated_Source\PSoC4/CyLib.c **** 
1141:Generated_Source\PSoC4/CyLib.c ****             for( ; timeoutUs > 0u; timeoutUs--)
1142:Generated_Source\PSoC4/CyLib.c ****             {
1143:Generated_Source\PSoC4/CyLib.c ****                 CyDelayUs(1u);
1144:Generated_Source\PSoC4/CyLib.c **** 
1145:Generated_Source\PSoC4/CyLib.c ****                 if(0u != CySysClkEcoReadStatus())
1146:Generated_Source\PSoC4/CyLib.c ****                 {
1147:Generated_Source\PSoC4/CyLib.c ****                     returnStatus = CYRET_SUCCESS;
1148:Generated_Source\PSoC4/CyLib.c ****                     break;
1149:Generated_Source\PSoC4/CyLib.c ****                 }
1150:Generated_Source\PSoC4/CyLib.c ****             }
1151:Generated_Source\PSoC4/CyLib.c **** 
1152:Generated_Source\PSoC4/CyLib.c ****         }
1153:Generated_Source\PSoC4/CyLib.c **** 
1154:Generated_Source\PSoC4/CyLib.c ****         return(returnStatus);
1155:Generated_Source\PSoC4/CyLib.c ****     }
1156:Generated_Source\PSoC4/CyLib.c **** 
1157:Generated_Source\PSoC4/CyLib.c **** 
1158:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1159:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkEcoStop
1160:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1161:Generated_Source\PSoC4/CyLib.c ****     *
1162:Generated_Source\PSoC4/CyLib.c ****     * Stops the megahertz crystal.
1163:Generated_Source\PSoC4/CyLib.c ****     *
1164:Generated_Source\PSoC4/CyLib.c ****     * If ECO is disabled when it is sourcing HFCLK, the CPU will halt. In addition,
1165:Generated_Source\PSoC4/CyLib.c ****     * for PSoC 4100 BLE / PSoC 4200 BLE devices, the BLE sub-system will stop
1166:Generated_Source\PSoC4/CyLib.c ****     * functioning.
1167:Generated_Source\PSoC4/CyLib.c ****     *
1168:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1169:Generated_Source\PSoC4/CyLib.c ****     void CySysClkEcoStop(void)
1170:Generated_Source\PSoC4/CyLib.c ****     {
1171:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_WCO_BLESS)
1172:Generated_Source\PSoC4/CyLib.c ****             /* Disable the RF oscillator band gap */
1173:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_XTAL_BLESS_RF_CONFIG_REG &= (uint32) ~CY_SYS_XTAL_BLESS_RF_CONFIG_RF_ENABLE;
1174:Generated_Source\PSoC4/CyLib.c **** 
1175:Generated_Source\PSoC4/CyLib.c ****             /* Disable the Crystal */
1176:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_XTAL_BLERD_DBUS_REG &= (uint32) ~CY_SYS_XTAL_BLERD_DBUS_XTAL_ENABLE;
1177:Generated_Source\PSoC4/CyLib.c ****         #elif (CY_IP_ECO_BLESSV3)
1178:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_BLESS_MT_CFG_REG &= ~(CY_SYS_BLESS_MT_CFG_DPSLP_ECO_ON  <<  CYFLD_BLE_BLESS_DPSL
1179:Generated_Source\PSoC4/CyLib.c ****         #else
1180:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_ECO_CONFIG_REG &= (uint32) ~(CY_SYS_CLK_ECO_CONFIG_ENABLE | CY_SYS_CLK_ECO_C
1181:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_WCO_BLESS) */
1182:Generated_Source\PSoC4/CyLib.c ****     }
1183:Generated_Source\PSoC4/CyLib.c **** 
1184:Generated_Source\PSoC4/CyLib.c **** 
1185:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1186:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkEcoReadStatus
1187:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1188:Generated_Source\PSoC4/CyLib.c ****     *
1189:Generated_Source\PSoC4/CyLib.c ****     * Reads the status bit for the megahertz crystal.
1190:Generated_Source\PSoC4/CyLib.c ****     *
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 35


1191:Generated_Source\PSoC4/CyLib.c ****     * For PSoC 4100 BLE / PSoC 4200 BLE devices, the status bit is the
1192:Generated_Source\PSoC4/CyLib.c ****     * XO_AMP_DETECT bit in FSM register.
1193:Generated_Source\PSoC4/CyLib.c ****     *
1194:Generated_Source\PSoC4/CyLib.c ****     * For PSoC 4200L devices, the error status bit is the WATCHDOG_ERROR bit in
1195:Generated_Source\PSoC4/CyLib.c ****     * ECO_STATUS register.
1196:Generated_Source\PSoC4/CyLib.c ****     *
1197:Generated_Source\PSoC4/CyLib.c ****     * \return PSoC 4100 BLE/PSoC 4200 BLE: Non-zero indicates that ECO output
1198:Generated_Source\PSoC4/CyLib.c ****     * reached 50 ppm and is oscillating in valid range.
1199:Generated_Source\PSoC4/CyLib.c ****     *
1200:Generated_Source\PSoC4/CyLib.c ****     * \return PSoC 4200L: Non-zero indicates that ECO is running.
1201:Generated_Source\PSoC4/CyLib.c ****     *
1202:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1203:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkEcoReadStatus(void)
1204:Generated_Source\PSoC4/CyLib.c ****     {
1205:Generated_Source\PSoC4/CyLib.c ****         uint32 returnValue;
1206:Generated_Source\PSoC4/CyLib.c **** 
1207:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_WCO_BLESS)
1208:Generated_Source\PSoC4/CyLib.c ****             returnValue = CY_SYS_XTAL_BLERD_FSM_REG & CY_SYS_XTAL_BLERD_FSM_XO_AMP_DETECT;
1209:Generated_Source\PSoC4/CyLib.c ****         #elif (CY_IP_ECO_BLESSV3)
1210:Generated_Source\PSoC4/CyLib.c ****             returnValue = (CY_SYS_BLESS_MT_STATUS_REG & CY_SYS_BLESS_MT_STATUS_CURR_STATE_MASK) >> 
1211:Generated_Source\PSoC4/CyLib.c **** 
1212:Generated_Source\PSoC4/CyLib.c ****             returnValue =  ((CY_SYS_BLESS_MT_STATUS_BLERD_IDLE == returnValue) || 
1213:Generated_Source\PSoC4/CyLib.c ****                             (CY_SYS_BLESS_MT_STATUS_SWITCH_EN  == returnValue) ||
1214:Generated_Source\PSoC4/CyLib.c ****                             (CY_SYS_BLESS_MT_STATUS_ACTIVE  ==  returnValue) ||
1215:Generated_Source\PSoC4/CyLib.c ****                             (CY_SYS_BLESS_MT_STATUS_ISOLATE == returnValue));
1216:Generated_Source\PSoC4/CyLib.c ****         #else
1217:Generated_Source\PSoC4/CyLib.c ****             returnValue = (0u != (CY_SYS_CLK_ECO_STATUS_REG & CY_SYS_CLK_ECO_STATUS_WATCHDOG_ERROR)
1218:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_WCO_BLESS) */
1219:Generated_Source\PSoC4/CyLib.c **** 
1220:Generated_Source\PSoC4/CyLib.c ****         return (returnValue);
1221:Generated_Source\PSoC4/CyLib.c ****     }
1222:Generated_Source\PSoC4/CyLib.c **** 
1223:Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_ECO_BLESS || CY_IP_ECO_BLESSV3)
1224:Generated_Source\PSoC4/CyLib.c ****         /*******************************************************************************
1225:Generated_Source\PSoC4/CyLib.c ****         * Function Name: CySysClkWriteEcoDiv
1226:Generated_Source\PSoC4/CyLib.c ****         ****************************************************************************//**
1227:Generated_Source\PSoC4/CyLib.c ****         *
1228:Generated_Source\PSoC4/CyLib.c ****         * Selects value for the ECO divider.
1229:Generated_Source\PSoC4/CyLib.c ****         *
1230:Generated_Source\PSoC4/CyLib.c ****         * The ECO must not be the HFCLK clock source when this function is called.
1231:Generated_Source\PSoC4/CyLib.c ****         * The HFCLK source can be changed to the other clock source by call to the
1232:Generated_Source\PSoC4/CyLib.c ****         * CySysClkWriteHfclkDirect() function. If the ECO sources the HFCLK this
1233:Generated_Source\PSoC4/CyLib.c ****         * function will not have any effect if compiler in release mode, and halt the
1234:Generated_Source\PSoC4/CyLib.c ****         * CPU when compiler in debug mode.
1235:Generated_Source\PSoC4/CyLib.c ****         *
1236:Generated_Source\PSoC4/CyLib.c ****         * If the SYSCLK clock frequency increases during the device operation, call
1237:Generated_Source\PSoC4/CyLib.c ****         * CySysFlashSetWaitCycles() with the appropriate parameter to adjust the number
1238:Generated_Source\PSoC4/CyLib.c ****         * of clock cycles the cache will wait before sampling data comes back from
1239:Generated_Source\PSoC4/CyLib.c ****         * Flash. If the SYSCLK clock frequency decreases, you can call
1240:Generated_Source\PSoC4/CyLib.c ****         * CySysFlashSetWaitCycles() to improve the CPU performance. See
1241:Generated_Source\PSoC4/CyLib.c ****         * CySysFlashSetWaitCycles() description for more information.
1242:Generated_Source\PSoC4/CyLib.c ****         *
1243:Generated_Source\PSoC4/CyLib.c ****         * \param divider Power of 2 divider selection.
1244:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_DIV1
1245:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_DIV2
1246:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_DIV4
1247:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_DIV8
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 36


1248:Generated_Source\PSoC4/CyLib.c ****         *
1249:Generated_Source\PSoC4/CyLib.c ****         *******************************************************************************/
1250:Generated_Source\PSoC4/CyLib.c ****         void CySysClkWriteEcoDiv(uint32 divider)
1251:Generated_Source\PSoC4/CyLib.c ****         {
1252:Generated_Source\PSoC4/CyLib.c ****             uint8  interruptState;
1253:Generated_Source\PSoC4/CyLib.c **** 
1254:Generated_Source\PSoC4/CyLib.c ****             if (CY_SYS_CLK_HFCLK_ECO != (CY_SYS_CLK_SELECT_REG & CY_SYS_CLK_SELECT_DIRECT_SEL_MASK)
1255:Generated_Source\PSoC4/CyLib.c ****             {
1256:Generated_Source\PSoC4/CyLib.c ****                 interruptState = CyEnterCriticalSection();
1257:Generated_Source\PSoC4/CyLib.c **** 
1258:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_XTAL_CLK_DIV_CONFIG_REG =  (divider & CY_SYS_CLK_XTAL_CLK_DIV_MASK) |
1259:Generated_Source\PSoC4/CyLib.c ****                                                       (CY_SYS_CLK_XTAL_CLK_DIV_CONFIG_REG & ((uint3
1260:Generated_Source\PSoC4/CyLib.c **** 
1261:Generated_Source\PSoC4/CyLib.c ****                 CyExitCriticalSection(interruptState);
1262:Generated_Source\PSoC4/CyLib.c ****             }
1263:Generated_Source\PSoC4/CyLib.c ****             else
1264:Generated_Source\PSoC4/CyLib.c ****             {
1265:Generated_Source\PSoC4/CyLib.c ****                 /* Halt CPU in debug mode if ECO sources HFCLK */
1266:Generated_Source\PSoC4/CyLib.c ****                 CYASSERT(0u != 0u);
1267:Generated_Source\PSoC4/CyLib.c ****             }
1268:Generated_Source\PSoC4/CyLib.c ****         }
1269:Generated_Source\PSoC4/CyLib.c **** 
1270:Generated_Source\PSoC4/CyLib.c ****     #else
1271:Generated_Source\PSoC4/CyLib.c **** 
1272:Generated_Source\PSoC4/CyLib.c ****         /*******************************************************************************
1273:Generated_Source\PSoC4/CyLib.c ****         * Function Name: CySysClkConfigureEcoTrim
1274:Generated_Source\PSoC4/CyLib.c ****         ****************************************************************************//**
1275:Generated_Source\PSoC4/CyLib.c ****         *
1276:Generated_Source\PSoC4/CyLib.c ****         * Selects trim setting values for ECO. This API is available only for PSoC
1277:Generated_Source\PSoC4/CyLib.c ****         * 4200L devices only.
1278:Generated_Source\PSoC4/CyLib.c ****         *
1279:Generated_Source\PSoC4/CyLib.c ****         * The following parameters can be trimmed for ECO. The affected registers are
1280:Generated_Source\PSoC4/CyLib.c ****         * ECO_TRIM0 and ECO_TRIM1.
1281:Generated_Source\PSoC4/CyLib.c ****         *
1282:Generated_Source\PSoC4/CyLib.c ****         * Watchdog trim - This bit field sets the error threshold below the steady
1283:Generated_Source\PSoC4/CyLib.c ****         * state amplitude level.
1284:Generated_Source\PSoC4/CyLib.c ****         *
1285:Generated_Source\PSoC4/CyLib.c ****         * Amplitude trim - This bit field is to set the crystal drive level when
1286:Generated_Source\PSoC4/CyLib.c ****         * ECO_CONFIG.AGC_EN = 1. WARNING: use care when setting this field because
1287:Generated_Source\PSoC4/CyLib.c ****         * driving a crystal beyond its rated limit can permanently damage the crystal.
1288:Generated_Source\PSoC4/CyLib.c ****         *
1289:Generated_Source\PSoC4/CyLib.c ****         * Filter frequency trim - This bit field sets LPF frequency trim and affects
1290:Generated_Source\PSoC4/CyLib.c ****         * the 3rd harmonic content.
1291:Generated_Source\PSoC4/CyLib.c ****         *
1292:Generated_Source\PSoC4/CyLib.c ****         * Feedback resistor trim - This bit field sets the feedback resistor trim and
1293:Generated_Source\PSoC4/CyLib.c ****         * impacts the oscillation amplitude.
1294:Generated_Source\PSoC4/CyLib.c ****         *
1295:Generated_Source\PSoC4/CyLib.c ****         * Amplifier gain trim - This bit field sets the amplifier gain trim and affects
1296:Generated_Source\PSoC4/CyLib.c ****         * the startup time of the crystal.
1297:Generated_Source\PSoC4/CyLib.c ****         *
1298:Generated_Source\PSoC4/CyLib.c ****         * Use care when setting the amplitude trim field because driving a crystal
1299:Generated_Source\PSoC4/CyLib.c ****         * beyond its rated limit can permanently damage the crystal.
1300:Generated_Source\PSoC4/CyLib.c ****         *
1301:Generated_Source\PSoC4/CyLib.c ****         * \param wDTrim: Watchdog trim
1302:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_WDTRIM0      Error threshold is 0.05 V
1303:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_WDTRIM1      Error threshold is 0.10 V
1304:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_WDTRIM2      Error threshold is 0.15 V
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 37


1305:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_WDTRIM3      Error threshold is 0.20 V
1306:Generated_Source\PSoC4/CyLib.c ****         *
1307:Generated_Source\PSoC4/CyLib.c ****         * \param aTrim: Amplitude trim
1308:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM0       Amplitude is 0.3 Vpp
1309:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM1       Amplitude is 0.4 Vpp
1310:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM2       Amplitude is 0.5 Vpp
1311:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM3       Amplitude is 0.6 Vpp
1312:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM4       Amplitude is 0.7 Vpp
1313:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM5       Amplitude is 0.8 Vpp
1314:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM6       Amplitude is 0.9 Vpp
1315:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM7       Amplitude is 1.0 Vpp
1316:Generated_Source\PSoC4/CyLib.c ****         *
1317:Generated_Source\PSoC4/CyLib.c ****         * \param fTrim: Filter frequency trim
1318:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_FTRIM0       Crystal frequency > 30 MHz
1319:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_FTRIM1       24 MHz < Crystal frequency <= 30 MHz
1320:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_FTRIM2       17 MHz < Crystal frequency <= 24 MHz
1321:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_FTRIM3       Crystal frequency <= 17 MHz
1322:Generated_Source\PSoC4/CyLib.c ****         *
1323:Generated_Source\PSoC4/CyLib.c ****         * \param rTrim: Feedback resistor trim
1324:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_RTRIM0       Crystal frequency > 30 MHz
1325:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_RTRIM1       24 MHz < Crystal frequency <= 30 MHz
1326:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_RTRIM2       17 MHz < Crystal frequency <= 24 MHz
1327:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_RTRIM3       Crystal frequency <= 17 MHz
1328:Generated_Source\PSoC4/CyLib.c ****         *
1329:Generated_Source\PSoC4/CyLib.c ****         * \param gTrim: Amplifier gain trim. Calculate the minimum required gm
1330:Generated_Source\PSoC4/CyLib.c ****         * (trans-conductance value). Divide the calculated gm value by 4.5 to
1331:Generated_Source\PSoC4/CyLib.c ****         * obtain an integer value 'result'. For more information please refer
1332:Generated_Source\PSoC4/CyLib.c ****         * to the device TRM.
1333:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_GTRIM0       If result = 1
1334:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_GTRIM1       If result = 0
1335:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_GTRIM2       If result = 2
1336:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_GTRIM2       If result = 3
1337:Generated_Source\PSoC4/CyLib.c ****         *
1338:Generated_Source\PSoC4/CyLib.c ****         *******************************************************************************/
1339:Generated_Source\PSoC4/CyLib.c ****         void CySysClkConfigureEcoTrim(uint32 wDTrim, uint32 aTrim, uint32 fTrim, uint32 rTrim, uint
1340:Generated_Source\PSoC4/CyLib.c ****         {
1341:Generated_Source\PSoC4/CyLib.c ****             uint8  interruptState;
1342:Generated_Source\PSoC4/CyLib.c ****             uint32 regTmp;
1343:Generated_Source\PSoC4/CyLib.c **** 
1344:Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
1345:Generated_Source\PSoC4/CyLib.c **** 
1346:Generated_Source\PSoC4/CyLib.c ****             regTmp  = CY_SYS_CLK_ECO_TRIM0_REG & ~(CY_SYS_CLK_ECO_TRIM0_WDTRIM_MASK | CY_SYS_CLK_EC
1347:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((uint32) (wDTrim << CY_SYS_CLK_ECO_TRIM0_WDTRIM_SHIFT) & CY_SYS_CLK_ECO_TRIM
1348:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((uint32) (aTrim << CY_SYS_CLK_ECO_TRIM0_ATRIM_SHIFT) & CY_SYS_CLK_ECO_TRIM0_
1349:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_ECO_TRIM0_REG = regTmp;
1350:Generated_Source\PSoC4/CyLib.c **** 
1351:Generated_Source\PSoC4/CyLib.c ****             regTmp  = CY_SYS_CLK_ECO_TRIM1_REG & ~(CY_SYS_CLK_ECO_TRIM1_FTRIM_MASK |
1352:Generated_Source\PSoC4/CyLib.c ****                                                    CY_SYS_CLK_ECO_TRIM1_RTRIM_MASK |
1353:Generated_Source\PSoC4/CyLib.c ****                                                    CY_SYS_CLK_ECO_TRIM1_GTRIM_MASK);
1354:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((uint32) (fTrim << CY_SYS_CLK_ECO_TRIM1_FTRIM_SHIFT) & CY_SYS_CLK_ECO_TRIM1_
1355:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((uint32) (rTrim << CY_SYS_CLK_ECO_TRIM1_RTRIM_SHIFT) & CY_SYS_CLK_ECO_TRIM1_
1356:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((uint32) (gTrim << CY_SYS_CLK_ECO_TRIM1_GTRIM_SHIFT) & CY_SYS_CLK_ECO_TRIM1_
1357:Generated_Source\PSoC4/CyLib.c **** 
1358:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_ECO_TRIM1_REG = regTmp;
1359:Generated_Source\PSoC4/CyLib.c **** 
1360:Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
1361:Generated_Source\PSoC4/CyLib.c ****         }
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 38


1362:Generated_Source\PSoC4/CyLib.c **** 
1363:Generated_Source\PSoC4/CyLib.c **** 
1364:Generated_Source\PSoC4/CyLib.c ****         /*******************************************************************************
1365:Generated_Source\PSoC4/CyLib.c ****         * Function Name: CySysClkConfigureEcoDrive
1366:Generated_Source\PSoC4/CyLib.c ****         ****************************************************************************//**
1367:Generated_Source\PSoC4/CyLib.c ****         *
1368:Generated_Source\PSoC4/CyLib.c ****         * Selects trim setting values for ECO based on crystal parameters. Use care
1369:Generated_Source\PSoC4/CyLib.c ****         * when setting the driveLevel parameter because driving a crystal beyond its
1370:Generated_Source\PSoC4/CyLib.c ****         * rated limit can permanently damage the crystal.
1371:Generated_Source\PSoC4/CyLib.c ****         *
1372:Generated_Source\PSoC4/CyLib.c ****         * This API is available only for PSoC 4200L devices only.
1373:Generated_Source\PSoC4/CyLib.c ****         *
1374:Generated_Source\PSoC4/CyLib.c ****         * \param freq Frequency of the crystal in kHz.
1375:Generated_Source\PSoC4/CyLib.c ****         * \param cLoad Crystal load capacitance in pF.
1376:Generated_Source\PSoC4/CyLib.c ****         * \param esr Equivalent series resistance of the crystal in ohm.
1377:Generated_Source\PSoC4/CyLib.c ****         *  maxAmplitude: maximum amplitude level in mV. Calculate as
1378:Generated_Source\PSoC4/CyLib.c ****         *  ((sqrt(driveLevel in uW / 2 / esr))/(3.14 * freq * cLoad)) * 10^9.
1379:Generated_Source\PSoC4/CyLib.c ****         *
1380:Generated_Source\PSoC4/CyLib.c ****         *  The Automatic Gain Control (AGC) is disabled when the specified maximum
1381:Generated_Source\PSoC4/CyLib.c ****         *  amplitude level equals or above 2. In this case the amplitude is not
1382:Generated_Source\PSoC4/CyLib.c ****         *  explicitly controlled and will grow until it saturates to the supply rail
1383:Generated_Source\PSoC4/CyLib.c ****         *  (1.8V nom). WARNING: use care when disabling AGC because driving a crystal
1384:Generated_Source\PSoC4/CyLib.c ****         *  beyond its rated limit can permanently damage the crystal.
1385:Generated_Source\PSoC4/CyLib.c ****         *
1386:Generated_Source\PSoC4/CyLib.c ****         * \return \ref CYRET_SUCCESS ECO configuration completed successfully.
1387:Generated_Source\PSoC4/CyLib.c ****         * \return \ref CYRET_BAD_PARAM One or more invalid parameters.
1388:Generated_Source\PSoC4/CyLib.c ****         *
1389:Generated_Source\PSoC4/CyLib.c ****         *******************************************************************************/
1390:Generated_Source\PSoC4/CyLib.c ****         cystatus CySysClkConfigureEcoDrive(uint32 freq, uint32 cLoad, uint32 esr, uint32 maxAmplitu
1391:Generated_Source\PSoC4/CyLib.c ****         {
1392:Generated_Source\PSoC4/CyLib.c ****             cystatus returnStatus = CYRET_SUCCESS;
1393:Generated_Source\PSoC4/CyLib.c **** 
1394:Generated_Source\PSoC4/CyLib.c ****             uint32 wDTrim;
1395:Generated_Source\PSoC4/CyLib.c ****             uint32 aTrim;
1396:Generated_Source\PSoC4/CyLib.c ****             uint32 fTrim;
1397:Generated_Source\PSoC4/CyLib.c ****             uint32 rTrim;
1398:Generated_Source\PSoC4/CyLib.c ****             uint32 gTrim;
1399:Generated_Source\PSoC4/CyLib.c **** 
1400:Generated_Source\PSoC4/CyLib.c ****             uint32 gmMin;
1401:Generated_Source\PSoC4/CyLib.c **** 
1402:Generated_Source\PSoC4/CyLib.c **** 
1403:Generated_Source\PSoC4/CyLib.c ****             if ((maxAmplitude < CY_SYS_CLK_ECO_MAX_AMPL_MIN_mV) ||
1404:Generated_Source\PSoC4/CyLib.c ****                 (freq < CY_SYS_CLK_ECO_FREQ_KHZ_MIN) || (freq > CY_SYS_CLK_ECO_FREQ_KHZ_MAX))
1405:Generated_Source\PSoC4/CyLib.c ****             {
1406:Generated_Source\PSoC4/CyLib.c ****                 returnStatus = CYRET_BAD_PARAM;
1407:Generated_Source\PSoC4/CyLib.c ****             }
1408:Generated_Source\PSoC4/CyLib.c ****             else
1409:Generated_Source\PSoC4/CyLib.c ****             {
1410:Generated_Source\PSoC4/CyLib.c ****                 /* Calculate amplitude trim */
1411:Generated_Source\PSoC4/CyLib.c ****                 aTrim = (maxAmplitude < CY_SYS_CLK_ECO_TRIM_BOUNDARY) ? ((maxAmplitude/100u) - 4u) 
1412:Generated_Source\PSoC4/CyLib.c **** 
1413:Generated_Source\PSoC4/CyLib.c ****                 if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM0)
1414:Generated_Source\PSoC4/CyLib.c ****                 {
1415:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM0;
1416:Generated_Source\PSoC4/CyLib.c ****                 }
1417:Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM1)
1418:Generated_Source\PSoC4/CyLib.c ****                 {
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 39


1419:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM1;
1420:Generated_Source\PSoC4/CyLib.c ****                 }
1421:Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM2)
1422:Generated_Source\PSoC4/CyLib.c ****                 {
1423:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM2;
1424:Generated_Source\PSoC4/CyLib.c ****                 }
1425:Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM3)
1426:Generated_Source\PSoC4/CyLib.c ****                 {
1427:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM3;
1428:Generated_Source\PSoC4/CyLib.c ****                 }
1429:Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM4)
1430:Generated_Source\PSoC4/CyLib.c ****                 {
1431:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM4;
1432:Generated_Source\PSoC4/CyLib.c ****                 }
1433:Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM5)
1434:Generated_Source\PSoC4/CyLib.c ****                 {
1435:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM5;
1436:Generated_Source\PSoC4/CyLib.c ****                 }
1437:Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM6)
1438:Generated_Source\PSoC4/CyLib.c ****                 {
1439:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM6;
1440:Generated_Source\PSoC4/CyLib.c ****                 }
1441:Generated_Source\PSoC4/CyLib.c ****                 else
1442:Generated_Source\PSoC4/CyLib.c ****                 {
1443:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM7;
1444:Generated_Source\PSoC4/CyLib.c ****                 }
1445:Generated_Source\PSoC4/CyLib.c **** 
1446:Generated_Source\PSoC4/CyLib.c ****                 /* Calculate Watchdog trim. */
1447:Generated_Source\PSoC4/CyLib.c ****                 wDTrim = (maxAmplitude < CY_SYS_CLK_ECO_TRIM_BOUNDARY) ? ((maxAmplitude/200u) - 2u)
1448:Generated_Source\PSoC4/CyLib.c **** 
1449:Generated_Source\PSoC4/CyLib.c ****                 /* Calculate amplifier gain trim. */
1450:Generated_Source\PSoC4/CyLib.c ****                 gmMin = (uint32) (((((CY_SYS_CLK_ECO_GMMIN_COEFFICIENT * freq * cLoad) / 1000) * ((
1451:Generated_Source\PSoC4/CyLib.c ****                 if (gmMin > 3u)
1452:Generated_Source\PSoC4/CyLib.c ****                 {
1453:Generated_Source\PSoC4/CyLib.c ****                     returnStatus = CYRET_BAD_PARAM;
1454:Generated_Source\PSoC4/CyLib.c ****                     gTrim = 0u;
1455:Generated_Source\PSoC4/CyLib.c ****                 }
1456:Generated_Source\PSoC4/CyLib.c ****                 else if (gmMin > 1u)
1457:Generated_Source\PSoC4/CyLib.c ****                 {
1458:Generated_Source\PSoC4/CyLib.c ****                     gTrim = gmMin;
1459:Generated_Source\PSoC4/CyLib.c ****                 }
1460:Generated_Source\PSoC4/CyLib.c ****                 else
1461:Generated_Source\PSoC4/CyLib.c ****                 {
1462:Generated_Source\PSoC4/CyLib.c ****                     gTrim = (gmMin == 1u) ? 0u : 1u;
1463:Generated_Source\PSoC4/CyLib.c ****                 }
1464:Generated_Source\PSoC4/CyLib.c **** 
1465:Generated_Source\PSoC4/CyLib.c ****                 /* Calculate feedback resistor trim */
1466:Generated_Source\PSoC4/CyLib.c ****                 if (freq > CY_SYS_CLK_ECO_FREQ_FOR_FTRIM0)
1467:Generated_Source\PSoC4/CyLib.c ****                 {
1468:Generated_Source\PSoC4/CyLib.c ****                     rTrim = CY_SYS_CLK_ECO_FTRIM0;
1469:Generated_Source\PSoC4/CyLib.c ****                 }
1470:Generated_Source\PSoC4/CyLib.c ****                 else if (freq > CY_SYS_CLK_ECO_FREQ_FOR_FTRIM1)
1471:Generated_Source\PSoC4/CyLib.c ****                 {
1472:Generated_Source\PSoC4/CyLib.c ****                     rTrim = CY_SYS_CLK_ECO_FTRIM1;
1473:Generated_Source\PSoC4/CyLib.c ****                 }
1474:Generated_Source\PSoC4/CyLib.c ****                 else if (freq > CY_SYS_CLK_ECO_FREQ_FOR_FTRIM2)
1475:Generated_Source\PSoC4/CyLib.c ****                 {
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 40


1476:Generated_Source\PSoC4/CyLib.c ****                     rTrim = CY_SYS_CLK_ECO_FTRIM2;
1477:Generated_Source\PSoC4/CyLib.c ****                 }
1478:Generated_Source\PSoC4/CyLib.c ****                 else
1479:Generated_Source\PSoC4/CyLib.c ****                 {
1480:Generated_Source\PSoC4/CyLib.c ****                     rTrim = CY_SYS_CLK_ECO_FTRIM3;
1481:Generated_Source\PSoC4/CyLib.c ****                 }
1482:Generated_Source\PSoC4/CyLib.c **** 
1483:Generated_Source\PSoC4/CyLib.c ****                 /* Calculate filter frequency trim */
1484:Generated_Source\PSoC4/CyLib.c ****                 fTrim = rTrim;
1485:Generated_Source\PSoC4/CyLib.c **** 
1486:Generated_Source\PSoC4/CyLib.c ****                 CySysClkConfigureEcoTrim(wDTrim, aTrim, fTrim, rTrim, gTrim);
1487:Generated_Source\PSoC4/CyLib.c **** 
1488:Generated_Source\PSoC4/CyLib.c ****                 /* Automatic Gain Control (AGC) enable */
1489:Generated_Source\PSoC4/CyLib.c ****                 if (maxAmplitude < 2u)
1490:Generated_Source\PSoC4/CyLib.c ****                 {
1491:Generated_Source\PSoC4/CyLib.c ****                     /* The oscillation amplitude is controlled to the level selected by amplitude t
1492:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_CLK_ECO_CONFIG_REG |= CY_SYS_CLK_ECO_CONFIG_AGC_EN;
1493:Generated_Source\PSoC4/CyLib.c ****                 }
1494:Generated_Source\PSoC4/CyLib.c ****                 else
1495:Generated_Source\PSoC4/CyLib.c ****                 {
1496:Generated_Source\PSoC4/CyLib.c ****                     /* The amplitude is not explicitly controlled and will grow until it saturates 
1497:Generated_Source\PSoC4/CyLib.c ****                     * supply rail (1.8V nom).
1498:Generated_Source\PSoC4/CyLib.c ****                     */
1499:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_CLK_ECO_CONFIG_REG &= (uint32) ~CY_SYS_CLK_ECO_CONFIG_AGC_EN;
1500:Generated_Source\PSoC4/CyLib.c ****                 }
1501:Generated_Source\PSoC4/CyLib.c ****             }
1502:Generated_Source\PSoC4/CyLib.c **** 
1503:Generated_Source\PSoC4/CyLib.c ****             return (returnStatus);
1504:Generated_Source\PSoC4/CyLib.c ****         }
1505:Generated_Source\PSoC4/CyLib.c **** 
1506:Generated_Source\PSoC4/CyLib.c ****     #endif /* CY_IP_ECO_BLESS */
1507:Generated_Source\PSoC4/CyLib.c **** 
1508:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_ECO) */
1509:Generated_Source\PSoC4/CyLib.c **** 
1510:Generated_Source\PSoC4/CyLib.c **** 
1511:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_SRSSV2 && CY_IP_PLL)
1512:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1513:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllStart
1514:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1515:Generated_Source\PSoC4/CyLib.c ****     *
1516:Generated_Source\PSoC4/CyLib.c ****     * Enables the PLL. Optionally waits for it to become stable. Waits at least
1517:Generated_Source\PSoC4/CyLib.c ****     * 250 us or until it is detected that the PLL is stable.
1518:Generated_Source\PSoC4/CyLib.c ****     *
1519:Generated_Source\PSoC4/CyLib.c ****     * Clears the unlock occurred status bit by calling CySysClkPllGetUnlockStatus(),
1520:Generated_Source\PSoC4/CyLib.c ****     * once the PLL is locked if the wait parameter is 1).
1521:Generated_Source\PSoC4/CyLib.c ****     *
1522:Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L devices.
1523:Generated_Source\PSoC4/CyLib.c ****     *
1524:Generated_Source\PSoC4/CyLib.c ****     * \param PLL:
1525:Generated_Source\PSoC4/CyLib.c ****     * 0   PLL#0
1526:Generated_Source\PSoC4/CyLib.c ****     * 1   PLL#1
1527:Generated_Source\PSoC4/CyLib.c ****     *
1528:Generated_Source\PSoC4/CyLib.c ****     * \param wait:
1529:Generated_Source\PSoC4/CyLib.c ****     * 0 - Return immediately after configuration.
1530:Generated_Source\PSoC4/CyLib.c ****     * 1 - Wait for PLL lock or timeout. This API shall use the CyDelayUs() to
1531:Generated_Source\PSoC4/CyLib.c ****     * implement the timeout feature.
1532:Generated_Source\PSoC4/CyLib.c ****     *
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 41


1533:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_SUCCESS Completed successfully.
1534:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_TIMEOUT The timeout occurred without detecting a stable clock.
1535:Generated_Source\PSoC4/CyLib.c ****     * If the input source of the clock is jittery, then the lock indication may
1536:Generated_Source\PSoC4/CyLib.c ****     * not occur. However, after the timeout has expired, the generated PLL clock can
1537:Generated_Source\PSoC4/CyLib.c ****     * still be used.
1538:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_BAD_PARAM - Either the PLL or wait parameter is invalid.
1539:Generated_Source\PSoC4/CyLib.c ****     *
1540:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1541:Generated_Source\PSoC4/CyLib.c ****     cystatus CySysClkPllStart(uint32 pll, uint32 wait)
1542:Generated_Source\PSoC4/CyLib.c ****     {
1543:Generated_Source\PSoC4/CyLib.c ****         uint32 counts = CY_SYS_CLK_PLL_MAX_STARTUP_US;
1544:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1545:Generated_Source\PSoC4/CyLib.c ****         cystatus returnStatus = CYRET_SUCCESS;
1546:Generated_Source\PSoC4/CyLib.c **** 
1547:Generated_Source\PSoC4/CyLib.c ****         if((pll < CY_IP_PLL_NR) && (wait <= 1u))
1548:Generated_Source\PSoC4/CyLib.c ****         {
1549:Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
1550:Generated_Source\PSoC4/CyLib.c **** 
1551:Generated_Source\PSoC4/CyLib.c ****             /* Isolate PLL outputs */
1552:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config &= (uint32) ~CY_SYS_CLK_PLL_CONFIG_ISOLATE;
1553:Generated_Source\PSoC4/CyLib.c **** 
1554:Generated_Source\PSoC4/CyLib.c ****             /* Enable PLL */
1555:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config |= CY_SYS_CLK_PLL_CONFIG_ENABLE;
1556:Generated_Source\PSoC4/CyLib.c **** 
1557:Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
1558:Generated_Source\PSoC4/CyLib.c **** 
1559:Generated_Source\PSoC4/CyLib.c ****             /* De-isolate >= CY_SYS_CLK_PLL_MIN_STARTUP_US after PLL enabled */
1560:Generated_Source\PSoC4/CyLib.c ****             CyDelayUs(CY_SYS_CLK_PLL_MIN_STARTUP_US);
1561:Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
1562:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config |= CY_SYS_CLK_PLL_CONFIG_ISOLATE;
1563:Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
1564:Generated_Source\PSoC4/CyLib.c **** 
1565:Generated_Source\PSoC4/CyLib.c ****             if(wait != 0u)
1566:Generated_Source\PSoC4/CyLib.c ****             {
1567:Generated_Source\PSoC4/CyLib.c ****                 returnStatus = CYRET_TIMEOUT;
1568:Generated_Source\PSoC4/CyLib.c **** 
1569:Generated_Source\PSoC4/CyLib.c ****                 while(0u != counts)
1570:Generated_Source\PSoC4/CyLib.c ****                 {
1571:Generated_Source\PSoC4/CyLib.c **** 
1572:Generated_Source\PSoC4/CyLib.c ****                     if(0u != CySysClkPllGetLockStatus(pll))
1573:Generated_Source\PSoC4/CyLib.c ****                     {
1574:Generated_Source\PSoC4/CyLib.c ****                         returnStatus = CYRET_SUCCESS;
1575:Generated_Source\PSoC4/CyLib.c ****                         (void) CySysClkPllGetUnlockStatus(pll);
1576:Generated_Source\PSoC4/CyLib.c ****                         break;
1577:Generated_Source\PSoC4/CyLib.c ****                     }
1578:Generated_Source\PSoC4/CyLib.c **** 
1579:Generated_Source\PSoC4/CyLib.c ****                     CyDelayUs(1u);
1580:Generated_Source\PSoC4/CyLib.c ****                     counts--;
1581:Generated_Source\PSoC4/CyLib.c ****                 }
1582:Generated_Source\PSoC4/CyLib.c ****             }
1583:Generated_Source\PSoC4/CyLib.c ****         }
1584:Generated_Source\PSoC4/CyLib.c ****         else
1585:Generated_Source\PSoC4/CyLib.c ****         {
1586:Generated_Source\PSoC4/CyLib.c ****             returnStatus = CYRET_BAD_PARAM;
1587:Generated_Source\PSoC4/CyLib.c ****         }
1588:Generated_Source\PSoC4/CyLib.c **** 
1589:Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 42


1590:Generated_Source\PSoC4/CyLib.c ****     }
1591:Generated_Source\PSoC4/CyLib.c **** 
1592:Generated_Source\PSoC4/CyLib.c **** 
1593:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1594:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllGetLockStatus
1595:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1596:Generated_Source\PSoC4/CyLib.c ****     *
1597:Generated_Source\PSoC4/CyLib.c ****     * Returns non-zero if the output of the specified PLL output is locked.
1598:Generated_Source\PSoC4/CyLib.c ****     *
1599:Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L devices.
1600:Generated_Source\PSoC4/CyLib.c ****     *
1601:Generated_Source\PSoC4/CyLib.c ****     * PLL:
1602:Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
1603:Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1
1604:Generated_Source\PSoC4/CyLib.c ****     *
1605:Generated_Source\PSoC4/CyLib.c ****     * \return A non-zero value when the specified PLL is locked.
1606:Generated_Source\PSoC4/CyLib.c ****     *
1607:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1608:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkPllGetLockStatus(uint32 pll)
1609:Generated_Source\PSoC4/CyLib.c ****     {
1610:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1611:Generated_Source\PSoC4/CyLib.c ****         uint32 returnStatus;
1612:Generated_Source\PSoC4/CyLib.c **** 
1613:Generated_Source\PSoC4/CyLib.c ****         CYASSERT(pll < CY_IP_PLL_NR);
1614:Generated_Source\PSoC4/CyLib.c **** 
1615:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
1616:Generated_Source\PSoC4/CyLib.c **** 
1617:Generated_Source\PSoC4/CyLib.c ****         /* PLL is locked if reported so for two consecutive read. */
1618:Generated_Source\PSoC4/CyLib.c ****         returnStatus = CY_SYS_CLK_PLL_BASE.pll[pll].status & CY_SYS_CLK_PLL_STATUS_LOCKED;
1619:Generated_Source\PSoC4/CyLib.c ****         if(0u != returnStatus)
1620:Generated_Source\PSoC4/CyLib.c ****         {
1621:Generated_Source\PSoC4/CyLib.c ****             returnStatus = CY_SYS_CLK_PLL_BASE.pll[pll].status & CY_SYS_CLK_PLL_STATUS_LOCKED;
1622:Generated_Source\PSoC4/CyLib.c ****         }
1623:Generated_Source\PSoC4/CyLib.c **** 
1624:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
1625:Generated_Source\PSoC4/CyLib.c **** 
1626:Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
1627:Generated_Source\PSoC4/CyLib.c ****     }
1628:Generated_Source\PSoC4/CyLib.c **** 
1629:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1630:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllStop
1631:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1632:Generated_Source\PSoC4/CyLib.c ****     *
1633:Generated_Source\PSoC4/CyLib.c ****     * Disables the PLL.
1634:Generated_Source\PSoC4/CyLib.c ****     *
1635:Generated_Source\PSoC4/CyLib.c ****     * Ensures that either PLL is not the source of HFCLK before it is disabled,
1636:Generated_Source\PSoC4/CyLib.c ****     * otherwise, the CPU will halt.
1637:Generated_Source\PSoC4/CyLib.c ****     *
1638:Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L devices.
1639:Generated_Source\PSoC4/CyLib.c ****     *
1640:Generated_Source\PSoC4/CyLib.c ****     * PLL:
1641:Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
1642:Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1
1643:Generated_Source\PSoC4/CyLib.c ****     *
1644:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1645:Generated_Source\PSoC4/CyLib.c ****     void CySysClkPllStop(uint32 pll)
1646:Generated_Source\PSoC4/CyLib.c ****     {
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 43


1647:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1648:Generated_Source\PSoC4/CyLib.c **** 
1649:Generated_Source\PSoC4/CyLib.c ****         if (pll < CY_IP_PLL_NR)
1650:Generated_Source\PSoC4/CyLib.c ****         {
1651:Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
1652:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config &= (uint32) ~(CY_SYS_CLK_PLL_CONFIG_ISOLATE | CY_SY
1653:Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
1654:Generated_Source\PSoC4/CyLib.c ****         }
1655:Generated_Source\PSoC4/CyLib.c ****     }
1656:Generated_Source\PSoC4/CyLib.c **** 
1657:Generated_Source\PSoC4/CyLib.c **** 
1658:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1659:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllSetPQ
1660:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1661:Generated_Source\PSoC4/CyLib.c ****     *
1662:Generated_Source\PSoC4/CyLib.c ****     * Sets feedback (P) and reference the (Q) divider value. This API also sets the
1663:Generated_Source\PSoC4/CyLib.c ****     * programmable charge pump current value. Note that the PLL has to be disabled
1664:Generated_Source\PSoC4/CyLib.c ****     * before calling this API. If this function is called while any PLL is sourcing,
1665:Generated_Source\PSoC4/CyLib.c ****     * the SYSCLK will return an error.
1666:Generated_Source\PSoC4/CyLib.c ****     *
1667:Generated_Source\PSoC4/CyLib.c ****     * The PLL must not be the system clock source when calling this function. The
1668:Generated_Source\PSoC4/CyLib.c ****     * PLL output will glitch during this function call.
1669:Generated_Source\PSoC4/CyLib.c ****     *
1670:Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L devices.
1671:Generated_Source\PSoC4/CyLib.c ****     *
1672:Generated_Source\PSoC4/CyLib.c ****     * \param PLL:
1673:Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
1674:Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1
1675:Generated_Source\PSoC4/CyLib.c ****     *
1676:Generated_Source\PSoC4/CyLib.c ****     * \param feedback The P divider. Range 4 - 259. Control bits for the feedback
1677:Generated_Source\PSoC4/CyLib.c ****     * divider.
1678:Generated_Source\PSoC4/CyLib.c ****     *
1679:Generated_Source\PSoC4/CyLib.c ****     * \param reference The Q divider. Range 1 - 64. Divide by the reference.
1680:Generated_Source\PSoC4/CyLib.c ****     *
1681:Generated_Source\PSoC4/CyLib.c ****     * \param current Charge the pump current in uA. The 2 uA for output frequencies
1682:Generated_Source\PSoC4/CyLib.c ****     * of 67 MHz or less, and 3 uA for higher output frequencies. The default
1683:Generated_Source\PSoC4/CyLib.c ****     * value is 2 uA.
1684:Generated_Source\PSoC4/CyLib.c ****     *
1685:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_SUCCESS Completed successfully.
1686:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_BAD_PARAM The parameters are out of range or the specified PLL
1687:Generated_Source\PSoC4/CyLib.c ****     * sources the system clock.
1688:Generated_Source\PSoC4/CyLib.c ****     *
1689:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1690:Generated_Source\PSoC4/CyLib.c ****     cystatus CySysClkPllSetPQ(uint32 pll, uint32 feedback, uint32 reference, uint32 current)
1691:Generated_Source\PSoC4/CyLib.c ****     {
1692:Generated_Source\PSoC4/CyLib.c ****         uint32   regTmp;
1693:Generated_Source\PSoC4/CyLib.c ****         cystatus tmp;
1694:Generated_Source\PSoC4/CyLib.c ****         uint8    interruptState;
1695:Generated_Source\PSoC4/CyLib.c ****         cystatus returnStatus = CYRET_BAD_PARAM;
1696:Generated_Source\PSoC4/CyLib.c **** 
1697:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
1698:Generated_Source\PSoC4/CyLib.c **** 
1699:Generated_Source\PSoC4/CyLib.c ****         tmp = CySysClkPllConfigChangeAllowed(pll);
1700:Generated_Source\PSoC4/CyLib.c **** 
1701:Generated_Source\PSoC4/CyLib.c ****         if ((pll < CY_IP_PLL_NR) &&
1702:Generated_Source\PSoC4/CyLib.c ****             (feedback  >= CY_SYS_CLK_PLL_CONFIG_FEEDBACK_DIV_MIN)  && (feedback  <= CY_SYS_CLK_PLL_
1703:Generated_Source\PSoC4/CyLib.c ****             (reference >= CY_SYS_CLK_PLL_CONFIG_REFERENCE_DIV_MIN) && (reference <= CY_SYS_CLK_PLL_
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 44


1704:Generated_Source\PSoC4/CyLib.c ****             (current   >= CY_SYS_CLK_PLL_CONFIG_ICP_SEL_MIN )      && (current   <= CY_SYS_CLK_PLL_
1705:Generated_Source\PSoC4/CyLib.c ****             (CYRET_SUCCESS == tmp))
1706:Generated_Source\PSoC4/CyLib.c ****         {
1707:Generated_Source\PSoC4/CyLib.c ****             /* Set new feedback, reference and current values */
1708:Generated_Source\PSoC4/CyLib.c ****             regTmp  = CY_SYS_CLK_PLL_BASE.pll[pll].config & (uint32) ~(CY_SYS_CLK_PLL_CONFIG_FEEDBA
1709:Generated_Source\PSoC4/CyLib.c ****                                                                        CY_SYS_CLK_PLL_CONFIG_REFERE
1710:Generated_Source\PSoC4/CyLib.c ****                                                                        CY_SYS_CLK_PLL_CONFIG_ICP_SE
1711:Generated_Source\PSoC4/CyLib.c **** 
1712:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((feedback << CY_SYS_CLK_PLL_CONFIG_FEEDBACK_DIV_SHIFT) & CY_SYS_CLK_PLL_CONF
1713:Generated_Source\PSoC4/CyLib.c ****             regTmp |= (((reference - 1u) << CY_SYS_CLK_PLL_CONFIG_REFERENCE_DIV_SHIFT) & CY_SYS_CLK
1714:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((current << CY_SYS_CLK_PLL_CONFIG_ICP_SEL_SHIFT) & CY_SYS_CLK_PLL_CONFIG_ICP
1715:Generated_Source\PSoC4/CyLib.c **** 
1716:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config = regTmp;
1717:Generated_Source\PSoC4/CyLib.c **** 
1718:Generated_Source\PSoC4/CyLib.c ****             returnStatus = CYRET_SUCCESS;
1719:Generated_Source\PSoC4/CyLib.c ****         }
1720:Generated_Source\PSoC4/CyLib.c **** 
1721:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
1722:Generated_Source\PSoC4/CyLib.c **** 
1723:Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
1724:Generated_Source\PSoC4/CyLib.c ****     }
1725:Generated_Source\PSoC4/CyLib.c **** 
1726:Generated_Source\PSoC4/CyLib.c **** 
1727:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1728:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllSetBypassMode
1729:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1730:Generated_Source\PSoC4/CyLib.c ****     *
1731:Generated_Source\PSoC4/CyLib.c ****     * Sets the bypass mode for the specified PLL.
1732:Generated_Source\PSoC4/CyLib.c ****     *
1733:Generated_Source\PSoC4/CyLib.c ****     * The PLL must not be the system clock source when calling this function.
1734:Generated_Source\PSoC4/CyLib.c ****     * The PLL output will glitch during this function call.
1735:Generated_Source\PSoC4/CyLib.c ****     *
1736:Generated_Source\PSoC4/CyLib.c ****     * When the PLL's reference input is higher than HFCLK frequency the device may 
1737:Generated_Source\PSoC4/CyLib.c ****     * lock due to incorrect flash wait cycle configuration and bypass switches from 
1738:Generated_Source\PSoC4/CyLib.c ****     * PLL output to the reference input. See description of 
1739:Generated_Source\PSoC4/CyLib.c ****     * CySysFlashSetWaitCycles() for more information.
1740:Generated_Source\PSoC4/CyLib.c ****     *
1741:Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L devices.
1742:Generated_Source\PSoC4/CyLib.c ****     *
1743:Generated_Source\PSoC4/CyLib.c ****     * \param PLL:
1744:Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
1745:Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1
1746:Generated_Source\PSoC4/CyLib.c ****     *
1747:Generated_Source\PSoC4/CyLib.c ****     * \param bypass: The bypass mode.
1748:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_BYPASS_AUTO - Automatic usage of the lock indicator. When unlocked,
1749:Generated_Source\PSoC4/CyLib.c ****     * automatically selects PLL the reference input (bypass mode). When locked,
1750:Generated_Source\PSoC4/CyLib.c ****     * automatically selects the PLL output.
1751:Generated_Source\PSoC4/CyLib.c ****     *
1752:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_BYPASS_PLL_REF - Selects the PLL reference input (bypass mode).
1753:Generated_Source\PSoC4/CyLib.c ****     * Ignores the lock indicator.
1754:Generated_Source\PSoC4/CyLib.c ****     *
1755:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_BYPASS_PLL_OUT - Selects the PLL output.  Ignores the lock indicator.
1756:Generated_Source\PSoC4/CyLib.c ****     *
1757:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1758:Generated_Source\PSoC4/CyLib.c ****     void CySysClkPllSetBypassMode(uint32 pll, uint32 bypass)
1759:Generated_Source\PSoC4/CyLib.c ****     {
1760:Generated_Source\PSoC4/CyLib.c ****         uint32 regTmp;
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 45


1761:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1762:Generated_Source\PSoC4/CyLib.c **** 
1763:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
1764:Generated_Source\PSoC4/CyLib.c **** 
1765:Generated_Source\PSoC4/CyLib.c ****         if ((pll < CY_IP_PLL_NR) && (bypass <= CY_SYS_PLL_BYPASS_PLL_OUT))
1766:Generated_Source\PSoC4/CyLib.c ****         {
1767:Generated_Source\PSoC4/CyLib.c ****             regTmp  = CY_SYS_CLK_PLL_BASE.pll[pll].config & (uint32) ~CY_SYS_CLK_PLL_CONFIG_BYPASS_
1768:Generated_Source\PSoC4/CyLib.c ****             regTmp |=  (uint32)(bypass << CY_SYS_CLK_PLL_CONFIG_BYPASS_SEL_SHIFT);
1769:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config = regTmp;
1770:Generated_Source\PSoC4/CyLib.c ****         }
1771:Generated_Source\PSoC4/CyLib.c **** 
1772:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
1773:Generated_Source\PSoC4/CyLib.c ****     }
1774:Generated_Source\PSoC4/CyLib.c **** 
1775:Generated_Source\PSoC4/CyLib.c **** 
1776:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1777:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllGetBypassMode
1778:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1779:Generated_Source\PSoC4/CyLib.c ****     *
1780:Generated_Source\PSoC4/CyLib.c ****     *  Gets the bypass mode for the specified PLL.
1781:Generated_Source\PSoC4/CyLib.c ****     *  This API is available only for PSoC 4200L devices.
1782:Generated_Source\PSoC4/CyLib.c ****     *
1783:Generated_Source\PSoC4/CyLib.c ****     *  \param PLL:
1784:Generated_Source\PSoC4/CyLib.c ****     *   0   PLL#0
1785:Generated_Source\PSoC4/CyLib.c ****     *   1   PLL#1
1786:Generated_Source\PSoC4/CyLib.c ****     *
1787:Generated_Source\PSoC4/CyLib.c ****     *  \param bypass: Bypass mode.
1788:Generated_Source\PSoC4/CyLib.c ****     *   The same as the parameter of the CySysClkPllSetBypassMode().
1789:Generated_Source\PSoC4/CyLib.c ****     *
1790:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1791:Generated_Source\PSoC4/CyLib.c ****     static uint32 CySysClkPllGetBypassMode(uint32 pll)
1792:Generated_Source\PSoC4/CyLib.c ****     {
1793:Generated_Source\PSoC4/CyLib.c ****         uint32 returnValue;
1794:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1795:Generated_Source\PSoC4/CyLib.c **** 
1796:Generated_Source\PSoC4/CyLib.c ****         CYASSERT(pll < CY_IP_PLL_NR);
1797:Generated_Source\PSoC4/CyLib.c **** 
1798:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
1799:Generated_Source\PSoC4/CyLib.c **** 
1800:Generated_Source\PSoC4/CyLib.c ****         returnValue = CY_SYS_CLK_PLL_BASE.pll[pll].config & CY_SYS_CLK_PLL_CONFIG_BYPASS_SEL_MASK;
1801:Generated_Source\PSoC4/CyLib.c ****         returnValue =  returnValue >> CY_SYS_CLK_PLL_CONFIG_BYPASS_SEL_SHIFT;
1802:Generated_Source\PSoC4/CyLib.c **** 
1803:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
1804:Generated_Source\PSoC4/CyLib.c **** 
1805:Generated_Source\PSoC4/CyLib.c ****         return (returnValue);
1806:Generated_Source\PSoC4/CyLib.c ****     }
1807:Generated_Source\PSoC4/CyLib.c **** 
1808:Generated_Source\PSoC4/CyLib.c **** 
1809:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1810:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllConfigChangeAllowed
1811:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1812:Generated_Source\PSoC4/CyLib.c ****     *
1813:Generated_Source\PSoC4/CyLib.c ****     *  The function returns non-zero value if the specified PLL sources the System
1814:Generated_Source\PSoC4/CyLib.c ****     *  clock and the PLL is not in the bypass mode.
1815:Generated_Source\PSoC4/CyLib.c ****     *
1816:Generated_Source\PSoC4/CyLib.c ****     *  This API is available only for PSoC 4200L devices.
1817:Generated_Source\PSoC4/CyLib.c ****     *
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 46


1818:Generated_Source\PSoC4/CyLib.c ****     *  \param PLL:
1819:Generated_Source\PSoC4/CyLib.c ****     *   0   PLL#0
1820:Generated_Source\PSoC4/CyLib.c ****     *   1   PLL#1
1821:Generated_Source\PSoC4/CyLib.c ****     *
1822:Generated_Source\PSoC4/CyLib.c ****     * \return Non-zero value when the specified PLL sources the System clock and
1823:Generated_Source\PSoC4/CyLib.c ****     * the PLL is not in the bypass mode.
1824:Generated_Source\PSoC4/CyLib.c ****     *
1825:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1826:Generated_Source\PSoC4/CyLib.c ****     static cystatus CySysClkPllConfigChangeAllowed(uint32 pll)
1827:Generated_Source\PSoC4/CyLib.c ****     {
1828:Generated_Source\PSoC4/CyLib.c ****         uint32   pllBypassMode;
1829:Generated_Source\PSoC4/CyLib.c ****         uint32   sysclkSource;
1830:Generated_Source\PSoC4/CyLib.c ****         cystatus returnValue = CYRET_LOCKED;
1831:Generated_Source\PSoC4/CyLib.c **** 
1832:Generated_Source\PSoC4/CyLib.c ****         sysclkSource  = CySysClkGetSysclkSource();
1833:Generated_Source\PSoC4/CyLib.c ****         pllBypassMode = CySysClkPllGetBypassMode(pll);
1834:Generated_Source\PSoC4/CyLib.c **** 
1835:Generated_Source\PSoC4/CyLib.c ****         if ((CY_SYS_PLL_BYPASS_PLL_REF == pllBypassMode)             ||
1836:Generated_Source\PSoC4/CyLib.c ****             ((CY_SYS_CLK_HFCLK_PLL0 != sysclkSource) && (0u == pll)) ||
1837:Generated_Source\PSoC4/CyLib.c ****             ((CY_SYS_CLK_HFCLK_PLL1 != sysclkSource) && (1u == pll)))
1838:Generated_Source\PSoC4/CyLib.c ****         {
1839:Generated_Source\PSoC4/CyLib.c ****             returnValue = CYRET_SUCCESS;
1840:Generated_Source\PSoC4/CyLib.c ****         }
1841:Generated_Source\PSoC4/CyLib.c **** 
1842:Generated_Source\PSoC4/CyLib.c ****         return (returnValue);
1843:Generated_Source\PSoC4/CyLib.c ****     }
1844:Generated_Source\PSoC4/CyLib.c **** 
1845:Generated_Source\PSoC4/CyLib.c **** 
1846:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1847:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllGetUnlockStatus
1848:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1849:Generated_Source\PSoC4/CyLib.c ****     *
1850:Generated_Source\PSoC4/CyLib.c ****     *  Returns a non-zero value if the specified PLL output was unlocked.
1851:Generated_Source\PSoC4/CyLib.c ****     *  The unlock status is an indicator that the PLL has lost a lock at least once
1852:Generated_Source\PSoC4/CyLib.c ****     *  during its operation. The unlock status is cleared once it is read using
1853:Generated_Source\PSoC4/CyLib.c ****     *  this API.
1854:Generated_Source\PSoC4/CyLib.c ****     *
1855:Generated_Source\PSoC4/CyLib.c ****     *  This API is available only for PSoC 4200L devices.
1856:Generated_Source\PSoC4/CyLib.c ****     *
1857:Generated_Source\PSoC4/CyLib.c ****     *  \param PLL:
1858:Generated_Source\PSoC4/CyLib.c ****     *   0   PLL#0
1859:Generated_Source\PSoC4/CyLib.c ****     *   1   PLL#1
1860:Generated_Source\PSoC4/CyLib.c ****     *
1861:Generated_Source\PSoC4/CyLib.c ****     * \return Non-zero value when the specified PLL was unlocked.
1862:Generated_Source\PSoC4/CyLib.c ****     *
1863:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1864:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkPllGetUnlockStatus(uint32 pll)
1865:Generated_Source\PSoC4/CyLib.c ****     {
1866:Generated_Source\PSoC4/CyLib.c ****         uint32 returnStatus = 0u;
1867:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1868:Generated_Source\PSoC4/CyLib.c **** 
1869:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
1870:Generated_Source\PSoC4/CyLib.c **** 
1871:Generated_Source\PSoC4/CyLib.c ****         returnStatus = CY_SYS_CLK_PLL_BASE.pll[pll].test & CY_SYS_CLK_PLL_TEST_UNLOCK_OCCURRED_MASK
1872:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CLK_PLL_BASE.pll[pll].test |= CY_SYS_CLK_PLL_TEST_UNLOCK_OCCURRED_MASK;
1873:Generated_Source\PSoC4/CyLib.c **** 
1874:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 47


1875:Generated_Source\PSoC4/CyLib.c **** 
1876:Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
1877:Generated_Source\PSoC4/CyLib.c ****     }
1878:Generated_Source\PSoC4/CyLib.c **** 
1879:Generated_Source\PSoC4/CyLib.c **** 
1880:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1881:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllSetFrequency
1882:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1883:Generated_Source\PSoC4/CyLib.c ****     *
1884:Generated_Source\PSoC4/CyLib.c ****     * Configures either PLL#0 or PLL#1 for the requested input/output frequencies.
1885:Generated_Source\PSoC4/CyLib.c ****     * The input frequency is the frequency of the source to the PLL. The source is
1886:Generated_Source\PSoC4/CyLib.c ****     * set using the CySysClkPllSetSource() function.
1887:Generated_Source\PSoC4/CyLib.c ****     *
1888:Generated_Source\PSoC4/CyLib.c ****     * The PLL must not be the system clock source when calling this function. The
1889:Generated_Source\PSoC4/CyLib.c ****     * PLL output will glitch during this function call.
1890:Generated_Source\PSoC4/CyLib.c ****     *
1891:Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L devices.
1892:Generated_Source\PSoC4/CyLib.c ****     *
1893:Generated_Source\PSoC4/CyLib.c ****     * \param pll:
1894:Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
1895:Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1
1896:Generated_Source\PSoC4/CyLib.c ****     *
1897:Generated_Source\PSoC4/CyLib.c ****     * \param inputFreq The reference frequency in KHz. The valid range is from 1000 to 49152 KHz.
1898:Generated_Source\PSoC4/CyLib.c ****     *
1899:Generated_Source\PSoC4/CyLib.c ****     * \param pllFreq The target frequency in KHz. The valid range is from 22500 to 49152 KHz.
1900:Generated_Source\PSoC4/CyLib.c ****     *
1901:Generated_Source\PSoC4/CyLib.c ****     * \param divider The output clock divider for the PLL:
1902:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_OUTPUT_DIVPASS    Pass Through
1903:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_OUTPUT_DIV2       Divide by 2
1904:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_OUTPUT_DIV4       Divide by 4
1905:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_OUTPUT_DIV8       Divide by 8
1906:Generated_Source\PSoC4/CyLib.c ****     *
1907:Generated_Source\PSoC4/CyLib.c ****     * \param freqTol The tolerance in ppm, 10 ppm is equal to 0.001%.
1908:Generated_Source\PSoC4/CyLib.c ****     *
1909:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_SUCCESS The PLL was successfully configured for the requested
1910:Generated_Source\PSoC4/CyLib.c ****     * frequency.
1911:Generated_Source\PSoC4/CyLib.c ****     *
1912:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_BAD_PARAM The PLL was not able to successfully configure for the
1913:Generated_Source\PSoC4/CyLib.c ****     * requested frequency.
1914:Generated_Source\PSoC4/CyLib.c ****     *
1915:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1916:Generated_Source\PSoC4/CyLib.c ****     cystatus CySysClkPllSetFrequency(uint32 pll, uint32 inputFreq, uint32 pllFreq, uint32 divider, 
1917:Generated_Source\PSoC4/CyLib.c ****     {
1918:Generated_Source\PSoC4/CyLib.c ****         uint32 qMin;
1919:Generated_Source\PSoC4/CyLib.c ****         uint32 qMax;
1920:Generated_Source\PSoC4/CyLib.c **** 
1921:Generated_Source\PSoC4/CyLib.c ****         uint32 qVal = CY_SYS_CLK_PLL_INVALID;
1922:Generated_Source\PSoC4/CyLib.c ****         uint32 pVal = CY_SYS_CLK_PLL_INVALID;
1923:Generated_Source\PSoC4/CyLib.c **** 
1924:Generated_Source\PSoC4/CyLib.c ****         uint32 q;
1925:Generated_Source\PSoC4/CyLib.c ****         uint32 p;
1926:Generated_Source\PSoC4/CyLib.c **** 
1927:Generated_Source\PSoC4/CyLib.c ****         uint32 fvco;
1928:Generated_Source\PSoC4/CyLib.c ****         int32 ferr;
1929:Generated_Source\PSoC4/CyLib.c **** 
1930:Generated_Source\PSoC4/CyLib.c ****         cystatus tmp;
1931:Generated_Source\PSoC4/CyLib.c ****         cystatus returnStatus = CYRET_BAD_PARAM;
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 48


1932:Generated_Source\PSoC4/CyLib.c **** 
1933:Generated_Source\PSoC4/CyLib.c **** 
1934:Generated_Source\PSoC4/CyLib.c ****         tmp = CySysClkPllConfigChangeAllowed(pll);
1935:Generated_Source\PSoC4/CyLib.c **** 
1936:Generated_Source\PSoC4/CyLib.c ****         if ((pll < CY_IP_PLL_NR) &&
1937:Generated_Source\PSoC4/CyLib.c ****             (inputFreq  >= CY_SYS_CLK_PLL_INPUT_FREQ_MIN )  && (inputFreq  <= CY_SYS_CLK_PLL_INPUT_
1938:Generated_Source\PSoC4/CyLib.c ****             (pllFreq >= CY_SYS_CLK_PLL_OUTPUT_FREQ_MIN ) && (pllFreq <= CY_SYS_CLK_PLL_OUTPUT_FREQ_
1939:Generated_Source\PSoC4/CyLib.c ****             (divider <= CY_SYS_PLL_OUTPUT_DIV8) &&
1940:Generated_Source\PSoC4/CyLib.c ****             (CYRET_SUCCESS == tmp))
1941:Generated_Source\PSoC4/CyLib.c ****         {
1942:Generated_Source\PSoC4/CyLib.c **** 
1943:Generated_Source\PSoC4/CyLib.c ****             /* Minimum feed forward loop divisor */
1944:Generated_Source\PSoC4/CyLib.c ****             qMin = (inputFreq + (CY_SYS_CLK_PLL_FPFDMAX - 1u)) / CY_SYS_CLK_PLL_FPFDMAX;
1945:Generated_Source\PSoC4/CyLib.c ****             qMin = (qMin < CY_SYS_CLK_PLL_QMINIP) ? CY_SYS_CLK_PLL_QMINIP : qMin;
1946:Generated_Source\PSoC4/CyLib.c **** 
1947:Generated_Source\PSoC4/CyLib.c ****             /* Maximum feed forward loop divisor */
1948:Generated_Source\PSoC4/CyLib.c ****             qMax = inputFreq / CY_SYS_CLK_PLL_FPFDMIN;
1949:Generated_Source\PSoC4/CyLib.c ****             qMax = (qMax > CY_SYS_CLK_PLL_QMAXIP) ? CY_SYS_CLK_PLL_QMAXIP : qMax;
1950:Generated_Source\PSoC4/CyLib.c **** 
1951:Generated_Source\PSoC4/CyLib.c ****             if (qMin <= qMax)
1952:Generated_Source\PSoC4/CyLib.c ****             {
1953:Generated_Source\PSoC4/CyLib.c ****                 for(q = qMin; q <= qMax; q++)
1954:Generated_Source\PSoC4/CyLib.c ****                 {
1955:Generated_Source\PSoC4/CyLib.c ****                     /* Solve for the feedback divisor value */
1956:Generated_Source\PSoC4/CyLib.c **** 
1957:Generated_Source\PSoC4/CyLib.c ****                     /* INT((pllFreq * q ) / inputFreq), where INT is normal rounding  */
1958:Generated_Source\PSoC4/CyLib.c ****                     p = ((pllFreq * q) + (inputFreq / 2u)) / inputFreq;
1959:Generated_Source\PSoC4/CyLib.c **** 
1960:Generated_Source\PSoC4/CyLib.c ****                     /* Calculate the actual VCO frequency (FVCO) */
1961:Generated_Source\PSoC4/CyLib.c ****                     fvco = ((inputFreq * p) / q);
1962:Generated_Source\PSoC4/CyLib.c **** 
1963:Generated_Source\PSoC4/CyLib.c ****                     /* Calculate the frequency error (FERR) */
1964:Generated_Source\PSoC4/CyLib.c ****                     ferr = ((1000000 * ((int32) fvco - (int32) pllFreq))/ (int32) pllFreq);
1965:Generated_Source\PSoC4/CyLib.c **** 
1966:Generated_Source\PSoC4/CyLib.c ****                     /* Bound check the frequency error and decide next action */
1967:Generated_Source\PSoC4/CyLib.c ****                     if ((( -1 * (int32) freqTol) <= ferr) && (ferr <= (int32) freqTol))
1968:Generated_Source\PSoC4/CyLib.c ****                     {
1969:Generated_Source\PSoC4/CyLib.c ****                         qVal = q;
1970:Generated_Source\PSoC4/CyLib.c ****                         pVal = p;
1971:Generated_Source\PSoC4/CyLib.c ****                         break;
1972:Generated_Source\PSoC4/CyLib.c ****                     }
1973:Generated_Source\PSoC4/CyLib.c ****                 }
1974:Generated_Source\PSoC4/CyLib.c **** 
1975:Generated_Source\PSoC4/CyLib.c **** 
1976:Generated_Source\PSoC4/CyLib.c ****                 if ((pVal != CY_SYS_CLK_PLL_INVALID) && (qVal != CY_SYS_CLK_PLL_INVALID))
1977:Generated_Source\PSoC4/CyLib.c ****                 {
1978:Generated_Source\PSoC4/CyLib.c ****                     if (CySysClkPllSetPQ(pll, pVal, qVal, CY_SYS_CLK_PLL_CURRENT_DEFAULT) == CYRET_
1979:Generated_Source\PSoC4/CyLib.c ****                     {
1980:Generated_Source\PSoC4/CyLib.c ****                         returnStatus = CySysClkPllSetOutputDivider(pll, divider);
1981:Generated_Source\PSoC4/CyLib.c ****                     }
1982:Generated_Source\PSoC4/CyLib.c ****                 }
1983:Generated_Source\PSoC4/CyLib.c ****             }
1984:Generated_Source\PSoC4/CyLib.c **** 
1985:Generated_Source\PSoC4/CyLib.c ****         }
1986:Generated_Source\PSoC4/CyLib.c **** 
1987:Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
1988:Generated_Source\PSoC4/CyLib.c ****     }
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 49


1989:Generated_Source\PSoC4/CyLib.c **** 
1990:Generated_Source\PSoC4/CyLib.c **** 
1991:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1992:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllSetSource
1993:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1994:Generated_Source\PSoC4/CyLib.c ****     *
1995:Generated_Source\PSoC4/CyLib.c ****     *  Sets the input clock source to the PLL. The PLL must be disabled before
1996:Generated_Source\PSoC4/CyLib.c ****     *  calling this function.
1997:Generated_Source\PSoC4/CyLib.c ****     *
1998:Generated_Source\PSoC4/CyLib.c ****     *  This API is available only for PSoC 4200L devices.
1999:Generated_Source\PSoC4/CyLib.c ****     *
2000:Generated_Source\PSoC4/CyLib.c ****     *  \param PLL:
2001:Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
2002:Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1
2003:Generated_Source\PSoC4/CyLib.c ****     *
2004:Generated_Source\PSoC4/CyLib.c ****     * \param source:
2005:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_IMO        IMO
2006:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_EXTCLK     External Clock
2007:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_ECO        ECO
2008:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_DSI0       DSI_OUT[0]
2009:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_DSI1       DSI_OUT[1]
2010:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_DSI2       DSI_OUT[2]
2011:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_DSI3       DSI_OUT[3]
2012:Generated_Source\PSoC4/CyLib.c ****     *
2013:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2014:Generated_Source\PSoC4/CyLib.c ****     void CySysClkPllSetSource(uint32 pll, uint32 source)
2015:Generated_Source\PSoC4/CyLib.c ****     {
2016:Generated_Source\PSoC4/CyLib.c ****         uint32 regTmp;
2017:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
2018:Generated_Source\PSoC4/CyLib.c **** 
2019:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
2020:Generated_Source\PSoC4/CyLib.c **** 
2021:Generated_Source\PSoC4/CyLib.c ****         if (pll < CY_IP_PLL_NR)
2022:Generated_Source\PSoC4/CyLib.c ****         {
2023:Generated_Source\PSoC4/CyLib.c ****             regTmp = CY_SYS_CLK_SELECT_REG & (uint32) ~CY_SYS_CLK_SELECT_PLL_MASK(pll);
2024:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((source << CY_SYS_CLK_SELECT_PLL_SHIFT(pll)) & CY_SYS_CLK_SELECT_PLL_MASK(pl
2025:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_SELECT_REG = regTmp;
2026:Generated_Source\PSoC4/CyLib.c ****         }
2027:Generated_Source\PSoC4/CyLib.c **** 
2028:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
2029:Generated_Source\PSoC4/CyLib.c ****     }
2030:Generated_Source\PSoC4/CyLib.c **** 
2031:Generated_Source\PSoC4/CyLib.c **** 
2032:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2033:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllSetOutputDivider
2034:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2035:Generated_Source\PSoC4/CyLib.c ****     *
2036:Generated_Source\PSoC4/CyLib.c ****     *  Sets the output clock divider for the PLL.
2037:Generated_Source\PSoC4/CyLib.c ****     *
2038:Generated_Source\PSoC4/CyLib.c ****     *  The PLL must not be the System Clock source when calling this function. The
2039:Generated_Source\PSoC4/CyLib.c ****     *  PLL output will glitch during this function call.
2040:Generated_Source\PSoC4/CyLib.c ****     *
2041:Generated_Source\PSoC4/CyLib.c ****     *  This API is available only for PSoC 4200L devices.
2042:Generated_Source\PSoC4/CyLib.c ****     *
2043:Generated_Source\PSoC4/CyLib.c ****     *  \param PLL:
2044:Generated_Source\PSoC4/CyLib.c ****     *   0   PLL#0
2045:Generated_Source\PSoC4/CyLib.c ****     *   1   PLL#1
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 50


2046:Generated_Source\PSoC4/CyLib.c ****     *
2047:Generated_Source\PSoC4/CyLib.c ****     * \param divider:
2048:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_OUTPUT_DIVPASS    Pass through
2049:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_OUTPUT_DIV2       Divide by 2
2050:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_OUTPUT_DIV4       Divide by 4
2051:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_OUTPUT_DIV8       Divide by 8
2052:Generated_Source\PSoC4/CyLib.c ****     *
2053:Generated_Source\PSoC4/CyLib.c ****     * \return \ref CYRET_SUCCESS    Completed successfully.
2054:Generated_Source\PSoC4/CyLib.c ****     * \return \ref CYRET_BAD_PARAM  The parameters are out of range or the
2055:Generated_Source\PSoC4/CyLib.c ****     * specified PLL sources the System clock.
2056:Generated_Source\PSoC4/CyLib.c ****     *
2057:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2058:Generated_Source\PSoC4/CyLib.c ****     cystatus CySysClkPllSetOutputDivider(uint32 pll, uint32 divider)
2059:Generated_Source\PSoC4/CyLib.c ****     {
2060:Generated_Source\PSoC4/CyLib.c ****         uint32   tmpReg;
2061:Generated_Source\PSoC4/CyLib.c ****         uint8    interruptState;
2062:Generated_Source\PSoC4/CyLib.c ****         cystatus returnStatus = CYRET_BAD_PARAM;
2063:Generated_Source\PSoC4/CyLib.c ****         cystatus tmp;
2064:Generated_Source\PSoC4/CyLib.c **** 
2065:Generated_Source\PSoC4/CyLib.c **** 
2066:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
2067:Generated_Source\PSoC4/CyLib.c **** 
2068:Generated_Source\PSoC4/CyLib.c ****         tmp = CySysClkPllConfigChangeAllowed(pll);
2069:Generated_Source\PSoC4/CyLib.c **** 
2070:Generated_Source\PSoC4/CyLib.c ****         if ((pll < CY_IP_PLL_NR) && (CYRET_SUCCESS == tmp) && (divider <= CY_SYS_PLL_OUTPUT_DIV8))
2071:Generated_Source\PSoC4/CyLib.c ****         {
2072:Generated_Source\PSoC4/CyLib.c ****             tmpReg  = CY_SYS_CLK_PLL_BASE.pll[pll].config & (uint32) ~(CY_SYS_CLK_PLL_CONFIG_OUTPUT
2073:Generated_Source\PSoC4/CyLib.c ****             tmpReg |= ((divider << CY_SYS_CLK_PLL_CONFIG_OUTPUT_DIV_SHIFT) & CY_SYS_CLK_PLL_CONFIG_
2074:Generated_Source\PSoC4/CyLib.c **** 
2075:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config = tmpReg;
2076:Generated_Source\PSoC4/CyLib.c **** 
2077:Generated_Source\PSoC4/CyLib.c ****             returnStatus = CYRET_SUCCESS;
2078:Generated_Source\PSoC4/CyLib.c ****         }
2079:Generated_Source\PSoC4/CyLib.c **** 
2080:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
2081:Generated_Source\PSoC4/CyLib.c **** 
2082:Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
2083:Generated_Source\PSoC4/CyLib.c ****     }
2084:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2 && CY_IP_PLL) */
2085:Generated_Source\PSoC4/CyLib.c **** 
2086:Generated_Source\PSoC4/CyLib.c **** 
2087:Generated_Source\PSoC4/CyLib.c **** #if(CY_IP_SRSSV2)
2088:Generated_Source\PSoC4/CyLib.c **** 
2089:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2090:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysLvdEnable
2091:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2092:Generated_Source\PSoC4/CyLib.c ****     *
2093:Generated_Source\PSoC4/CyLib.c ****     *  Enables the output of the low-voltage monitor when Vddd is at or below the
2094:Generated_Source\PSoC4/CyLib.c ****     *  trip point, configures the device to generate an interrupt, and sets the
2095:Generated_Source\PSoC4/CyLib.c ****     *  voltage trip level.
2096:Generated_Source\PSoC4/CyLib.c ****     *
2097:Generated_Source\PSoC4/CyLib.c ****     *  \param threshold: Threshold selection for Low Voltage Detect circuit.
2098:Generated_Source\PSoC4/CyLib.c ****     *  Threshold variation is +/- 2.5% from these typical voltage choices.
2099:Generated_Source\PSoC4/CyLib.c ****     *         Define                     Voltage threshold
2100:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_1_75_V       1.7500 V
2101:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_1_80_V       1.8000 V
2102:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_1_90_V       1.9000 V
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 51


2103:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_00_V       2.0000 V
2104:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_10_V       2.1000 V
2105:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_20_V       2.2000 V
2106:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_30_V       2.3000 V
2107:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_40_V       2.4000 V
2108:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_50_V       2.5000 V
2109:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_60_V       2.6000 V
2110:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_70_V       2.7000 V
2111:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_80_V       2.8000 V
2112:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_90_V       2.9000 V
2113:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_3_00_V       3.0000 V
2114:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_3_20_V       3.2000 V
2115:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_4_50_V       4.5000 V
2116:Generated_Source\PSoC4/CyLib.c ****     *
2117:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2118:Generated_Source\PSoC4/CyLib.c ****     void CySysLvdEnable(uint32 threshold)
2119:Generated_Source\PSoC4/CyLib.c ****     {
 740              		.loc 1 2119 0
 741              		.cfi_startproc
 742              		@ args = 0, pretend = 0, frame = 8
 743              		@ frame_needed = 1, uses_anonymous_args = 0
 744 0000 80B5     		push	{r7, lr}
 745              		.cfi_def_cfa_offset 8
 746              		.cfi_offset 7, -8
 747              		.cfi_offset 14, -4
 748 0002 82B0     		sub	sp, sp, #8
 749              		.cfi_def_cfa_offset 16
 750 0004 00AF     		add	r7, sp, #0
 751              		.cfi_def_cfa_register 7
 752 0006 7860     		str	r0, [r7, #4]
2120:Generated_Source\PSoC4/CyLib.c ****         /* Prevent propagating a false interrupt */
2121:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_INTR_MASK_REG   &= (uint32) ~CY_LVD_PROPAGATE_INT_TO_CPU;
 753              		.loc 1 2121 0
 754 0008 144B     		ldr	r3, .L38
 755 000a 144A     		ldr	r2, .L38
 756 000c 1268     		ldr	r2, [r2]
 757 000e 0221     		movs	r1, #2
 758 0010 8A43     		bics	r2, r1
 759 0012 1A60     		str	r2, [r3]
2122:Generated_Source\PSoC4/CyLib.c **** 
2123:Generated_Source\PSoC4/CyLib.c ****         /* Set specified threshold */
2124:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_VMON_CONFIG_REG = (CY_LVD_PWR_VMON_CONFIG_REG & ~CY_LVD_PWR_VMON_CONFIG_LVD_SEL_
 760              		.loc 1 2124 0
 761 0014 124B     		ldr	r3, .L38+4
 762 0016 124A     		ldr	r2, .L38+4
 763 0018 1268     		ldr	r2, [r2]
 764 001a 1E21     		movs	r1, #30
 765 001c 8A43     		bics	r2, r1
 766 001e 1100     		movs	r1, r2
2125:Generated_Source\PSoC4/CyLib.c ****                 ((threshold << CY_LVD_PWR_VMON_CONFIG_LVD_SEL_SHIFT) & CY_LVD_PWR_VMON_CONFIG_LVD_S
 767              		.loc 1 2125 0
 768 0020 7A68     		ldr	r2, [r7, #4]
 769 0022 5200     		lsls	r2, r2, #1
 770 0024 1E20     		movs	r0, #30
 771 0026 0240     		ands	r2, r0
2124:Generated_Source\PSoC4/CyLib.c ****                 ((threshold << CY_LVD_PWR_VMON_CONFIG_LVD_SEL_SHIFT) & CY_LVD_PWR_VMON_CONFIG_LVD_S
 772              		.loc 1 2124 0
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 52


 773 0028 0A43     		orrs	r2, r1
 774 002a 1A60     		str	r2, [r3]
2126:Generated_Source\PSoC4/CyLib.c **** 
2127:Generated_Source\PSoC4/CyLib.c ****         /* Enable the LVD. This may cause a false LVD event. */
2128:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_VMON_CONFIG_REG |= CY_LVD_PWR_VMON_CONFIG_LVD_EN;
 775              		.loc 1 2128 0
 776 002c 0C4B     		ldr	r3, .L38+4
 777 002e 0C4A     		ldr	r2, .L38+4
 778 0030 1268     		ldr	r2, [r2]
 779 0032 0121     		movs	r1, #1
 780 0034 0A43     		orrs	r2, r1
 781 0036 1A60     		str	r2, [r3]
2129:Generated_Source\PSoC4/CyLib.c **** 
2130:Generated_Source\PSoC4/CyLib.c ****         /* Wait for the circuit to stabilize */
2131:Generated_Source\PSoC4/CyLib.c ****         CyDelayUs(CY_LVD_STABILIZE_TIMEOUT_US);
 782              		.loc 1 2131 0
 783 0038 FA23     		movs	r3, #250
 784 003a 9B00     		lsls	r3, r3, #2
 785 003c 1800     		movs	r0, r3
 786 003e FFF7FEFF 		bl	CyDelayUs
2132:Generated_Source\PSoC4/CyLib.c **** 
2133:Generated_Source\PSoC4/CyLib.c ****         /* Clear the false event */
2134:Generated_Source\PSoC4/CyLib.c ****         CySysLvdClearInterrupt();
 787              		.loc 1 2134 0
 788 0042 FFF7FEFF 		bl	CySysLvdClearInterrupt
2135:Generated_Source\PSoC4/CyLib.c **** 
2136:Generated_Source\PSoC4/CyLib.c ****         /* Unmask the interrupt */
2137:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_INTR_MASK_REG   |= CY_LVD_PROPAGATE_INT_TO_CPU;
 789              		.loc 1 2137 0
 790 0046 054B     		ldr	r3, .L38
 791 0048 044A     		ldr	r2, .L38
 792 004a 1268     		ldr	r2, [r2]
 793 004c 0221     		movs	r1, #2
 794 004e 0A43     		orrs	r2, r1
 795 0050 1A60     		str	r2, [r3]
2138:Generated_Source\PSoC4/CyLib.c ****     }
 796              		.loc 1 2138 0
 797 0052 C046     		nop
 798 0054 BD46     		mov	sp, r7
 799 0056 02B0     		add	sp, sp, #8
 800              		@ sp needed
 801 0058 80BD     		pop	{r7, pc}
 802              	.L39:
 803 005a C046     		.align	2
 804              	.L38:
 805 005c 08000B40 		.word	1074462728
 806 0060 18000B40 		.word	1074462744
 807              		.cfi_endproc
 808              	.LFE7:
 809              		.size	CySysLvdEnable, .-CySysLvdEnable
 810              		.section	.text.CySysLvdDisable,"ax",%progbits
 811              		.align	2
 812              		.global	CySysLvdDisable
 813              		.code	16
 814              		.thumb_func
 815              		.type	CySysLvdDisable, %function
 816              	CySysLvdDisable:
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 53


 817              	.LFB8:
2139:Generated_Source\PSoC4/CyLib.c **** 
2140:Generated_Source\PSoC4/CyLib.c **** 
2141:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2142:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysLvdDisable
2143:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2144:Generated_Source\PSoC4/CyLib.c ****     *
2145:Generated_Source\PSoC4/CyLib.c ****     *  Disables the low voltage detection. A low voltage interrupt is disabled.
2146:Generated_Source\PSoC4/CyLib.c ****     *
2147:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2148:Generated_Source\PSoC4/CyLib.c ****     void CySysLvdDisable(void)
2149:Generated_Source\PSoC4/CyLib.c ****     {
 818              		.loc 1 2149 0
 819              		.cfi_startproc
 820              		@ args = 0, pretend = 0, frame = 0
 821              		@ frame_needed = 1, uses_anonymous_args = 0
 822 0000 80B5     		push	{r7, lr}
 823              		.cfi_def_cfa_offset 8
 824              		.cfi_offset 7, -8
 825              		.cfi_offset 14, -4
 826 0002 00AF     		add	r7, sp, #0
 827              		.cfi_def_cfa_register 7
2150:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_INTR_MASK_REG   &= ~CY_LVD_PROPAGATE_INT_TO_CPU;
 828              		.loc 1 2150 0
 829 0004 074B     		ldr	r3, .L41
 830 0006 074A     		ldr	r2, .L41
 831 0008 1268     		ldr	r2, [r2]
 832 000a 0221     		movs	r1, #2
 833 000c 8A43     		bics	r2, r1
 834 000e 1A60     		str	r2, [r3]
2151:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_VMON_CONFIG_REG &= ~CY_LVD_PWR_VMON_CONFIG_LVD_EN;
 835              		.loc 1 2151 0
 836 0010 054B     		ldr	r3, .L41+4
 837 0012 054A     		ldr	r2, .L41+4
 838 0014 1268     		ldr	r2, [r2]
 839 0016 0121     		movs	r1, #1
 840 0018 8A43     		bics	r2, r1
 841 001a 1A60     		str	r2, [r3]
2152:Generated_Source\PSoC4/CyLib.c ****     }
 842              		.loc 1 2152 0
 843 001c C046     		nop
 844 001e BD46     		mov	sp, r7
 845              		@ sp needed
 846 0020 80BD     		pop	{r7, pc}
 847              	.L42:
 848 0022 C046     		.align	2
 849              	.L41:
 850 0024 08000B40 		.word	1074462728
 851 0028 18000B40 		.word	1074462744
 852              		.cfi_endproc
 853              	.LFE8:
 854              		.size	CySysLvdDisable, .-CySysLvdDisable
 855              		.section	.text.CySysLvdGetInterruptSource,"ax",%progbits
 856              		.align	2
 857              		.global	CySysLvdGetInterruptSource
 858              		.code	16
 859              		.thumb_func
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 54


 860              		.type	CySysLvdGetInterruptSource, %function
 861              	CySysLvdGetInterruptSource:
 862              	.LFB9:
2153:Generated_Source\PSoC4/CyLib.c **** 
2154:Generated_Source\PSoC4/CyLib.c **** 
2155:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2156:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysLvdGetInterruptSource
2157:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2158:Generated_Source\PSoC4/CyLib.c ****     *
2159:Generated_Source\PSoC4/CyLib.c ****     *  Gets the low voltage detection interrupt status (without clearing).
2160:Generated_Source\PSoC4/CyLib.c ****     *
2161:Generated_Source\PSoC4/CyLib.c ****     * \return
2162:Generated_Source\PSoC4/CyLib.c ****     *  Interrupt request value:
2163:Generated_Source\PSoC4/CyLib.c ****     *    CY_SYS_LVD_INT - Indicates an Low Voltage Detect interrupt
2164:Generated_Source\PSoC4/CyLib.c ****     *
2165:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2166:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysLvdGetInterruptSource(void)
2167:Generated_Source\PSoC4/CyLib.c ****     {
 863              		.loc 1 2167 0
 864              		.cfi_startproc
 865              		@ args = 0, pretend = 0, frame = 0
 866              		@ frame_needed = 1, uses_anonymous_args = 0
 867 0000 80B5     		push	{r7, lr}
 868              		.cfi_def_cfa_offset 8
 869              		.cfi_offset 7, -8
 870              		.cfi_offset 14, -4
 871 0002 00AF     		add	r7, sp, #0
 872              		.cfi_def_cfa_register 7
2168:Generated_Source\PSoC4/CyLib.c ****         return (CY_LVD_PWR_INTR_REG & CY_SYS_LVD_INT);
 873              		.loc 1 2168 0
 874 0004 034B     		ldr	r3, .L45
 875 0006 1B68     		ldr	r3, [r3]
 876 0008 0222     		movs	r2, #2
 877 000a 1340     		ands	r3, r2
2169:Generated_Source\PSoC4/CyLib.c ****     }
 878              		.loc 1 2169 0
 879 000c 1800     		movs	r0, r3
 880 000e BD46     		mov	sp, r7
 881              		@ sp needed
 882 0010 80BD     		pop	{r7, pc}
 883              	.L46:
 884 0012 C046     		.align	2
 885              	.L45:
 886 0014 04000B40 		.word	1074462724
 887              		.cfi_endproc
 888              	.LFE9:
 889              		.size	CySysLvdGetInterruptSource, .-CySysLvdGetInterruptSource
 890              		.section	.text.CySysLvdClearInterrupt,"ax",%progbits
 891              		.align	2
 892              		.global	CySysLvdClearInterrupt
 893              		.code	16
 894              		.thumb_func
 895              		.type	CySysLvdClearInterrupt, %function
 896              	CySysLvdClearInterrupt:
 897              	.LFB10:
2170:Generated_Source\PSoC4/CyLib.c **** 
2171:Generated_Source\PSoC4/CyLib.c **** 
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 55


2172:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2173:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysLvdClearInterrupt
2174:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2175:Generated_Source\PSoC4/CyLib.c ****     *
2176:Generated_Source\PSoC4/CyLib.c ****     *  Clears the low voltage detection interrupt status.
2177:Generated_Source\PSoC4/CyLib.c ****     *
2178:Generated_Source\PSoC4/CyLib.c ****     * \return
2179:Generated_Source\PSoC4/CyLib.c ****     *  None
2180:Generated_Source\PSoC4/CyLib.c ****     *
2181:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2182:Generated_Source\PSoC4/CyLib.c ****     void CySysLvdClearInterrupt(void)
2183:Generated_Source\PSoC4/CyLib.c ****     {
 898              		.loc 1 2183 0
 899              		.cfi_startproc
 900              		@ args = 0, pretend = 0, frame = 0
 901              		@ frame_needed = 1, uses_anonymous_args = 0
 902 0000 80B5     		push	{r7, lr}
 903              		.cfi_def_cfa_offset 8
 904              		.cfi_offset 7, -8
 905              		.cfi_offset 14, -4
 906 0002 00AF     		add	r7, sp, #0
 907              		.cfi_def_cfa_register 7
2184:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_INTR_REG = CY_SYS_LVD_INT;
 908              		.loc 1 2184 0
 909 0004 024B     		ldr	r3, .L48
 910 0006 0222     		movs	r2, #2
 911 0008 1A60     		str	r2, [r3]
2185:Generated_Source\PSoC4/CyLib.c ****     }
 912              		.loc 1 2185 0
 913 000a C046     		nop
 914 000c BD46     		mov	sp, r7
 915              		@ sp needed
 916 000e 80BD     		pop	{r7, pc}
 917              	.L49:
 918              		.align	2
 919              	.L48:
 920 0010 04000B40 		.word	1074462724
 921              		.cfi_endproc
 922              	.LFE10:
 923              		.size	CySysLvdClearInterrupt, .-CySysLvdClearInterrupt
 924              		.section	.text.CySysGetResetReason,"ax",%progbits
 925              		.align	2
 926              		.global	CySysGetResetReason
 927              		.code	16
 928              		.thumb_func
 929              		.type	CySysGetResetReason, %function
 930              	CySysGetResetReason:
 931              	.LFB11:
2186:Generated_Source\PSoC4/CyLib.c **** 
2187:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2) */
2188:Generated_Source\PSoC4/CyLib.c **** 
2189:Generated_Source\PSoC4/CyLib.c **** 
2190:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2191:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysGetResetReason
2192:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2193:Generated_Source\PSoC4/CyLib.c **** *
2194:Generated_Source\PSoC4/CyLib.c **** *  Reports the cause for the latest reset(s) that occurred in the system. All
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 56


2195:Generated_Source\PSoC4/CyLib.c **** *  the bits in the RES_CAUSE register assert when the corresponding reset cause
2196:Generated_Source\PSoC4/CyLib.c **** *  occurs and must be cleared by the firmware. These bits are cleared by the
2197:Generated_Source\PSoC4/CyLib.c **** *  hardware only during XRES, POR, or a detected brown-out.
2198:Generated_Source\PSoC4/CyLib.c **** *
2199:Generated_Source\PSoC4/CyLib.c **** *  \param reason: bits in the RES_CAUSE register to clear.
2200:Generated_Source\PSoC4/CyLib.c **** *   CY_SYS_RESET_WDT       - WDT caused a reset
2201:Generated_Source\PSoC4/CyLib.c **** *   CY_SYS_RESET_PROTFAULT - Occured protection violation that requires reset
2202:Generated_Source\PSoC4/CyLib.c **** *   CY_SYS_RESET_SW        - Cortex-M0 requested a system reset.
2203:Generated_Source\PSoC4/CyLib.c **** *
2204:Generated_Source\PSoC4/CyLib.c **** * \return
2205:Generated_Source\PSoC4/CyLib.c **** *  Status. Same enumerated bit values as used for the reason parameter.
2206:Generated_Source\PSoC4/CyLib.c **** *
2207:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2208:Generated_Source\PSoC4/CyLib.c **** uint32 CySysGetResetReason(uint32 reason)
2209:Generated_Source\PSoC4/CyLib.c **** {
 932              		.loc 1 2209 0
 933              		.cfi_startproc
 934              		@ args = 0, pretend = 0, frame = 16
 935              		@ frame_needed = 1, uses_anonymous_args = 0
 936 0000 80B5     		push	{r7, lr}
 937              		.cfi_def_cfa_offset 8
 938              		.cfi_offset 7, -8
 939              		.cfi_offset 14, -4
 940 0002 84B0     		sub	sp, sp, #16
 941              		.cfi_def_cfa_offset 24
 942 0004 00AF     		add	r7, sp, #0
 943              		.cfi_def_cfa_register 7
 944 0006 7860     		str	r0, [r7, #4]
2210:Generated_Source\PSoC4/CyLib.c ****     uint32 returnStatus;
2211:Generated_Source\PSoC4/CyLib.c **** 
2212:Generated_Source\PSoC4/CyLib.c ****     reason &= (CY_SYS_RESET_WDT | CY_SYS_RESET_PROTFAULT | CY_SYS_RESET_SW);
 945              		.loc 1 2212 0
 946 0008 7B68     		ldr	r3, [r7, #4]
 947 000a 1922     		movs	r2, #25
 948 000c 1340     		ands	r3, r2
 949 000e 7B60     		str	r3, [r7, #4]
2213:Generated_Source\PSoC4/CyLib.c ****     returnStatus = CY_SYS_RES_CAUSE_REG &
 950              		.loc 1 2213 0
 951 0010 064B     		ldr	r3, .L52
 952 0012 1B68     		ldr	r3, [r3]
 953 0014 1922     		movs	r2, #25
 954 0016 1340     		ands	r3, r2
 955 0018 FB60     		str	r3, [r7, #12]
2214:Generated_Source\PSoC4/CyLib.c ****                   (CY_SYS_RESET_WDT | CY_SYS_RESET_PROTFAULT | CY_SYS_RESET_SW);
2215:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_RES_CAUSE_REG = reason;
 956              		.loc 1 2215 0
 957 001a 044B     		ldr	r3, .L52
 958 001c 7A68     		ldr	r2, [r7, #4]
 959 001e 1A60     		str	r2, [r3]
2216:Generated_Source\PSoC4/CyLib.c **** 
2217:Generated_Source\PSoC4/CyLib.c ****     return (returnStatus);
 960              		.loc 1 2217 0
 961 0020 FB68     		ldr	r3, [r7, #12]
2218:Generated_Source\PSoC4/CyLib.c **** }
 962              		.loc 1 2218 0
 963 0022 1800     		movs	r0, r3
 964 0024 BD46     		mov	sp, r7
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 57


 965 0026 04B0     		add	sp, sp, #16
 966              		@ sp needed
 967 0028 80BD     		pop	{r7, pc}
 968              	.L53:
 969 002a C046     		.align	2
 970              	.L52:
 971 002c 00030B40 		.word	1074463488
 972              		.cfi_endproc
 973              	.LFE11:
 974              		.size	CySysGetResetReason, .-CySysGetResetReason
 975              		.section	.text.CyDisableInts,"ax",%progbits
 976              		.align	2
 977              		.global	CyDisableInts
 978              		.code	16
 979              		.thumb_func
 980              		.type	CyDisableInts, %function
 981              	CyDisableInts:
 982              	.LFB12:
2219:Generated_Source\PSoC4/CyLib.c **** 
2220:Generated_Source\PSoC4/CyLib.c **** 
2221:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2222:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyDisableInts
2223:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2224:Generated_Source\PSoC4/CyLib.c **** *
2225:Generated_Source\PSoC4/CyLib.c **** *  Disables all interrupts.
2226:Generated_Source\PSoC4/CyLib.c **** *
2227:Generated_Source\PSoC4/CyLib.c **** * \return
2228:Generated_Source\PSoC4/CyLib.c **** *  32 bit mask of previously enabled interrupts.
2229:Generated_Source\PSoC4/CyLib.c **** *
2230:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2231:Generated_Source\PSoC4/CyLib.c **** uint32 CyDisableInts(void)
2232:Generated_Source\PSoC4/CyLib.c **** {
 983              		.loc 1 2232 0
 984              		.cfi_startproc
 985              		@ args = 0, pretend = 0, frame = 8
 986              		@ frame_needed = 1, uses_anonymous_args = 0
 987 0000 80B5     		push	{r7, lr}
 988              		.cfi_def_cfa_offset 8
 989              		.cfi_offset 7, -8
 990              		.cfi_offset 14, -4
 991 0002 82B0     		sub	sp, sp, #8
 992              		.cfi_def_cfa_offset 16
 993 0004 00AF     		add	r7, sp, #0
 994              		.cfi_def_cfa_register 7
2233:Generated_Source\PSoC4/CyLib.c ****     uint32 intState;
2234:Generated_Source\PSoC4/CyLib.c **** 
2235:Generated_Source\PSoC4/CyLib.c ****     /* Get current interrupt state. */
2236:Generated_Source\PSoC4/CyLib.c ****     intState = CY_INT_CLEAR_REG;
 995              		.loc 1 2236 0
 996 0006 064B     		ldr	r3, .L56
 997 0008 1B68     		ldr	r3, [r3]
 998 000a 7B60     		str	r3, [r7, #4]
2237:Generated_Source\PSoC4/CyLib.c **** 
2238:Generated_Source\PSoC4/CyLib.c ****     /* Disable all interrupts. */
2239:Generated_Source\PSoC4/CyLib.c ****     CY_INT_CLEAR_REG = CY_INT_CLEAR_DISABLE_ALL;
 999              		.loc 1 2239 0
 1000 000c 044B     		ldr	r3, .L56
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 58


 1001 000e 0122     		movs	r2, #1
 1002 0010 5242     		rsbs	r2, r2, #0
 1003 0012 1A60     		str	r2, [r3]
2240:Generated_Source\PSoC4/CyLib.c **** 
2241:Generated_Source\PSoC4/CyLib.c ****     return (intState);
 1004              		.loc 1 2241 0
 1005 0014 7B68     		ldr	r3, [r7, #4]
2242:Generated_Source\PSoC4/CyLib.c **** }
 1006              		.loc 1 2242 0
 1007 0016 1800     		movs	r0, r3
 1008 0018 BD46     		mov	sp, r7
 1009 001a 02B0     		add	sp, sp, #8
 1010              		@ sp needed
 1011 001c 80BD     		pop	{r7, pc}
 1012              	.L57:
 1013 001e C046     		.align	2
 1014              	.L56:
 1015 0020 80E100E0 		.word	-536813184
 1016              		.cfi_endproc
 1017              	.LFE12:
 1018              		.size	CyDisableInts, .-CyDisableInts
 1019              		.section	.text.CyEnableInts,"ax",%progbits
 1020              		.align	2
 1021              		.global	CyEnableInts
 1022              		.code	16
 1023              		.thumb_func
 1024              		.type	CyEnableInts, %function
 1025              	CyEnableInts:
 1026              	.LFB13:
2243:Generated_Source\PSoC4/CyLib.c **** 
2244:Generated_Source\PSoC4/CyLib.c **** 
2245:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2246:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyEnableInts
2247:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2248:Generated_Source\PSoC4/CyLib.c **** *
2249:Generated_Source\PSoC4/CyLib.c **** *  Enables interrupts to a given state.
2250:Generated_Source\PSoC4/CyLib.c **** *
2251:Generated_Source\PSoC4/CyLib.c **** *  \param mask The 32 bit mask of interrupts to enable.
2252:Generated_Source\PSoC4/CyLib.c **** *
2253:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2254:Generated_Source\PSoC4/CyLib.c **** void CyEnableInts(uint32 mask)
2255:Generated_Source\PSoC4/CyLib.c **** {
 1027              		.loc 1 2255 0
 1028              		.cfi_startproc
 1029              		@ args = 0, pretend = 0, frame = 8
 1030              		@ frame_needed = 1, uses_anonymous_args = 0
 1031 0000 80B5     		push	{r7, lr}
 1032              		.cfi_def_cfa_offset 8
 1033              		.cfi_offset 7, -8
 1034              		.cfi_offset 14, -4
 1035 0002 82B0     		sub	sp, sp, #8
 1036              		.cfi_def_cfa_offset 16
 1037 0004 00AF     		add	r7, sp, #0
 1038              		.cfi_def_cfa_register 7
 1039 0006 7860     		str	r0, [r7, #4]
2256:Generated_Source\PSoC4/CyLib.c ****     CY_INT_ENABLE_REG = mask;
 1040              		.loc 1 2256 0
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 59


 1041 0008 034B     		ldr	r3, .L59
 1042 000a 7A68     		ldr	r2, [r7, #4]
 1043 000c 1A60     		str	r2, [r3]
2257:Generated_Source\PSoC4/CyLib.c **** }
 1044              		.loc 1 2257 0
 1045 000e C046     		nop
 1046 0010 BD46     		mov	sp, r7
 1047 0012 02B0     		add	sp, sp, #8
 1048              		@ sp needed
 1049 0014 80BD     		pop	{r7, pc}
 1050              	.L60:
 1051 0016 C046     		.align	2
 1052              	.L59:
 1053 0018 00E100E0 		.word	-536813312
 1054              		.cfi_endproc
 1055              	.LFE13:
 1056              		.size	CyEnableInts, .-CyEnableInts
 1057              		.section	.text.CyIntSetSysVector,"ax",%progbits
 1058              		.align	2
 1059              		.global	CyIntSetSysVector
 1060              		.code	16
 1061              		.thumb_func
 1062              		.type	CyIntSetSysVector, %function
 1063              	CyIntSetSysVector:
 1064              	.LFB14:
2258:Generated_Source\PSoC4/CyLib.c **** 
2259:Generated_Source\PSoC4/CyLib.c **** 
2260:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2261:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntSetSysVector
2262:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2263:Generated_Source\PSoC4/CyLib.c **** *
2264:Generated_Source\PSoC4/CyLib.c **** *  Sets the interrupt vector of the specified system interrupt number. These
2265:Generated_Source\PSoC4/CyLib.c **** *  interrupts are for SysTick, PendSV and others.
2266:Generated_Source\PSoC4/CyLib.c **** *
2267:Generated_Source\PSoC4/CyLib.c **** *  \param number: System interrupt number:
2268:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_NMI_IRQN        - Non Maskable Interrupt
2269:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_HARD_FAULT_IRQN - Hard Fault Interrupt
2270:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_SVCALL_IRQN     - SV Call Interrupt
2271:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_PEND_SV_IRQN    - Pend SV Interrupt
2272:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_SYSTICK_IRQN    - System Tick Interrupt
2273:Generated_Source\PSoC4/CyLib.c **** *
2274:Generated_Source\PSoC4/CyLib.c **** *  \param address Pointer to an interrupt service routine.
2275:Generated_Source\PSoC4/CyLib.c **** *
2276:Generated_Source\PSoC4/CyLib.c **** * \return The old ISR vector at this location.
2277:Generated_Source\PSoC4/CyLib.c **** *
2278:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2279:Generated_Source\PSoC4/CyLib.c **** cyisraddress CyIntSetSysVector(uint8 number, cyisraddress address)
2280:Generated_Source\PSoC4/CyLib.c **** {
 1065              		.loc 1 2280 0
 1066              		.cfi_startproc
 1067              		@ args = 0, pretend = 0, frame = 16
 1068              		@ frame_needed = 1, uses_anonymous_args = 0
 1069 0000 80B5     		push	{r7, lr}
 1070              		.cfi_def_cfa_offset 8
 1071              		.cfi_offset 7, -8
 1072              		.cfi_offset 14, -4
 1073 0002 84B0     		sub	sp, sp, #16
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 60


 1074              		.cfi_def_cfa_offset 24
 1075 0004 00AF     		add	r7, sp, #0
 1076              		.cfi_def_cfa_register 7
 1077 0006 0200     		movs	r2, r0
 1078 0008 3960     		str	r1, [r7]
 1079 000a FB1D     		adds	r3, r7, #7
 1080 000c 1A70     		strb	r2, [r3]
2281:Generated_Source\PSoC4/CyLib.c ****     cyisraddress oldIsr;
2282:Generated_Source\PSoC4/CyLib.c ****     cyisraddress *ramVectorTable = (cyisraddress *) CY_INT_VECT_TABLE;
 1081              		.loc 1 2282 0
 1082 000e 8023     		movs	r3, #128
 1083 0010 9B05     		lsls	r3, r3, #22
 1084 0012 FB60     		str	r3, [r7, #12]
2283:Generated_Source\PSoC4/CyLib.c **** 
2284:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_INT_IRQ_BASE);
 1085              		.loc 1 2284 0
 1086 0014 FB1D     		adds	r3, r7, #7
 1087 0016 1B78     		ldrb	r3, [r3]
 1088 0018 0F2B     		cmp	r3, #15
 1089 001a 02D9     		bls	.L62
 1090              		.loc 1 2284 0 is_stmt 0 discriminator 1
 1091 001c 0020     		movs	r0, #0
 1092 001e FFF7FEFF 		bl	CyHalt
 1093              	.L62:
2285:Generated_Source\PSoC4/CyLib.c **** 
2286:Generated_Source\PSoC4/CyLib.c ****     /* Save old Interrupt service routine. */
2287:Generated_Source\PSoC4/CyLib.c ****     oldIsr = ramVectorTable[number];
 1094              		.loc 1 2287 0 is_stmt 1
 1095 0022 FB1D     		adds	r3, r7, #7
 1096 0024 1B78     		ldrb	r3, [r3]
 1097 0026 9B00     		lsls	r3, r3, #2
 1098 0028 FA68     		ldr	r2, [r7, #12]
 1099 002a D318     		adds	r3, r2, r3
 1100 002c 1B68     		ldr	r3, [r3]
 1101 002e BB60     		str	r3, [r7, #8]
2288:Generated_Source\PSoC4/CyLib.c **** 
2289:Generated_Source\PSoC4/CyLib.c ****     /* Set new Interrupt service routine. */
2290:Generated_Source\PSoC4/CyLib.c ****     ramVectorTable[number] = address;
 1102              		.loc 1 2290 0
 1103 0030 FB1D     		adds	r3, r7, #7
 1104 0032 1B78     		ldrb	r3, [r3]
 1105 0034 9B00     		lsls	r3, r3, #2
 1106 0036 FA68     		ldr	r2, [r7, #12]
 1107 0038 D318     		adds	r3, r2, r3
 1108 003a 3A68     		ldr	r2, [r7]
 1109 003c 1A60     		str	r2, [r3]
2291:Generated_Source\PSoC4/CyLib.c **** 
2292:Generated_Source\PSoC4/CyLib.c ****     return(oldIsr);
 1110              		.loc 1 2292 0
 1111 003e BB68     		ldr	r3, [r7, #8]
2293:Generated_Source\PSoC4/CyLib.c **** }
 1112              		.loc 1 2293 0
 1113 0040 1800     		movs	r0, r3
 1114 0042 BD46     		mov	sp, r7
 1115 0044 04B0     		add	sp, sp, #16
 1116              		@ sp needed
 1117 0046 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 61


 1118              		.cfi_endproc
 1119              	.LFE14:
 1120              		.size	CyIntSetSysVector, .-CyIntSetSysVector
 1121              		.section	.text.CyIntGetSysVector,"ax",%progbits
 1122              		.align	2
 1123              		.global	CyIntGetSysVector
 1124              		.code	16
 1125              		.thumb_func
 1126              		.type	CyIntGetSysVector, %function
 1127              	CyIntGetSysVector:
 1128              	.LFB15:
2294:Generated_Source\PSoC4/CyLib.c **** 
2295:Generated_Source\PSoC4/CyLib.c **** 
2296:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2297:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntGetSysVector
2298:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2299:Generated_Source\PSoC4/CyLib.c **** *
2300:Generated_Source\PSoC4/CyLib.c **** *   Gets the interrupt vector of the specified system interrupt number. These
2301:Generated_Source\PSoC4/CyLib.c **** *   interrupts are for SysTick, PendSV and others.
2302:Generated_Source\PSoC4/CyLib.c **** *
2303:Generated_Source\PSoC4/CyLib.c **** *  \param number: System interrupt number:
2304:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_NMI_IRQN        - Non Maskable Interrupt
2305:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_HARD_FAULT_IRQN - Hard Fault Interrupt
2306:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_SVCALL_IRQN     - SV Call Interrupt
2307:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_PEND_SV_IRQN    - Pend SV Interrupt
2308:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_SYSTICK_IRQN    - System Tick Interrupt
2309:Generated_Source\PSoC4/CyLib.c **** *
2310:Generated_Source\PSoC4/CyLib.c **** * \return Address of the ISR in the interrupt vector table.
2311:Generated_Source\PSoC4/CyLib.c **** *
2312:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2313:Generated_Source\PSoC4/CyLib.c **** cyisraddress CyIntGetSysVector(uint8 number)
2314:Generated_Source\PSoC4/CyLib.c **** {
 1129              		.loc 1 2314 0
 1130              		.cfi_startproc
 1131              		@ args = 0, pretend = 0, frame = 16
 1132              		@ frame_needed = 1, uses_anonymous_args = 0
 1133 0000 80B5     		push	{r7, lr}
 1134              		.cfi_def_cfa_offset 8
 1135              		.cfi_offset 7, -8
 1136              		.cfi_offset 14, -4
 1137 0002 84B0     		sub	sp, sp, #16
 1138              		.cfi_def_cfa_offset 24
 1139 0004 00AF     		add	r7, sp, #0
 1140              		.cfi_def_cfa_register 7
 1141 0006 0200     		movs	r2, r0
 1142 0008 FB1D     		adds	r3, r7, #7
 1143 000a 1A70     		strb	r2, [r3]
2315:Generated_Source\PSoC4/CyLib.c ****     cyisraddress *ramVectorTable = (cyisraddress *) CY_INT_VECT_TABLE;
 1144              		.loc 1 2315 0
 1145 000c 8023     		movs	r3, #128
 1146 000e 9B05     		lsls	r3, r3, #22
 1147 0010 FB60     		str	r3, [r7, #12]
2316:Generated_Source\PSoC4/CyLib.c **** 
2317:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_INT_IRQ_BASE);
 1148              		.loc 1 2317 0
 1149 0012 FB1D     		adds	r3, r7, #7
 1150 0014 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 62


 1151 0016 0F2B     		cmp	r3, #15
 1152 0018 02D9     		bls	.L65
 1153              		.loc 1 2317 0 is_stmt 0 discriminator 1
 1154 001a 0020     		movs	r0, #0
 1155 001c FFF7FEFF 		bl	CyHalt
 1156              	.L65:
2318:Generated_Source\PSoC4/CyLib.c **** 
2319:Generated_Source\PSoC4/CyLib.c ****     return(ramVectorTable[number]);
 1157              		.loc 1 2319 0 is_stmt 1
 1158 0020 FB1D     		adds	r3, r7, #7
 1159 0022 1B78     		ldrb	r3, [r3]
 1160 0024 9B00     		lsls	r3, r3, #2
 1161 0026 FA68     		ldr	r2, [r7, #12]
 1162 0028 D318     		adds	r3, r2, r3
 1163 002a 1B68     		ldr	r3, [r3]
2320:Generated_Source\PSoC4/CyLib.c **** }
 1164              		.loc 1 2320 0
 1165 002c 1800     		movs	r0, r3
 1166 002e BD46     		mov	sp, r7
 1167 0030 04B0     		add	sp, sp, #16
 1168              		@ sp needed
 1169 0032 80BD     		pop	{r7, pc}
 1170              		.cfi_endproc
 1171              	.LFE15:
 1172              		.size	CyIntGetSysVector, .-CyIntGetSysVector
 1173              		.section	.text.CyIntSetVector,"ax",%progbits
 1174              		.align	2
 1175              		.global	CyIntSetVector
 1176              		.code	16
 1177              		.thumb_func
 1178              		.type	CyIntSetVector, %function
 1179              	CyIntSetVector:
 1180              	.LFB16:
2321:Generated_Source\PSoC4/CyLib.c **** 
2322:Generated_Source\PSoC4/CyLib.c **** 
2323:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2324:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntSetVector
2325:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2326:Generated_Source\PSoC4/CyLib.c **** *
2327:Generated_Source\PSoC4/CyLib.c **** *  Sets the interrupt vector of the specified interrupt number.
2328:Generated_Source\PSoC4/CyLib.c **** *
2329:Generated_Source\PSoC4/CyLib.c **** *  \param number Valid range [0-31].  Interrupt number
2330:Generated_Source\PSoC4/CyLib.c **** *  \param address Pointer to an interrupt service routine
2331:Generated_Source\PSoC4/CyLib.c **** *
2332:Generated_Source\PSoC4/CyLib.c **** * \return Previous interrupt vector value.
2333:Generated_Source\PSoC4/CyLib.c **** *
2334:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2335:Generated_Source\PSoC4/CyLib.c **** cyisraddress CyIntSetVector(uint8 number, cyisraddress address)
2336:Generated_Source\PSoC4/CyLib.c **** {
 1181              		.loc 1 2336 0
 1182              		.cfi_startproc
 1183              		@ args = 0, pretend = 0, frame = 16
 1184              		@ frame_needed = 1, uses_anonymous_args = 0
 1185 0000 80B5     		push	{r7, lr}
 1186              		.cfi_def_cfa_offset 8
 1187              		.cfi_offset 7, -8
 1188              		.cfi_offset 14, -4
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 63


 1189 0002 84B0     		sub	sp, sp, #16
 1190              		.cfi_def_cfa_offset 24
 1191 0004 00AF     		add	r7, sp, #0
 1192              		.cfi_def_cfa_register 7
 1193 0006 0200     		movs	r2, r0
 1194 0008 3960     		str	r1, [r7]
 1195 000a FB1D     		adds	r3, r7, #7
 1196 000c 1A70     		strb	r2, [r3]
2337:Generated_Source\PSoC4/CyLib.c ****     cyisraddress oldIsr;
2338:Generated_Source\PSoC4/CyLib.c ****     cyisraddress *ramVectorTable = (cyisraddress *) CY_INT_VECT_TABLE;
 1197              		.loc 1 2338 0
 1198 000e 8023     		movs	r3, #128
 1199 0010 9B05     		lsls	r3, r3, #22
 1200 0012 FB60     		str	r3, [r7, #12]
2339:Generated_Source\PSoC4/CyLib.c **** 
2340:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_NUM_INTERRUPTS);
 1201              		.loc 1 2340 0
 1202 0014 FB1D     		adds	r3, r7, #7
 1203 0016 1B78     		ldrb	r3, [r3]
 1204 0018 1F2B     		cmp	r3, #31
 1205 001a 02D9     		bls	.L68
 1206              		.loc 1 2340 0 is_stmt 0 discriminator 1
 1207 001c 0020     		movs	r0, #0
 1208 001e FFF7FEFF 		bl	CyHalt
 1209              	.L68:
2341:Generated_Source\PSoC4/CyLib.c **** 
2342:Generated_Source\PSoC4/CyLib.c ****     /* Save old Interrupt service routine. */
2343:Generated_Source\PSoC4/CyLib.c ****     oldIsr = ramVectorTable[CY_INT_IRQ_BASE + number];
 1210              		.loc 1 2343 0 is_stmt 1
 1211 0022 FB1D     		adds	r3, r7, #7
 1212 0024 1B78     		ldrb	r3, [r3]
 1213 0026 1033     		adds	r3, r3, #16
 1214 0028 9B00     		lsls	r3, r3, #2
 1215 002a FA68     		ldr	r2, [r7, #12]
 1216 002c D318     		adds	r3, r2, r3
 1217 002e 1B68     		ldr	r3, [r3]
 1218 0030 BB60     		str	r3, [r7, #8]
2344:Generated_Source\PSoC4/CyLib.c **** 
2345:Generated_Source\PSoC4/CyLib.c ****     /* Set new Interrupt service routine. */
2346:Generated_Source\PSoC4/CyLib.c ****     ramVectorTable[CY_INT_IRQ_BASE + number] = address;
 1219              		.loc 1 2346 0
 1220 0032 FB1D     		adds	r3, r7, #7
 1221 0034 1B78     		ldrb	r3, [r3]
 1222 0036 1033     		adds	r3, r3, #16
 1223 0038 9B00     		lsls	r3, r3, #2
 1224 003a FA68     		ldr	r2, [r7, #12]
 1225 003c D318     		adds	r3, r2, r3
 1226 003e 3A68     		ldr	r2, [r7]
 1227 0040 1A60     		str	r2, [r3]
2347:Generated_Source\PSoC4/CyLib.c **** 
2348:Generated_Source\PSoC4/CyLib.c ****     return(oldIsr);
 1228              		.loc 1 2348 0
 1229 0042 BB68     		ldr	r3, [r7, #8]
2349:Generated_Source\PSoC4/CyLib.c **** }
 1230              		.loc 1 2349 0
 1231 0044 1800     		movs	r0, r3
 1232 0046 BD46     		mov	sp, r7
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 64


 1233 0048 04B0     		add	sp, sp, #16
 1234              		@ sp needed
 1235 004a 80BD     		pop	{r7, pc}
 1236              		.cfi_endproc
 1237              	.LFE16:
 1238              		.size	CyIntSetVector, .-CyIntSetVector
 1239              		.section	.text.CyIntGetVector,"ax",%progbits
 1240              		.align	2
 1241              		.global	CyIntGetVector
 1242              		.code	16
 1243              		.thumb_func
 1244              		.type	CyIntGetVector, %function
 1245              	CyIntGetVector:
 1246              	.LFB17:
2350:Generated_Source\PSoC4/CyLib.c **** 
2351:Generated_Source\PSoC4/CyLib.c **** 
2352:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2353:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntGetVector
2354:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2355:Generated_Source\PSoC4/CyLib.c **** *
2356:Generated_Source\PSoC4/CyLib.c **** *  Gets the interrupt vector of the specified interrupt number.
2357:Generated_Source\PSoC4/CyLib.c **** *
2358:Generated_Source\PSoC4/CyLib.c **** *  \param number: Valid range [0-31].  Interrupt number
2359:Generated_Source\PSoC4/CyLib.c **** *
2360:Generated_Source\PSoC4/CyLib.c **** * \return Address of the ISR in the interrupt vector table.
2361:Generated_Source\PSoC4/CyLib.c **** *
2362:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2363:Generated_Source\PSoC4/CyLib.c **** cyisraddress CyIntGetVector(uint8 number)
2364:Generated_Source\PSoC4/CyLib.c **** {
 1247              		.loc 1 2364 0
 1248              		.cfi_startproc
 1249              		@ args = 0, pretend = 0, frame = 16
 1250              		@ frame_needed = 1, uses_anonymous_args = 0
 1251 0000 80B5     		push	{r7, lr}
 1252              		.cfi_def_cfa_offset 8
 1253              		.cfi_offset 7, -8
 1254              		.cfi_offset 14, -4
 1255 0002 84B0     		sub	sp, sp, #16
 1256              		.cfi_def_cfa_offset 24
 1257 0004 00AF     		add	r7, sp, #0
 1258              		.cfi_def_cfa_register 7
 1259 0006 0200     		movs	r2, r0
 1260 0008 FB1D     		adds	r3, r7, #7
 1261 000a 1A70     		strb	r2, [r3]
2365:Generated_Source\PSoC4/CyLib.c ****     cyisraddress *ramVectorTable = (cyisraddress *) CY_INT_VECT_TABLE;
 1262              		.loc 1 2365 0
 1263 000c 8023     		movs	r3, #128
 1264 000e 9B05     		lsls	r3, r3, #22
 1265 0010 FB60     		str	r3, [r7, #12]
2366:Generated_Source\PSoC4/CyLib.c **** 
2367:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_NUM_INTERRUPTS);
 1266              		.loc 1 2367 0
 1267 0012 FB1D     		adds	r3, r7, #7
 1268 0014 1B78     		ldrb	r3, [r3]
 1269 0016 1F2B     		cmp	r3, #31
 1270 0018 02D9     		bls	.L71
 1271              		.loc 1 2367 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 65


 1272 001a 0020     		movs	r0, #0
 1273 001c FFF7FEFF 		bl	CyHalt
 1274              	.L71:
2368:Generated_Source\PSoC4/CyLib.c **** 
2369:Generated_Source\PSoC4/CyLib.c ****     return (ramVectorTable[CY_INT_IRQ_BASE + number]);
 1275              		.loc 1 2369 0 is_stmt 1
 1276 0020 FB1D     		adds	r3, r7, #7
 1277 0022 1B78     		ldrb	r3, [r3]
 1278 0024 1033     		adds	r3, r3, #16
 1279 0026 9B00     		lsls	r3, r3, #2
 1280 0028 FA68     		ldr	r2, [r7, #12]
 1281 002a D318     		adds	r3, r2, r3
 1282 002c 1B68     		ldr	r3, [r3]
2370:Generated_Source\PSoC4/CyLib.c **** }
 1283              		.loc 1 2370 0
 1284 002e 1800     		movs	r0, r3
 1285 0030 BD46     		mov	sp, r7
 1286 0032 04B0     		add	sp, sp, #16
 1287              		@ sp needed
 1288 0034 80BD     		pop	{r7, pc}
 1289              		.cfi_endproc
 1290              	.LFE17:
 1291              		.size	CyIntGetVector, .-CyIntGetVector
 1292 0036 C046     		.section	.text.CyIntSetPriority,"ax",%progbits
 1293              		.align	2
 1294              		.global	CyIntSetPriority
 1295              		.code	16
 1296              		.thumb_func
 1297              		.type	CyIntSetPriority, %function
 1298              	CyIntSetPriority:
 1299              	.LFB18:
2371:Generated_Source\PSoC4/CyLib.c **** 
2372:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2373:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntSetPriority
2374:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2375:Generated_Source\PSoC4/CyLib.c **** *
2376:Generated_Source\PSoC4/CyLib.c **** *  Sets the priority of the interrupt.
2377:Generated_Source\PSoC4/CyLib.c **** *
2378:Generated_Source\PSoC4/CyLib.c **** *  \param priority: Priority of the interrupt. 0 - 3, 0 being the highest.
2379:Generated_Source\PSoC4/CyLib.c **** *  \param number: The number of the interrupt, 0 - 31.
2380:Generated_Source\PSoC4/CyLib.c **** *
2381:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2382:Generated_Source\PSoC4/CyLib.c **** void CyIntSetPriority(uint8 number, uint8 priority)
2383:Generated_Source\PSoC4/CyLib.c **** {
 1300              		.loc 1 2383 0
 1301              		.cfi_startproc
 1302              		@ args = 0, pretend = 0, frame = 24
 1303              		@ frame_needed = 1, uses_anonymous_args = 0
 1304 0000 90B5     		push	{r4, r7, lr}
 1305              		.cfi_def_cfa_offset 12
 1306              		.cfi_offset 4, -12
 1307              		.cfi_offset 7, -8
 1308              		.cfi_offset 14, -4
 1309 0002 87B0     		sub	sp, sp, #28
 1310              		.cfi_def_cfa_offset 40
 1311 0004 00AF     		add	r7, sp, #0
 1312              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 66


 1313 0006 0200     		movs	r2, r0
 1314 0008 FB1D     		adds	r3, r7, #7
 1315 000a 1A70     		strb	r2, [r3]
 1316 000c BB1D     		adds	r3, r7, #6
 1317 000e 0A1C     		adds	r2, r1, #0
 1318 0010 1A70     		strb	r2, [r3]
2384:Generated_Source\PSoC4/CyLib.c ****     uint8 interruptState;
2385:Generated_Source\PSoC4/CyLib.c ****     uint32 shift;
2386:Generated_Source\PSoC4/CyLib.c ****     uint32 value;
2387:Generated_Source\PSoC4/CyLib.c **** 
2388:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(priority <= CY_MIN_PRIORITY);
 1319              		.loc 1 2388 0
 1320 0012 BB1D     		adds	r3, r7, #6
 1321 0014 1B78     		ldrb	r3, [r3]
 1322 0016 032B     		cmp	r3, #3
 1323 0018 02D9     		bls	.L74
 1324              		.loc 1 2388 0 is_stmt 0 discriminator 1
 1325 001a 0020     		movs	r0, #0
 1326 001c FFF7FEFF 		bl	CyHalt
 1327              	.L74:
2389:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_NUM_INTERRUPTS);
 1328              		.loc 1 2389 0 is_stmt 1
 1329 0020 FB1D     		adds	r3, r7, #7
 1330 0022 1B78     		ldrb	r3, [r3]
 1331 0024 1F2B     		cmp	r3, #31
 1332 0026 02D9     		bls	.L75
 1333              		.loc 1 2389 0 is_stmt 0 discriminator 1
 1334 0028 0020     		movs	r0, #0
 1335 002a FFF7FEFF 		bl	CyHalt
 1336              	.L75:
2390:Generated_Source\PSoC4/CyLib.c **** 
2391:Generated_Source\PSoC4/CyLib.c ****     shift = CY_INT_PRIORITY_SHIFT(number);
 1337              		.loc 1 2391 0 is_stmt 1
 1338 002e FB1D     		adds	r3, r7, #7
 1339 0030 1B78     		ldrb	r3, [r3]
 1340 0032 0322     		movs	r2, #3
 1341 0034 1340     		ands	r3, r2
 1342 0036 DB00     		lsls	r3, r3, #3
 1343 0038 0633     		adds	r3, r3, #6
 1344 003a 7B61     		str	r3, [r7, #20]
2392:Generated_Source\PSoC4/CyLib.c **** 
2393:Generated_Source\PSoC4/CyLib.c ****     interruptState = CyEnterCriticalSection();
 1345              		.loc 1 2393 0
 1346 003c 1323     		movs	r3, #19
 1347 003e FC18     		adds	r4, r7, r3
 1348 0040 FFF7FEFF 		bl	CyEnterCriticalSection
 1349 0044 0300     		movs	r3, r0
 1350 0046 2370     		strb	r3, [r4]
2394:Generated_Source\PSoC4/CyLib.c **** 
2395:Generated_Source\PSoC4/CyLib.c ****     value = CY_INT_PRIORITY_REG(number);
 1351              		.loc 1 2395 0
 1352 0048 FB1D     		adds	r3, r7, #7
 1353 004a 1B78     		ldrb	r3, [r3]
 1354 004c 9B08     		lsrs	r3, r3, #2
 1355 004e DBB2     		uxtb	r3, r3
 1356 0050 9B00     		lsls	r3, r3, #2
 1357 0052 144A     		ldr	r2, .L76
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 67


 1358 0054 9446     		mov	ip, r2
 1359 0056 6344     		add	r3, r3, ip
 1360 0058 1B68     		ldr	r3, [r3]
 1361 005a FB60     		str	r3, [r7, #12]
2396:Generated_Source\PSoC4/CyLib.c ****     value &= (uint32)(~((uint32)(CY_INT_PRIORITY_MASK << shift)));
 1362              		.loc 1 2396 0
 1363 005c 0322     		movs	r2, #3
 1364 005e 7B69     		ldr	r3, [r7, #20]
 1365 0060 9A40     		lsls	r2, r2, r3
 1366 0062 1300     		movs	r3, r2
 1367 0064 DA43     		mvns	r2, r3
 1368 0066 FB68     		ldr	r3, [r7, #12]
 1369 0068 1340     		ands	r3, r2
 1370 006a FB60     		str	r3, [r7, #12]
2397:Generated_Source\PSoC4/CyLib.c ****     value |= ((uint32)priority << shift);
 1371              		.loc 1 2397 0
 1372 006c BB1D     		adds	r3, r7, #6
 1373 006e 1A78     		ldrb	r2, [r3]
 1374 0070 7B69     		ldr	r3, [r7, #20]
 1375 0072 9A40     		lsls	r2, r2, r3
 1376 0074 1300     		movs	r3, r2
 1377 0076 FA68     		ldr	r2, [r7, #12]
 1378 0078 1343     		orrs	r3, r2
 1379 007a FB60     		str	r3, [r7, #12]
2398:Generated_Source\PSoC4/CyLib.c ****     CY_INT_PRIORITY_REG(number) = value;
 1380              		.loc 1 2398 0
 1381 007c FB1D     		adds	r3, r7, #7
 1382 007e 1B78     		ldrb	r3, [r3]
 1383 0080 9B08     		lsrs	r3, r3, #2
 1384 0082 DBB2     		uxtb	r3, r3
 1385 0084 9B00     		lsls	r3, r3, #2
 1386 0086 074A     		ldr	r2, .L76
 1387 0088 9446     		mov	ip, r2
 1388 008a 6344     		add	r3, r3, ip
 1389 008c FA68     		ldr	r2, [r7, #12]
 1390 008e 1A60     		str	r2, [r3]
2399:Generated_Source\PSoC4/CyLib.c **** 
2400:Generated_Source\PSoC4/CyLib.c ****     CyExitCriticalSection(interruptState);
 1391              		.loc 1 2400 0
 1392 0090 1323     		movs	r3, #19
 1393 0092 FB18     		adds	r3, r7, r3
 1394 0094 1B78     		ldrb	r3, [r3]
 1395 0096 1800     		movs	r0, r3
 1396 0098 FFF7FEFF 		bl	CyExitCriticalSection
2401:Generated_Source\PSoC4/CyLib.c **** }
 1397              		.loc 1 2401 0
 1398 009c C046     		nop
 1399 009e BD46     		mov	sp, r7
 1400 00a0 07B0     		add	sp, sp, #28
 1401              		@ sp needed
 1402 00a2 90BD     		pop	{r4, r7, pc}
 1403              	.L77:
 1404              		.align	2
 1405              	.L76:
 1406 00a4 00E400E0 		.word	-536812544
 1407              		.cfi_endproc
 1408              	.LFE18:
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 68


 1409              		.size	CyIntSetPriority, .-CyIntSetPriority
 1410              		.section	.text.CyIntGetPriority,"ax",%progbits
 1411              		.align	2
 1412              		.global	CyIntGetPriority
 1413              		.code	16
 1414              		.thumb_func
 1415              		.type	CyIntGetPriority, %function
 1416              	CyIntGetPriority:
 1417              	.LFB19:
2402:Generated_Source\PSoC4/CyLib.c **** 
2403:Generated_Source\PSoC4/CyLib.c **** 
2404:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2405:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntGetPriority
2406:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2407:Generated_Source\PSoC4/CyLib.c **** *
2408:Generated_Source\PSoC4/CyLib.c **** *  Gets the priority of the interrupt.
2409:Generated_Source\PSoC4/CyLib.c **** *
2410:Generated_Source\PSoC4/CyLib.c **** *  \param number: The number of the interrupt, 0 - 31.
2411:Generated_Source\PSoC4/CyLib.c **** *
2412:Generated_Source\PSoC4/CyLib.c **** * \return
2413:Generated_Source\PSoC4/CyLib.c **** *  Priority of the interrupt. 0 - 3, 0 being the highest.
2414:Generated_Source\PSoC4/CyLib.c **** *
2415:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2416:Generated_Source\PSoC4/CyLib.c **** uint8 CyIntGetPriority(uint8 number)
2417:Generated_Source\PSoC4/CyLib.c **** {
 1418              		.loc 1 2417 0
 1419              		.cfi_startproc
 1420              		@ args = 0, pretend = 0, frame = 16
 1421              		@ frame_needed = 1, uses_anonymous_args = 0
 1422 0000 80B5     		push	{r7, lr}
 1423              		.cfi_def_cfa_offset 8
 1424              		.cfi_offset 7, -8
 1425              		.cfi_offset 14, -4
 1426 0002 84B0     		sub	sp, sp, #16
 1427              		.cfi_def_cfa_offset 24
 1428 0004 00AF     		add	r7, sp, #0
 1429              		.cfi_def_cfa_register 7
 1430 0006 0200     		movs	r2, r0
 1431 0008 FB1D     		adds	r3, r7, #7
 1432 000a 1A70     		strb	r2, [r3]
2418:Generated_Source\PSoC4/CyLib.c ****     uint8 priority;
2419:Generated_Source\PSoC4/CyLib.c **** 
2420:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_NUM_INTERRUPTS);
 1433              		.loc 1 2420 0
 1434 000c FB1D     		adds	r3, r7, #7
 1435 000e 1B78     		ldrb	r3, [r3]
 1436 0010 1F2B     		cmp	r3, #31
 1437 0012 02D9     		bls	.L79
 1438              		.loc 1 2420 0 is_stmt 0 discriminator 1
 1439 0014 0020     		movs	r0, #0
 1440 0016 FFF7FEFF 		bl	CyHalt
 1441              	.L79:
2421:Generated_Source\PSoC4/CyLib.c **** 
2422:Generated_Source\PSoC4/CyLib.c ****     priority = (uint8) (CY_INT_PRIORITY_REG(number) >> CY_INT_PRIORITY_SHIFT(number));
 1442              		.loc 1 2422 0 is_stmt 1
 1443 001a FB1D     		adds	r3, r7, #7
 1444 001c 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 69


 1445 001e 9B08     		lsrs	r3, r3, #2
 1446 0020 DBB2     		uxtb	r3, r3
 1447 0022 9B00     		lsls	r3, r3, #2
 1448 0024 0B4A     		ldr	r2, .L81
 1449 0026 9446     		mov	ip, r2
 1450 0028 6344     		add	r3, r3, ip
 1451 002a 1A68     		ldr	r2, [r3]
 1452 002c FB1D     		adds	r3, r7, #7
 1453 002e 1B78     		ldrb	r3, [r3]
 1454 0030 0321     		movs	r1, #3
 1455 0032 0B40     		ands	r3, r1
 1456 0034 DB00     		lsls	r3, r3, #3
 1457 0036 0633     		adds	r3, r3, #6
 1458 0038 DA40     		lsrs	r2, r2, r3
 1459 003a 0F23     		movs	r3, #15
 1460 003c FB18     		adds	r3, r7, r3
 1461 003e 1A70     		strb	r2, [r3]
2423:Generated_Source\PSoC4/CyLib.c **** 
2424:Generated_Source\PSoC4/CyLib.c ****     return (priority & (uint8) CY_INT_PRIORITY_MASK);
 1462              		.loc 1 2424 0
 1463 0040 0F23     		movs	r3, #15
 1464 0042 FB18     		adds	r3, r7, r3
 1465 0044 1B78     		ldrb	r3, [r3]
 1466 0046 0322     		movs	r2, #3
 1467 0048 1340     		ands	r3, r2
 1468 004a DBB2     		uxtb	r3, r3
2425:Generated_Source\PSoC4/CyLib.c **** }
 1469              		.loc 1 2425 0
 1470 004c 1800     		movs	r0, r3
 1471 004e BD46     		mov	sp, r7
 1472 0050 04B0     		add	sp, sp, #16
 1473              		@ sp needed
 1474 0052 80BD     		pop	{r7, pc}
 1475              	.L82:
 1476              		.align	2
 1477              	.L81:
 1478 0054 00E400E0 		.word	-536812544
 1479              		.cfi_endproc
 1480              	.LFE19:
 1481              		.size	CyIntGetPriority, .-CyIntGetPriority
 1482              		.section	.text.CyIntEnable,"ax",%progbits
 1483              		.align	2
 1484              		.global	CyIntEnable
 1485              		.code	16
 1486              		.thumb_func
 1487              		.type	CyIntEnable, %function
 1488              	CyIntEnable:
 1489              	.LFB20:
2426:Generated_Source\PSoC4/CyLib.c **** 
2427:Generated_Source\PSoC4/CyLib.c **** 
2428:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2429:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntEnable
2430:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2431:Generated_Source\PSoC4/CyLib.c **** *
2432:Generated_Source\PSoC4/CyLib.c **** *  Enables the specified interrupt number.
2433:Generated_Source\PSoC4/CyLib.c **** *
2434:Generated_Source\PSoC4/CyLib.c **** *  \param number: Valid range [0-31].  Interrupt number
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 70


2435:Generated_Source\PSoC4/CyLib.c **** *
2436:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2437:Generated_Source\PSoC4/CyLib.c **** void CyIntEnable(uint8 number)
2438:Generated_Source\PSoC4/CyLib.c **** {
 1490              		.loc 1 2438 0
 1491              		.cfi_startproc
 1492              		@ args = 0, pretend = 0, frame = 8
 1493              		@ frame_needed = 1, uses_anonymous_args = 0
 1494 0000 80B5     		push	{r7, lr}
 1495              		.cfi_def_cfa_offset 8
 1496              		.cfi_offset 7, -8
 1497              		.cfi_offset 14, -4
 1498 0002 82B0     		sub	sp, sp, #8
 1499              		.cfi_def_cfa_offset 16
 1500 0004 00AF     		add	r7, sp, #0
 1501              		.cfi_def_cfa_register 7
 1502 0006 0200     		movs	r2, r0
 1503 0008 FB1D     		adds	r3, r7, #7
 1504 000a 1A70     		strb	r2, [r3]
2439:Generated_Source\PSoC4/CyLib.c ****     CY_INT_ENABLE_REG = ((uint32) 0x01u << (CY_INT_ENABLE_RANGE_MASK & number));
 1505              		.loc 1 2439 0
 1506 000c 064B     		ldr	r3, .L84
 1507 000e FA1D     		adds	r2, r7, #7
 1508 0010 1278     		ldrb	r2, [r2]
 1509 0012 1F21     		movs	r1, #31
 1510 0014 0A40     		ands	r2, r1
 1511 0016 0121     		movs	r1, #1
 1512 0018 9140     		lsls	r1, r1, r2
 1513 001a 0A00     		movs	r2, r1
 1514 001c 1A60     		str	r2, [r3]
2440:Generated_Source\PSoC4/CyLib.c **** }
 1515              		.loc 1 2440 0
 1516 001e C046     		nop
 1517 0020 BD46     		mov	sp, r7
 1518 0022 02B0     		add	sp, sp, #8
 1519              		@ sp needed
 1520 0024 80BD     		pop	{r7, pc}
 1521              	.L85:
 1522 0026 C046     		.align	2
 1523              	.L84:
 1524 0028 00E100E0 		.word	-536813312
 1525              		.cfi_endproc
 1526              	.LFE20:
 1527              		.size	CyIntEnable, .-CyIntEnable
 1528              		.section	.text.CyIntGetState,"ax",%progbits
 1529              		.align	2
 1530              		.global	CyIntGetState
 1531              		.code	16
 1532              		.thumb_func
 1533              		.type	CyIntGetState, %function
 1534              	CyIntGetState:
 1535              	.LFB21:
2441:Generated_Source\PSoC4/CyLib.c **** 
2442:Generated_Source\PSoC4/CyLib.c **** 
2443:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2444:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntGetState
2445:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 71


2446:Generated_Source\PSoC4/CyLib.c **** *
2447:Generated_Source\PSoC4/CyLib.c **** *  Gets the enable state of the specified interrupt number.
2448:Generated_Source\PSoC4/CyLib.c **** *
2449:Generated_Source\PSoC4/CyLib.c **** *  \param number: Valid range [0-31].  Interrupt number.
2450:Generated_Source\PSoC4/CyLib.c **** *
2451:Generated_Source\PSoC4/CyLib.c **** * \return
2452:Generated_Source\PSoC4/CyLib.c **** *  Enable status: 1 if enabled, 0 if disabled
2453:Generated_Source\PSoC4/CyLib.c **** *
2454:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2455:Generated_Source\PSoC4/CyLib.c **** uint8 CyIntGetState(uint8 number)
2456:Generated_Source\PSoC4/CyLib.c **** {
 1536              		.loc 1 2456 0
 1537              		.cfi_startproc
 1538              		@ args = 0, pretend = 0, frame = 8
 1539              		@ frame_needed = 1, uses_anonymous_args = 0
 1540 0000 80B5     		push	{r7, lr}
 1541              		.cfi_def_cfa_offset 8
 1542              		.cfi_offset 7, -8
 1543              		.cfi_offset 14, -4
 1544 0002 82B0     		sub	sp, sp, #8
 1545              		.cfi_def_cfa_offset 16
 1546 0004 00AF     		add	r7, sp, #0
 1547              		.cfi_def_cfa_register 7
 1548 0006 0200     		movs	r2, r0
 1549 0008 FB1D     		adds	r3, r7, #7
 1550 000a 1A70     		strb	r2, [r3]
2457:Generated_Source\PSoC4/CyLib.c ****     /* Get state of interrupt. */
2458:Generated_Source\PSoC4/CyLib.c ****     return ((0u != (CY_INT_ENABLE_REG & ((uint32) 0x01u << (CY_INT_ENABLE_RANGE_MASK & number)))) ?
 1551              		.loc 1 2458 0
 1552 000c 074B     		ldr	r3, .L88
 1553 000e 1A68     		ldr	r2, [r3]
 1554 0010 FB1D     		adds	r3, r7, #7
 1555 0012 1B78     		ldrb	r3, [r3]
 1556 0014 1F21     		movs	r1, #31
 1557 0016 0B40     		ands	r3, r1
 1558 0018 DA40     		lsrs	r2, r2, r3
 1559 001a 1300     		movs	r3, r2
 1560 001c DBB2     		uxtb	r3, r3
 1561 001e 0122     		movs	r2, #1
 1562 0020 1340     		ands	r3, r2
 1563 0022 DBB2     		uxtb	r3, r3
2459:Generated_Source\PSoC4/CyLib.c **** }
 1564              		.loc 1 2459 0
 1565 0024 1800     		movs	r0, r3
 1566 0026 BD46     		mov	sp, r7
 1567 0028 02B0     		add	sp, sp, #8
 1568              		@ sp needed
 1569 002a 80BD     		pop	{r7, pc}
 1570              	.L89:
 1571              		.align	2
 1572              	.L88:
 1573 002c 00E100E0 		.word	-536813312
 1574              		.cfi_endproc
 1575              	.LFE21:
 1576              		.size	CyIntGetState, .-CyIntGetState
 1577              		.section	.text.CyIntDisable,"ax",%progbits
 1578              		.align	2
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 72


 1579              		.global	CyIntDisable
 1580              		.code	16
 1581              		.thumb_func
 1582              		.type	CyIntDisable, %function
 1583              	CyIntDisable:
 1584              	.LFB22:
2460:Generated_Source\PSoC4/CyLib.c **** 
2461:Generated_Source\PSoC4/CyLib.c **** 
2462:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2463:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntDisable
2464:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2465:Generated_Source\PSoC4/CyLib.c **** *
2466:Generated_Source\PSoC4/CyLib.c **** *   Disables the specified interrupt number.
2467:Generated_Source\PSoC4/CyLib.c **** *
2468:Generated_Source\PSoC4/CyLib.c **** *   \param number: Valid range [0-31].  Interrupt number.
2469:Generated_Source\PSoC4/CyLib.c **** *
2470:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2471:Generated_Source\PSoC4/CyLib.c **** void CyIntDisable(uint8 number)
2472:Generated_Source\PSoC4/CyLib.c **** {
 1585              		.loc 1 2472 0
 1586              		.cfi_startproc
 1587              		@ args = 0, pretend = 0, frame = 8
 1588              		@ frame_needed = 1, uses_anonymous_args = 0
 1589 0000 80B5     		push	{r7, lr}
 1590              		.cfi_def_cfa_offset 8
 1591              		.cfi_offset 7, -8
 1592              		.cfi_offset 14, -4
 1593 0002 82B0     		sub	sp, sp, #8
 1594              		.cfi_def_cfa_offset 16
 1595 0004 00AF     		add	r7, sp, #0
 1596              		.cfi_def_cfa_register 7
 1597 0006 0200     		movs	r2, r0
 1598 0008 FB1D     		adds	r3, r7, #7
 1599 000a 1A70     		strb	r2, [r3]
2473:Generated_Source\PSoC4/CyLib.c ****     CY_INT_CLEAR_REG = ((uint32) 0x01u << (CY_INT_ENABLE_RANGE_MASK & number));
 1600              		.loc 1 2473 0
 1601 000c 064B     		ldr	r3, .L91
 1602 000e FA1D     		adds	r2, r7, #7
 1603 0010 1278     		ldrb	r2, [r2]
 1604 0012 1F21     		movs	r1, #31
 1605 0014 0A40     		ands	r2, r1
 1606 0016 0121     		movs	r1, #1
 1607 0018 9140     		lsls	r1, r1, r2
 1608 001a 0A00     		movs	r2, r1
 1609 001c 1A60     		str	r2, [r3]
2474:Generated_Source\PSoC4/CyLib.c **** }
 1610              		.loc 1 2474 0
 1611 001e C046     		nop
 1612 0020 BD46     		mov	sp, r7
 1613 0022 02B0     		add	sp, sp, #8
 1614              		@ sp needed
 1615 0024 80BD     		pop	{r7, pc}
 1616              	.L92:
 1617 0026 C046     		.align	2
 1618              	.L91:
 1619 0028 80E100E0 		.word	-536813184
 1620              		.cfi_endproc
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 73


 1621              	.LFE22:
 1622              		.size	CyIntDisable, .-CyIntDisable
 1623              		.section	.text.CyIntSetPending,"ax",%progbits
 1624              		.align	2
 1625              		.global	CyIntSetPending
 1626              		.code	16
 1627              		.thumb_func
 1628              		.type	CyIntSetPending, %function
 1629              	CyIntSetPending:
 1630              	.LFB23:
2475:Generated_Source\PSoC4/CyLib.c **** 
2476:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2477:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntSetPending
2478:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2479:Generated_Source\PSoC4/CyLib.c **** *
2480:Generated_Source\PSoC4/CyLib.c **** *  Forces the specified interrupt number to be pending.
2481:Generated_Source\PSoC4/CyLib.c **** *
2482:Generated_Source\PSoC4/CyLib.c **** *  \param number: Valid range [0-31].  Interrupt number.
2483:Generated_Source\PSoC4/CyLib.c **** *
2484:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2485:Generated_Source\PSoC4/CyLib.c **** void CyIntSetPending(uint8 number)
2486:Generated_Source\PSoC4/CyLib.c **** {
 1631              		.loc 1 2486 0
 1632              		.cfi_startproc
 1633              		@ args = 0, pretend = 0, frame = 8
 1634              		@ frame_needed = 1, uses_anonymous_args = 0
 1635 0000 80B5     		push	{r7, lr}
 1636              		.cfi_def_cfa_offset 8
 1637              		.cfi_offset 7, -8
 1638              		.cfi_offset 14, -4
 1639 0002 82B0     		sub	sp, sp, #8
 1640              		.cfi_def_cfa_offset 16
 1641 0004 00AF     		add	r7, sp, #0
 1642              		.cfi_def_cfa_register 7
 1643 0006 0200     		movs	r2, r0
 1644 0008 FB1D     		adds	r3, r7, #7
 1645 000a 1A70     		strb	r2, [r3]
2487:Generated_Source\PSoC4/CyLib.c ****     CY_INT_SET_PEND_REG = ((uint32) 0x01u << (CY_INT_ENABLE_RANGE_MASK & number));
 1646              		.loc 1 2487 0
 1647 000c 064B     		ldr	r3, .L94
 1648 000e FA1D     		adds	r2, r7, #7
 1649 0010 1278     		ldrb	r2, [r2]
 1650 0012 1F21     		movs	r1, #31
 1651 0014 0A40     		ands	r2, r1
 1652 0016 0121     		movs	r1, #1
 1653 0018 9140     		lsls	r1, r1, r2
 1654 001a 0A00     		movs	r2, r1
 1655 001c 1A60     		str	r2, [r3]
2488:Generated_Source\PSoC4/CyLib.c **** }
 1656              		.loc 1 2488 0
 1657 001e C046     		nop
 1658 0020 BD46     		mov	sp, r7
 1659 0022 02B0     		add	sp, sp, #8
 1660              		@ sp needed
 1661 0024 80BD     		pop	{r7, pc}
 1662              	.L95:
 1663 0026 C046     		.align	2
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 74


 1664              	.L94:
 1665 0028 00E200E0 		.word	-536813056
 1666              		.cfi_endproc
 1667              	.LFE23:
 1668              		.size	CyIntSetPending, .-CyIntSetPending
 1669              		.section	.text.CyIntClearPending,"ax",%progbits
 1670              		.align	2
 1671              		.global	CyIntClearPending
 1672              		.code	16
 1673              		.thumb_func
 1674              		.type	CyIntClearPending, %function
 1675              	CyIntClearPending:
 1676              	.LFB24:
2489:Generated_Source\PSoC4/CyLib.c **** 
2490:Generated_Source\PSoC4/CyLib.c **** 
2491:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2492:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntClearPending
2493:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2494:Generated_Source\PSoC4/CyLib.c **** *
2495:Generated_Source\PSoC4/CyLib.c **** *  Clears any pending interrupt for the specified interrupt number.
2496:Generated_Source\PSoC4/CyLib.c **** *
2497:Generated_Source\PSoC4/CyLib.c **** *  \param number: Valid range [0-31].  Interrupt number.
2498:Generated_Source\PSoC4/CyLib.c **** *
2499:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2500:Generated_Source\PSoC4/CyLib.c **** void CyIntClearPending(uint8 number)
2501:Generated_Source\PSoC4/CyLib.c **** {
 1677              		.loc 1 2501 0
 1678              		.cfi_startproc
 1679              		@ args = 0, pretend = 0, frame = 8
 1680              		@ frame_needed = 1, uses_anonymous_args = 0
 1681 0000 80B5     		push	{r7, lr}
 1682              		.cfi_def_cfa_offset 8
 1683              		.cfi_offset 7, -8
 1684              		.cfi_offset 14, -4
 1685 0002 82B0     		sub	sp, sp, #8
 1686              		.cfi_def_cfa_offset 16
 1687 0004 00AF     		add	r7, sp, #0
 1688              		.cfi_def_cfa_register 7
 1689 0006 0200     		movs	r2, r0
 1690 0008 FB1D     		adds	r3, r7, #7
 1691 000a 1A70     		strb	r2, [r3]
2502:Generated_Source\PSoC4/CyLib.c ****     CY_INT_CLR_PEND_REG = ((uint32) 0x01u << (CY_INT_ENABLE_RANGE_MASK & number));
 1692              		.loc 1 2502 0
 1693 000c 064B     		ldr	r3, .L97
 1694 000e FA1D     		adds	r2, r7, #7
 1695 0010 1278     		ldrb	r2, [r2]
 1696 0012 1F21     		movs	r1, #31
 1697 0014 0A40     		ands	r2, r1
 1698 0016 0121     		movs	r1, #1
 1699 0018 9140     		lsls	r1, r1, r2
 1700 001a 0A00     		movs	r2, r1
 1701 001c 1A60     		str	r2, [r3]
2503:Generated_Source\PSoC4/CyLib.c **** }
 1702              		.loc 1 2503 0
 1703 001e C046     		nop
 1704 0020 BD46     		mov	sp, r7
 1705 0022 02B0     		add	sp, sp, #8
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 75


 1706              		@ sp needed
 1707 0024 80BD     		pop	{r7, pc}
 1708              	.L98:
 1709 0026 C046     		.align	2
 1710              	.L97:
 1711 0028 80E200E0 		.word	-536812928
 1712              		.cfi_endproc
 1713              	.LFE24:
 1714              		.size	CyIntClearPending, .-CyIntClearPending
 1715              		.section	.text.CyHalt,"ax",%progbits
 1716              		.align	2
 1717              		.global	CyHalt
 1718              		.code	16
 1719              		.thumb_func
 1720              		.type	CyHalt, %function
 1721              	CyHalt:
 1722              	.LFB25:
2504:Generated_Source\PSoC4/CyLib.c **** 
2505:Generated_Source\PSoC4/CyLib.c **** 
2506:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2507:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyHalt
2508:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2509:Generated_Source\PSoC4/CyLib.c **** *
2510:Generated_Source\PSoC4/CyLib.c **** *  Halts the CPU.
2511:Generated_Source\PSoC4/CyLib.c **** *
2512:Generated_Source\PSoC4/CyLib.c **** *  \param reason: Value to be used during debugging.
2513:Generated_Source\PSoC4/CyLib.c **** *
2514:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2515:Generated_Source\PSoC4/CyLib.c **** void CyHalt(uint8 reason)
2516:Generated_Source\PSoC4/CyLib.c **** {
 1723              		.loc 1 2516 0
 1724              		.cfi_startproc
 1725              		@ args = 0, pretend = 0, frame = 8
 1726              		@ frame_needed = 1, uses_anonymous_args = 0
 1727 0000 80B5     		push	{r7, lr}
 1728              		.cfi_def_cfa_offset 8
 1729              		.cfi_offset 7, -8
 1730              		.cfi_offset 14, -4
 1731 0002 82B0     		sub	sp, sp, #8
 1732              		.cfi_def_cfa_offset 16
 1733 0004 00AF     		add	r7, sp, #0
 1734              		.cfi_def_cfa_register 7
 1735 0006 0200     		movs	r2, r0
 1736 0008 FB1D     		adds	r3, r7, #7
 1737 000a 1A70     		strb	r2, [r3]
2517:Generated_Source\PSoC4/CyLib.c ****     if(0u != reason)
2518:Generated_Source\PSoC4/CyLib.c ****     {
2519:Generated_Source\PSoC4/CyLib.c ****         /* To remove unreferenced local variable warning */
2520:Generated_Source\PSoC4/CyLib.c ****     }
2521:Generated_Source\PSoC4/CyLib.c **** 
2522:Generated_Source\PSoC4/CyLib.c ****     #if defined (__ARMCC_VERSION)
2523:Generated_Source\PSoC4/CyLib.c ****         __breakpoint(0x0);
2524:Generated_Source\PSoC4/CyLib.c ****     #elif defined(__GNUC__) || defined (__ICCARM__)
2525:Generated_Source\PSoC4/CyLib.c ****         __asm("    bkpt    1");
 1738              		.loc 1 2525 0
 1739              		.syntax divided
 1740              	@ 2525 "Generated_Source\PSoC4\CyLib.c" 1
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 76


 1741 000c 01BE     		    bkpt    1
 1742              	@ 0 "" 2
2526:Generated_Source\PSoC4/CyLib.c ****     #elif defined(__C51__)
2527:Generated_Source\PSoC4/CyLib.c ****         CYDEV_HALT_CPU;
2528:Generated_Source\PSoC4/CyLib.c ****     #endif  /* (__ARMCC_VERSION) */
2529:Generated_Source\PSoC4/CyLib.c **** }
 1743              		.loc 1 2529 0
 1744              		.thumb
 1745              		.syntax unified
 1746 000e C046     		nop
 1747 0010 BD46     		mov	sp, r7
 1748 0012 02B0     		add	sp, sp, #8
 1749              		@ sp needed
 1750 0014 80BD     		pop	{r7, pc}
 1751              		.cfi_endproc
 1752              	.LFE25:
 1753              		.size	CyHalt, .-CyHalt
 1754 0016 C046     		.section	.text.CySoftwareReset,"ax",%progbits
 1755              		.align	2
 1756              		.global	CySoftwareReset
 1757              		.code	16
 1758              		.thumb_func
 1759              		.type	CySoftwareReset, %function
 1760              	CySoftwareReset:
 1761              	.LFB26:
2530:Generated_Source\PSoC4/CyLib.c **** 
2531:Generated_Source\PSoC4/CyLib.c **** 
2532:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2533:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySoftwareReset
2534:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2535:Generated_Source\PSoC4/CyLib.c **** *
2536:Generated_Source\PSoC4/CyLib.c **** *  Forces a software reset of the device.
2537:Generated_Source\PSoC4/CyLib.c **** *
2538:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2539:Generated_Source\PSoC4/CyLib.c **** void CySoftwareReset(void)
2540:Generated_Source\PSoC4/CyLib.c **** {
 1762              		.loc 1 2540 0
 1763              		.cfi_startproc
 1764              		@ args = 0, pretend = 0, frame = 0
 1765              		@ frame_needed = 1, uses_anonymous_args = 0
 1766 0000 80B5     		push	{r7, lr}
 1767              		.cfi_def_cfa_offset 8
 1768              		.cfi_offset 7, -8
 1769              		.cfi_offset 14, -4
 1770 0002 00AF     		add	r7, sp, #0
 1771              		.cfi_def_cfa_register 7
2541:Generated_Source\PSoC4/CyLib.c ****     /***************************************************************************
2542:Generated_Source\PSoC4/CyLib.c ****     * Setting the system reset request bit. The vector key value must be written
2543:Generated_Source\PSoC4/CyLib.c ****     * to the register, otherwise the register write is unpredictable.
2544:Generated_Source\PSoC4/CyLib.c ****     ***************************************************************************/
2545:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_AIRCR_REG = (CY_SYS_AIRCR_REG & (uint32)(~CY_SYS_AIRCR_VECTKEY_MASK)) |
 1772              		.loc 1 2545 0
 1773 0004 054B     		ldr	r3, .L101
 1774 0006 054A     		ldr	r2, .L101
 1775 0008 1268     		ldr	r2, [r2]
 1776 000a 1204     		lsls	r2, r2, #16
 1777 000c 120C     		lsrs	r2, r2, #16
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 77


2546:Generated_Source\PSoC4/CyLib.c ****                             CY_SYS_AIRCR_VECTKEY | CY_SYS_AIRCR_SYSRESETREQ;
 1778              		.loc 1 2546 0
 1779 000e 0449     		ldr	r1, .L101+4
 1780 0010 0A43     		orrs	r2, r1
2545:Generated_Source\PSoC4/CyLib.c ****                             CY_SYS_AIRCR_VECTKEY | CY_SYS_AIRCR_SYSRESETREQ;
 1781              		.loc 1 2545 0
 1782 0012 1A60     		str	r2, [r3]
2547:Generated_Source\PSoC4/CyLib.c **** }
 1783              		.loc 1 2547 0
 1784 0014 C046     		nop
 1785 0016 BD46     		mov	sp, r7
 1786              		@ sp needed
 1787 0018 80BD     		pop	{r7, pc}
 1788              	.L102:
 1789 001a C046     		.align	2
 1790              	.L101:
 1791 001c 0CED00E0 		.word	-536810228
 1792 0020 0400FA05 		.word	100270084
 1793              		.cfi_endproc
 1794              	.LFE26:
 1795              		.size	CySoftwareReset, .-CySoftwareReset
 1796              		.section	.text.CyDelay,"ax",%progbits
 1797              		.align	2
 1798              		.global	CyDelay
 1799              		.code	16
 1800              		.thumb_func
 1801              		.type	CyDelay, %function
 1802              	CyDelay:
 1803              	.LFB27:
2548:Generated_Source\PSoC4/CyLib.c **** 
2549:Generated_Source\PSoC4/CyLib.c **** 
2550:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2551:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyDelay
2552:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2553:Generated_Source\PSoC4/CyLib.c **** *
2554:Generated_Source\PSoC4/CyLib.c **** *  Blocks for milliseconds.
2555:Generated_Source\PSoC4/CyLib.c **** *
2556:Generated_Source\PSoC4/CyLib.c **** *  \param milliseconds: number of milliseconds to delay.
2557:Generated_Source\PSoC4/CyLib.c **** *
2558:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2559:Generated_Source\PSoC4/CyLib.c **** void CyDelay(uint32 milliseconds)
2560:Generated_Source\PSoC4/CyLib.c **** {
 1804              		.loc 1 2560 0
 1805              		.cfi_startproc
 1806              		@ args = 0, pretend = 0, frame = 8
 1807              		@ frame_needed = 1, uses_anonymous_args = 0
 1808 0000 80B5     		push	{r7, lr}
 1809              		.cfi_def_cfa_offset 8
 1810              		.cfi_offset 7, -8
 1811              		.cfi_offset 14, -4
 1812 0002 82B0     		sub	sp, sp, #8
 1813              		.cfi_def_cfa_offset 16
 1814 0004 00AF     		add	r7, sp, #0
 1815              		.cfi_def_cfa_register 7
 1816 0006 7860     		str	r0, [r7, #4]
2561:Generated_Source\PSoC4/CyLib.c ****     while (milliseconds > CY_DELAY_MS_OVERFLOW)
 1817              		.loc 1 2561 0
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 78


 1818 0008 09E0     		b	.L104
 1819              	.L105:
2562:Generated_Source\PSoC4/CyLib.c ****     {
2563:Generated_Source\PSoC4/CyLib.c ****         /* This loop prevents overflow.
2564:Generated_Source\PSoC4/CyLib.c ****          * At 100MHz, milliseconds * cydelayFreqKhz overflows at about 42 seconds
2565:Generated_Source\PSoC4/CyLib.c ****          */
2566:Generated_Source\PSoC4/CyLib.c ****         CyDelayCycles(cydelay32kMs);
 1820              		.loc 1 2566 0
 1821 000a 0D4B     		ldr	r3, .L106
 1822 000c 1B68     		ldr	r3, [r3]
 1823 000e 1800     		movs	r0, r3
 1824 0010 FFF7FEFF 		bl	CyDelayCycles
2567:Generated_Source\PSoC4/CyLib.c ****         milliseconds -= CY_DELAY_MS_OVERFLOW;
 1825              		.loc 1 2567 0
 1826 0014 7B68     		ldr	r3, [r7, #4]
 1827 0016 0B4A     		ldr	r2, .L106+4
 1828 0018 9446     		mov	ip, r2
 1829 001a 6344     		add	r3, r3, ip
 1830 001c 7B60     		str	r3, [r7, #4]
 1831              	.L104:
2561:Generated_Source\PSoC4/CyLib.c ****     while (milliseconds > CY_DELAY_MS_OVERFLOW)
 1832              		.loc 1 2561 0
 1833 001e 7A68     		ldr	r2, [r7, #4]
 1834 0020 8023     		movs	r3, #128
 1835 0022 1B02     		lsls	r3, r3, #8
 1836 0024 9A42     		cmp	r2, r3
 1837 0026 F0D8     		bhi	.L105
2568:Generated_Source\PSoC4/CyLib.c ****     }
2569:Generated_Source\PSoC4/CyLib.c **** 
2570:Generated_Source\PSoC4/CyLib.c ****     CyDelayCycles(milliseconds * cydelayFreqKhz);
 1838              		.loc 1 2570 0
 1839 0028 074B     		ldr	r3, .L106+8
 1840 002a 1B68     		ldr	r3, [r3]
 1841 002c 7A68     		ldr	r2, [r7, #4]
 1842 002e 5343     		muls	r3, r2
 1843 0030 1800     		movs	r0, r3
 1844 0032 FFF7FEFF 		bl	CyDelayCycles
2571:Generated_Source\PSoC4/CyLib.c **** }
 1845              		.loc 1 2571 0
 1846 0036 C046     		nop
 1847 0038 BD46     		mov	sp, r7
 1848 003a 02B0     		add	sp, sp, #8
 1849              		@ sp needed
 1850 003c 80BD     		pop	{r7, pc}
 1851              	.L107:
 1852 003e C046     		.align	2
 1853              	.L106:
 1854 0040 00000000 		.word	cydelay32kMs
 1855 0044 0080FFFF 		.word	-32768
 1856 0048 00000000 		.word	cydelayFreqKhz
 1857              		.cfi_endproc
 1858              	.LFE27:
 1859              		.size	CyDelay, .-CyDelay
 1860              		.section	.text.CyDelayUs,"ax",%progbits
 1861              		.align	2
 1862              		.global	CyDelayUs
 1863              		.code	16
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 79


 1864              		.thumb_func
 1865              		.type	CyDelayUs, %function
 1866              	CyDelayUs:
 1867              	.LFB28:
2572:Generated_Source\PSoC4/CyLib.c **** 
2573:Generated_Source\PSoC4/CyLib.c **** 
2574:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2575:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyDelayUs
2576:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2577:Generated_Source\PSoC4/CyLib.c **** *  Blocks for microseconds.
2578:Generated_Source\PSoC4/CyLib.c **** *
2579:Generated_Source\PSoC4/CyLib.c **** *  \param microseconds: number of microseconds to delay.
2580:Generated_Source\PSoC4/CyLib.c **** *
2581:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2582:Generated_Source\PSoC4/CyLib.c **** void CyDelayUs(uint16 microseconds)
2583:Generated_Source\PSoC4/CyLib.c **** {
 1868              		.loc 1 2583 0
 1869              		.cfi_startproc
 1870              		@ args = 0, pretend = 0, frame = 8
 1871              		@ frame_needed = 1, uses_anonymous_args = 0
 1872 0000 80B5     		push	{r7, lr}
 1873              		.cfi_def_cfa_offset 8
 1874              		.cfi_offset 7, -8
 1875              		.cfi_offset 14, -4
 1876 0002 82B0     		sub	sp, sp, #8
 1877              		.cfi_def_cfa_offset 16
 1878 0004 00AF     		add	r7, sp, #0
 1879              		.cfi_def_cfa_register 7
 1880 0006 0200     		movs	r2, r0
 1881 0008 BB1D     		adds	r3, r7, #6
 1882 000a 1A80     		strh	r2, [r3]
2584:Generated_Source\PSoC4/CyLib.c ****     CyDelayCycles((uint32)microseconds * cydelayFreqMhz);
 1883              		.loc 1 2584 0
 1884 000c BB1D     		adds	r3, r7, #6
 1885 000e 1B88     		ldrh	r3, [r3]
 1886 0010 044A     		ldr	r2, .L109
 1887 0012 1278     		ldrb	r2, [r2]
 1888 0014 5343     		muls	r3, r2
 1889 0016 1800     		movs	r0, r3
 1890 0018 FFF7FEFF 		bl	CyDelayCycles
2585:Generated_Source\PSoC4/CyLib.c **** }
 1891              		.loc 1 2585 0
 1892 001c C046     		nop
 1893 001e BD46     		mov	sp, r7
 1894 0020 02B0     		add	sp, sp, #8
 1895              		@ sp needed
 1896 0022 80BD     		pop	{r7, pc}
 1897              	.L110:
 1898              		.align	2
 1899              	.L109:
 1900 0024 00000000 		.word	cydelayFreqMhz
 1901              		.cfi_endproc
 1902              	.LFE28:
 1903              		.size	CyDelayUs, .-CyDelayUs
 1904              		.global	__aeabi_uidiv
 1905              		.section	.text.CyDelayFreq,"ax",%progbits
 1906              		.align	2
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 80


 1907              		.global	CyDelayFreq
 1908              		.code	16
 1909              		.thumb_func
 1910              		.type	CyDelayFreq, %function
 1911              	CyDelayFreq:
 1912              	.LFB29:
2586:Generated_Source\PSoC4/CyLib.c **** 
2587:Generated_Source\PSoC4/CyLib.c **** 
2588:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2589:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyDelayFreq
2590:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2591:Generated_Source\PSoC4/CyLib.c **** *  Sets clock frequency for CyDelay.
2592:Generated_Source\PSoC4/CyLib.c **** *
2593:Generated_Source\PSoC4/CyLib.c **** *  \param freq: Frequency of bus clock in Hertz.
2594:Generated_Source\PSoC4/CyLib.c **** *
2595:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2596:Generated_Source\PSoC4/CyLib.c **** void CyDelayFreq(uint32 freq)
2597:Generated_Source\PSoC4/CyLib.c **** {
 1913              		.loc 1 2597 0
 1914              		.cfi_startproc
 1915              		@ args = 0, pretend = 0, frame = 8
 1916              		@ frame_needed = 1, uses_anonymous_args = 0
 1917 0000 80B5     		push	{r7, lr}
 1918              		.cfi_def_cfa_offset 8
 1919              		.cfi_offset 7, -8
 1920              		.cfi_offset 14, -4
 1921 0002 82B0     		sub	sp, sp, #8
 1922              		.cfi_def_cfa_offset 16
 1923 0004 00AF     		add	r7, sp, #0
 1924              		.cfi_def_cfa_register 7
 1925 0006 7860     		str	r0, [r7, #4]
2598:Generated_Source\PSoC4/CyLib.c ****     if (freq != 0u)
 1926              		.loc 1 2598 0
 1927 0008 7B68     		ldr	r3, [r7, #4]
 1928 000a 002B     		cmp	r3, #0
 1929 000c 03D0     		beq	.L112
2599:Generated_Source\PSoC4/CyLib.c ****     {
2600:Generated_Source\PSoC4/CyLib.c ****         cydelayFreqHz = freq;
 1930              		.loc 1 2600 0
 1931 000e 154B     		ldr	r3, .L114
 1932 0010 7A68     		ldr	r2, [r7, #4]
 1933 0012 1A60     		str	r2, [r3]
 1934 0014 02E0     		b	.L113
 1935              	.L112:
2601:Generated_Source\PSoC4/CyLib.c ****     }
2602:Generated_Source\PSoC4/CyLib.c ****     else
2603:Generated_Source\PSoC4/CyLib.c ****     {
2604:Generated_Source\PSoC4/CyLib.c ****         cydelayFreqHz = CYDEV_BCLK__SYSCLK__HZ;
 1936              		.loc 1 2604 0
 1937 0016 134B     		ldr	r3, .L114
 1938 0018 134A     		ldr	r2, .L114+4
 1939 001a 1A60     		str	r2, [r3]
 1940              	.L113:
2605:Generated_Source\PSoC4/CyLib.c ****     }
2606:Generated_Source\PSoC4/CyLib.c **** 
2607:Generated_Source\PSoC4/CyLib.c ****     cydelayFreqMhz = (uint8)((cydelayFreqHz + CY_DELAY_1M_MINUS_1_THRESHOLD) / CY_DELAY_1M_THRESHOL
 1941              		.loc 1 2607 0
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 81


 1942 001c 114B     		ldr	r3, .L114
 1943 001e 1B68     		ldr	r3, [r3]
 1944 0020 124A     		ldr	r2, .L114+8
 1945 0022 9446     		mov	ip, r2
 1946 0024 6344     		add	r3, r3, ip
 1947 0026 1249     		ldr	r1, .L114+12
 1948 0028 1800     		movs	r0, r3
 1949 002a FFF7FEFF 		bl	__aeabi_uidiv
 1950 002e 0300     		movs	r3, r0
 1951 0030 DAB2     		uxtb	r2, r3
 1952 0032 104B     		ldr	r3, .L114+16
 1953 0034 1A70     		strb	r2, [r3]
2608:Generated_Source\PSoC4/CyLib.c ****     cydelayFreqKhz = (cydelayFreqHz + CY_DELAY_1K_MINUS_1_THRESHOLD) / CY_DELAY_1K_THRESHOLD;
 1954              		.loc 1 2608 0
 1955 0036 0B4B     		ldr	r3, .L114
 1956 0038 1B68     		ldr	r3, [r3]
 1957 003a 0F4A     		ldr	r2, .L114+20
 1958 003c 9A18     		adds	r2, r3, r2
 1959 003e FA23     		movs	r3, #250
 1960 0040 9900     		lsls	r1, r3, #2
 1961 0042 1000     		movs	r0, r2
 1962 0044 FFF7FEFF 		bl	__aeabi_uidiv
 1963 0048 0300     		movs	r3, r0
 1964 004a 1A00     		movs	r2, r3
 1965 004c 0B4B     		ldr	r3, .L114+24
 1966 004e 1A60     		str	r2, [r3]
2609:Generated_Source\PSoC4/CyLib.c ****     cydelay32kMs   = CY_DELAY_MS_OVERFLOW * cydelayFreqKhz;
 1967              		.loc 1 2609 0
 1968 0050 0A4B     		ldr	r3, .L114+24
 1969 0052 1B68     		ldr	r3, [r3]
 1970 0054 DA03     		lsls	r2, r3, #15
 1971 0056 0A4B     		ldr	r3, .L114+28
 1972 0058 1A60     		str	r2, [r3]
2610:Generated_Source\PSoC4/CyLib.c **** }
 1973              		.loc 1 2610 0
 1974 005a C046     		nop
 1975 005c BD46     		mov	sp, r7
 1976 005e 02B0     		add	sp, sp, #8
 1977              		@ sp needed
 1978 0060 80BD     		pop	{r7, pc}
 1979              	.L115:
 1980 0062 C046     		.align	2
 1981              	.L114:
 1982 0064 00000000 		.word	cydelayFreqHz
 1983 0068 00366E01 		.word	24000000
 1984 006c 3F420F00 		.word	999999
 1985 0070 40420F00 		.word	1000000
 1986 0074 00000000 		.word	cydelayFreqMhz
 1987 0078 E7030000 		.word	999
 1988 007c 00000000 		.word	cydelayFreqKhz
 1989 0080 00000000 		.word	cydelay32kMs
 1990              		.cfi_endproc
 1991              	.LFE29:
 1992              		.size	CyDelayFreq, .-CyDelayFreq
 1993              		.section	.text.CySysTickStart,"ax",%progbits
 1994              		.align	2
 1995              		.global	CySysTickStart
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 82


 1996              		.code	16
 1997              		.thumb_func
 1998              		.type	CySysTickStart, %function
 1999              	CySysTickStart:
 2000              	.LFB30:
2611:Generated_Source\PSoC4/CyLib.c **** 
2612:Generated_Source\PSoC4/CyLib.c **** 
2613:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2614:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTick_Start
2615:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2616:Generated_Source\PSoC4/CyLib.c **** *
2617:Generated_Source\PSoC4/CyLib.c **** *  Starts the system timer (SysTick): configures SysTick to generate interrupt
2618:Generated_Source\PSoC4/CyLib.c **** *  every 1 ms and enables the interrupt.
2619:Generated_Source\PSoC4/CyLib.c **** *
2620:Generated_Source\PSoC4/CyLib.c **** *  There are components (LIN, CapSense Gesture) that relies on the default 
2621:Generated_Source\PSoC4/CyLib.c **** *  interval (1 ms). And that changing the interval will negatively impact 
2622:Generated_Source\PSoC4/CyLib.c **** *  their functionality.
2623:Generated_Source\PSoC4/CyLib.c **** *
2624:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2625:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set.
2626:Generated_Source\PSoC4/CyLib.c **** *
2627:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2628:Generated_Source\PSoC4/CyLib.c **** void CySysTickStart(void)
2629:Generated_Source\PSoC4/CyLib.c **** {
 2001              		.loc 1 2629 0
 2002              		.cfi_startproc
 2003              		@ args = 0, pretend = 0, frame = 0
 2004              		@ frame_needed = 1, uses_anonymous_args = 0
 2005 0000 80B5     		push	{r7, lr}
 2006              		.cfi_def_cfa_offset 8
 2007              		.cfi_offset 7, -8
 2008              		.cfi_offset 14, -4
 2009 0002 00AF     		add	r7, sp, #0
 2010              		.cfi_def_cfa_register 7
2630:Generated_Source\PSoC4/CyLib.c ****     if (0u == CySysTickInitVar)
 2011              		.loc 1 2630 0
 2012 0004 064B     		ldr	r3, .L118
 2013 0006 1B68     		ldr	r3, [r3]
 2014 0008 002B     		cmp	r3, #0
 2015 000a 04D1     		bne	.L117
2631:Generated_Source\PSoC4/CyLib.c ****     {
2632:Generated_Source\PSoC4/CyLib.c ****         CySysTickInit();
 2016              		.loc 1 2632 0
 2017 000c FFF7FEFF 		bl	CySysTickInit
2633:Generated_Source\PSoC4/CyLib.c ****         CySysTickInitVar = 1u;
 2018              		.loc 1 2633 0
 2019 0010 034B     		ldr	r3, .L118
 2020 0012 0122     		movs	r2, #1
 2021 0014 1A60     		str	r2, [r3]
 2022              	.L117:
2634:Generated_Source\PSoC4/CyLib.c ****     }
2635:Generated_Source\PSoC4/CyLib.c **** 
2636:Generated_Source\PSoC4/CyLib.c ****     CySysTickEnable();
 2023              		.loc 1 2636 0
 2024 0016 FFF7FEFF 		bl	CySysTickEnable
2637:Generated_Source\PSoC4/CyLib.c **** }
 2025              		.loc 1 2637 0
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 83


 2026 001a C046     		nop
 2027 001c BD46     		mov	sp, r7
 2028              		@ sp needed
 2029 001e 80BD     		pop	{r7, pc}
 2030              	.L119:
 2031              		.align	2
 2032              	.L118:
 2033 0020 00000000 		.word	CySysTickInitVar
 2034              		.cfi_endproc
 2035              	.LFE30:
 2036              		.size	CySysTickStart, .-CySysTickStart
 2037              		.section	.text.CySysTickInit,"ax",%progbits
 2038              		.align	2
 2039              		.global	CySysTickInit
 2040              		.code	16
 2041              		.thumb_func
 2042              		.type	CySysTickInit, %function
 2043              	CySysTickInit:
 2044              	.LFB31:
2638:Generated_Source\PSoC4/CyLib.c **** 
2639:Generated_Source\PSoC4/CyLib.c **** 
2640:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2641:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickInit
2642:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2643:Generated_Source\PSoC4/CyLib.c **** *
2644:Generated_Source\PSoC4/CyLib.c **** *  Initializes the callback addresses with pointers to NULL, associates the
2645:Generated_Source\PSoC4/CyLib.c **** *  SysTick system vector with the function that is responsible for calling
2646:Generated_Source\PSoC4/CyLib.c **** *  registered callback functions, configures SysTick timer to generate interrupt
2647:Generated_Source\PSoC4/CyLib.c **** *  every 1 ms.
2648:Generated_Source\PSoC4/CyLib.c **** *
2649:Generated_Source\PSoC4/CyLib.c **** *  The 1 ms interrupt interval is configured based on the frequency determined
2650:Generated_Source\PSoC4/CyLib.c **** *  by PSoC Creator at build time. If System clock frequency is changed in
2651:Generated_Source\PSoC4/CyLib.c **** *  runtime, the CyDelayFreq() with the appropriate parameter should be called.
2652:Generated_Source\PSoC4/CyLib.c **** *
2653:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2654:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set.
2655:Generated_Source\PSoC4/CyLib.c **** *
2656:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2657:Generated_Source\PSoC4/CyLib.c **** void CySysTickInit(void)
2658:Generated_Source\PSoC4/CyLib.c **** {
 2045              		.loc 1 2658 0
 2046              		.cfi_startproc
 2047              		@ args = 0, pretend = 0, frame = 8
 2048              		@ frame_needed = 1, uses_anonymous_args = 0
 2049 0000 80B5     		push	{r7, lr}
 2050              		.cfi_def_cfa_offset 8
 2051              		.cfi_offset 7, -8
 2052              		.cfi_offset 14, -4
 2053 0002 82B0     		sub	sp, sp, #8
 2054              		.cfi_def_cfa_offset 16
 2055 0004 00AF     		add	r7, sp, #0
 2056              		.cfi_def_cfa_register 7
2659:Generated_Source\PSoC4/CyLib.c ****     uint32 i;
2660:Generated_Source\PSoC4/CyLib.c **** 
2661:Generated_Source\PSoC4/CyLib.c ****     for (i = 0u; i<CY_SYS_SYST_NUM_OF_CALLBACKS; i++)
 2057              		.loc 1 2661 0
 2058 0006 0023     		movs	r3, #0
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 84


 2059 0008 7B60     		str	r3, [r7, #4]
 2060 000a 07E0     		b	.L121
 2061              	.L122:
2662:Generated_Source\PSoC4/CyLib.c ****     {
2663:Generated_Source\PSoC4/CyLib.c ****         CySysTickCallbacks[i] = (void *) 0;
 2062              		.loc 1 2663 0 discriminator 3
 2063 000c 104B     		ldr	r3, .L123
 2064 000e 7A68     		ldr	r2, [r7, #4]
 2065 0010 9200     		lsls	r2, r2, #2
 2066 0012 0021     		movs	r1, #0
 2067 0014 D150     		str	r1, [r2, r3]
2661:Generated_Source\PSoC4/CyLib.c ****     {
 2068              		.loc 1 2661 0 discriminator 3
 2069 0016 7B68     		ldr	r3, [r7, #4]
 2070 0018 0133     		adds	r3, r3, #1
 2071 001a 7B60     		str	r3, [r7, #4]
 2072              	.L121:
2661:Generated_Source\PSoC4/CyLib.c ****     {
 2073              		.loc 1 2661 0 is_stmt 0 discriminator 1
 2074 001c 7B68     		ldr	r3, [r7, #4]
 2075 001e 042B     		cmp	r3, #4
 2076 0020 F4D9     		bls	.L122
2664:Generated_Source\PSoC4/CyLib.c ****     }
2665:Generated_Source\PSoC4/CyLib.c **** 
2666:Generated_Source\PSoC4/CyLib.c ****     (void) CyIntSetSysVector(CY_INT_SYSTICK_IRQN, &CySysTickServiceCallbacks);
 2077              		.loc 1 2666 0 is_stmt 1
 2078 0022 0C4B     		ldr	r3, .L123+4
 2079 0024 1900     		movs	r1, r3
 2080 0026 0F20     		movs	r0, #15
 2081 0028 FFF7FEFF 		bl	CyIntSetSysVector
2667:Generated_Source\PSoC4/CyLib.c **** 
2668:Generated_Source\PSoC4/CyLib.c ****     #if(CY_SYSTICK_LFCLK_SOURCE)
2669:Generated_Source\PSoC4/CyLib.c ****         CySysTickSetClockSource(CY_SYS_SYST_CSR_CLK_SRC_SYSCLK);
2670:Generated_Source\PSoC4/CyLib.c ****     #endif /* (CY_SYSTICK_LFCLK_SOURCE) */
2671:Generated_Source\PSoC4/CyLib.c **** 
2672:Generated_Source\PSoC4/CyLib.c ****     CySysTickSetReload(cydelayFreqHz/1000u);
 2082              		.loc 1 2672 0
 2083 002c 0A4B     		ldr	r3, .L123+8
 2084 002e 1A68     		ldr	r2, [r3]
 2085 0030 FA23     		movs	r3, #250
 2086 0032 9900     		lsls	r1, r3, #2
 2087 0034 1000     		movs	r0, r2
 2088 0036 FFF7FEFF 		bl	__aeabi_uidiv
 2089 003a 0300     		movs	r3, r0
 2090 003c 1800     		movs	r0, r3
 2091 003e FFF7FEFF 		bl	CySysTickSetReload
2673:Generated_Source\PSoC4/CyLib.c ****     CySysTickClear();
 2092              		.loc 1 2673 0
 2093 0042 FFF7FEFF 		bl	CySysTickClear
2674:Generated_Source\PSoC4/CyLib.c **** }
 2094              		.loc 1 2674 0
 2095 0046 C046     		nop
 2096 0048 BD46     		mov	sp, r7
 2097 004a 02B0     		add	sp, sp, #8
 2098              		@ sp needed
 2099 004c 80BD     		pop	{r7, pc}
 2100              	.L124:
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 85


 2101 004e C046     		.align	2
 2102              	.L123:
 2103 0050 00000000 		.word	CySysTickCallbacks
 2104 0054 00000000 		.word	CySysTickServiceCallbacks
 2105 0058 00000000 		.word	cydelayFreqHz
 2106              		.cfi_endproc
 2107              	.LFE31:
 2108              		.size	CySysTickInit, .-CySysTickInit
 2109              		.section	.text.CySysTickEnable,"ax",%progbits
 2110              		.align	2
 2111              		.global	CySysTickEnable
 2112              		.code	16
 2113              		.thumb_func
 2114              		.type	CySysTickEnable, %function
 2115              	CySysTickEnable:
 2116              	.LFB32:
2675:Generated_Source\PSoC4/CyLib.c **** 
2676:Generated_Source\PSoC4/CyLib.c **** 
2677:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2678:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickEnable
2679:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2680:Generated_Source\PSoC4/CyLib.c **** *
2681:Generated_Source\PSoC4/CyLib.c **** *  Enables the SysTick timer and its interrupt.
2682:Generated_Source\PSoC4/CyLib.c **** *
2683:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2684:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set
2685:Generated_Source\PSoC4/CyLib.c **** *
2686:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2687:Generated_Source\PSoC4/CyLib.c **** void CySysTickEnable(void)
2688:Generated_Source\PSoC4/CyLib.c **** {
 2117              		.loc 1 2688 0
 2118              		.cfi_startproc
 2119              		@ args = 0, pretend = 0, frame = 0
 2120              		@ frame_needed = 1, uses_anonymous_args = 0
 2121 0000 80B5     		push	{r7, lr}
 2122              		.cfi_def_cfa_offset 8
 2123              		.cfi_offset 7, -8
 2124              		.cfi_offset 14, -4
 2125 0002 00AF     		add	r7, sp, #0
 2126              		.cfi_def_cfa_register 7
2689:Generated_Source\PSoC4/CyLib.c ****     CySysTickEnableInterrupt();
 2127              		.loc 1 2689 0
 2128 0004 FFF7FEFF 		bl	CySysTickEnableInterrupt
2690:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_CSR_REG |= CY_SYS_SYST_CSR_ENABLE;
 2129              		.loc 1 2690 0
 2130 0008 044B     		ldr	r3, .L126
 2131 000a 044A     		ldr	r2, .L126
 2132 000c 1268     		ldr	r2, [r2]
 2133 000e 0121     		movs	r1, #1
 2134 0010 0A43     		orrs	r2, r1
 2135 0012 1A60     		str	r2, [r3]
2691:Generated_Source\PSoC4/CyLib.c **** }
 2136              		.loc 1 2691 0
 2137 0014 C046     		nop
 2138 0016 BD46     		mov	sp, r7
 2139              		@ sp needed
 2140 0018 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 86


 2141              	.L127:
 2142 001a C046     		.align	2
 2143              	.L126:
 2144 001c 10E000E0 		.word	-536813552
 2145              		.cfi_endproc
 2146              	.LFE32:
 2147              		.size	CySysTickEnable, .-CySysTickEnable
 2148              		.section	.text.CySysTickStop,"ax",%progbits
 2149              		.align	2
 2150              		.global	CySysTickStop
 2151              		.code	16
 2152              		.thumb_func
 2153              		.type	CySysTickStop, %function
 2154              	CySysTickStop:
 2155              	.LFB33:
2692:Generated_Source\PSoC4/CyLib.c **** 
2693:Generated_Source\PSoC4/CyLib.c **** 
2694:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2695:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickStop
2696:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2697:Generated_Source\PSoC4/CyLib.c **** *
2698:Generated_Source\PSoC4/CyLib.c **** *  Stops the system timer (SysTick).
2699:Generated_Source\PSoC4/CyLib.c **** *
2700:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2701:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set
2702:Generated_Source\PSoC4/CyLib.c **** *
2703:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2704:Generated_Source\PSoC4/CyLib.c **** void CySysTickStop(void)
2705:Generated_Source\PSoC4/CyLib.c **** {
 2156              		.loc 1 2705 0
 2157              		.cfi_startproc
 2158              		@ args = 0, pretend = 0, frame = 0
 2159              		@ frame_needed = 1, uses_anonymous_args = 0
 2160 0000 80B5     		push	{r7, lr}
 2161              		.cfi_def_cfa_offset 8
 2162              		.cfi_offset 7, -8
 2163              		.cfi_offset 14, -4
 2164 0002 00AF     		add	r7, sp, #0
 2165              		.cfi_def_cfa_register 7
2706:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_CSR_REG &= ((uint32) ~(CY_SYS_SYST_CSR_ENABLE));
 2166              		.loc 1 2706 0
 2167 0004 044B     		ldr	r3, .L129
 2168 0006 044A     		ldr	r2, .L129
 2169 0008 1268     		ldr	r2, [r2]
 2170 000a 0121     		movs	r1, #1
 2171 000c 8A43     		bics	r2, r1
 2172 000e 1A60     		str	r2, [r3]
2707:Generated_Source\PSoC4/CyLib.c **** }
 2173              		.loc 1 2707 0
 2174 0010 C046     		nop
 2175 0012 BD46     		mov	sp, r7
 2176              		@ sp needed
 2177 0014 80BD     		pop	{r7, pc}
 2178              	.L130:
 2179 0016 C046     		.align	2
 2180              	.L129:
 2181 0018 10E000E0 		.word	-536813552
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 87


 2182              		.cfi_endproc
 2183              	.LFE33:
 2184              		.size	CySysTickStop, .-CySysTickStop
 2185              		.section	.text.CySysTickEnableInterrupt,"ax",%progbits
 2186              		.align	2
 2187              		.global	CySysTickEnableInterrupt
 2188              		.code	16
 2189              		.thumb_func
 2190              		.type	CySysTickEnableInterrupt, %function
 2191              	CySysTickEnableInterrupt:
 2192              	.LFB34:
2708:Generated_Source\PSoC4/CyLib.c **** 
2709:Generated_Source\PSoC4/CyLib.c **** 
2710:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2711:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickEnableInterrupt
2712:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2713:Generated_Source\PSoC4/CyLib.c **** *
2714:Generated_Source\PSoC4/CyLib.c **** *  Enables the SysTick interrupt.
2715:Generated_Source\PSoC4/CyLib.c **** *
2716:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2717:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set
2718:Generated_Source\PSoC4/CyLib.c **** *
2719:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2720:Generated_Source\PSoC4/CyLib.c **** void CySysTickEnableInterrupt(void)
2721:Generated_Source\PSoC4/CyLib.c **** {
 2193              		.loc 1 2721 0
 2194              		.cfi_startproc
 2195              		@ args = 0, pretend = 0, frame = 0
 2196              		@ frame_needed = 1, uses_anonymous_args = 0
 2197 0000 80B5     		push	{r7, lr}
 2198              		.cfi_def_cfa_offset 8
 2199              		.cfi_offset 7, -8
 2200              		.cfi_offset 14, -4
 2201 0002 00AF     		add	r7, sp, #0
 2202              		.cfi_def_cfa_register 7
2722:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_CSR_REG |= CY_SYS_SYST_CSR_ENABLE_INT;
 2203              		.loc 1 2722 0
 2204 0004 044B     		ldr	r3, .L132
 2205 0006 044A     		ldr	r2, .L132
 2206 0008 1268     		ldr	r2, [r2]
 2207 000a 0221     		movs	r1, #2
 2208 000c 0A43     		orrs	r2, r1
 2209 000e 1A60     		str	r2, [r3]
2723:Generated_Source\PSoC4/CyLib.c **** }
 2210              		.loc 1 2723 0
 2211 0010 C046     		nop
 2212 0012 BD46     		mov	sp, r7
 2213              		@ sp needed
 2214 0014 80BD     		pop	{r7, pc}
 2215              	.L133:
 2216 0016 C046     		.align	2
 2217              	.L132:
 2218 0018 10E000E0 		.word	-536813552
 2219              		.cfi_endproc
 2220              	.LFE34:
 2221              		.size	CySysTickEnableInterrupt, .-CySysTickEnableInterrupt
 2222              		.section	.text.CySysTickDisableInterrupt,"ax",%progbits
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 88


 2223              		.align	2
 2224              		.global	CySysTickDisableInterrupt
 2225              		.code	16
 2226              		.thumb_func
 2227              		.type	CySysTickDisableInterrupt, %function
 2228              	CySysTickDisableInterrupt:
 2229              	.LFB35:
2724:Generated_Source\PSoC4/CyLib.c **** 
2725:Generated_Source\PSoC4/CyLib.c **** 
2726:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2727:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickDisableInterrupt
2728:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2729:Generated_Source\PSoC4/CyLib.c **** *
2730:Generated_Source\PSoC4/CyLib.c **** *  Disables the SysTick interrupt.
2731:Generated_Source\PSoC4/CyLib.c **** *
2732:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2733:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set
2734:Generated_Source\PSoC4/CyLib.c **** *
2735:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2736:Generated_Source\PSoC4/CyLib.c **** void CySysTickDisableInterrupt(void)
2737:Generated_Source\PSoC4/CyLib.c **** {
 2230              		.loc 1 2737 0
 2231              		.cfi_startproc
 2232              		@ args = 0, pretend = 0, frame = 0
 2233              		@ frame_needed = 1, uses_anonymous_args = 0
 2234 0000 80B5     		push	{r7, lr}
 2235              		.cfi_def_cfa_offset 8
 2236              		.cfi_offset 7, -8
 2237              		.cfi_offset 14, -4
 2238 0002 00AF     		add	r7, sp, #0
 2239              		.cfi_def_cfa_register 7
2738:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_CSR_REG &= ((uint32) ~(CY_SYS_SYST_CSR_ENABLE_INT));
 2240              		.loc 1 2738 0
 2241 0004 044B     		ldr	r3, .L135
 2242 0006 044A     		ldr	r2, .L135
 2243 0008 1268     		ldr	r2, [r2]
 2244 000a 0221     		movs	r1, #2
 2245 000c 8A43     		bics	r2, r1
 2246 000e 1A60     		str	r2, [r3]
2739:Generated_Source\PSoC4/CyLib.c **** }
 2247              		.loc 1 2739 0
 2248 0010 C046     		nop
 2249 0012 BD46     		mov	sp, r7
 2250              		@ sp needed
 2251 0014 80BD     		pop	{r7, pc}
 2252              	.L136:
 2253 0016 C046     		.align	2
 2254              	.L135:
 2255 0018 10E000E0 		.word	-536813552
 2256              		.cfi_endproc
 2257              	.LFE35:
 2258              		.size	CySysTickDisableInterrupt, .-CySysTickDisableInterrupt
 2259              		.section	.text.CySysTickSetReload,"ax",%progbits
 2260              		.align	2
 2261              		.global	CySysTickSetReload
 2262              		.code	16
 2263              		.thumb_func
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 89


 2264              		.type	CySysTickSetReload, %function
 2265              	CySysTickSetReload:
 2266              	.LFB36:
2740:Generated_Source\PSoC4/CyLib.c **** 
2741:Generated_Source\PSoC4/CyLib.c **** 
2742:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2743:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickSetReload
2744:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2745:Generated_Source\PSoC4/CyLib.c **** *
2746:Generated_Source\PSoC4/CyLib.c **** *  Sets value the counter is set to on startup and after it reaches zero. This
2747:Generated_Source\PSoC4/CyLib.c **** *  function do not change or reset current sysTick counter value, so it should
2748:Generated_Source\PSoC4/CyLib.c **** *  be cleared using CySysTickClear() API.
2749:Generated_Source\PSoC4/CyLib.c **** *
2750:Generated_Source\PSoC4/CyLib.c **** *  \param value: Valid range [0x0-0x00FFFFFF]. Counter reset value
2751:Generated_Source\PSoC4/CyLib.c **** *
2752:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2753:Generated_Source\PSoC4/CyLib.c **** void CySysTickSetReload(uint32 value)
2754:Generated_Source\PSoC4/CyLib.c **** {
 2267              		.loc 1 2754 0
 2268              		.cfi_startproc
 2269              		@ args = 0, pretend = 0, frame = 8
 2270              		@ frame_needed = 1, uses_anonymous_args = 0
 2271 0000 80B5     		push	{r7, lr}
 2272              		.cfi_def_cfa_offset 8
 2273              		.cfi_offset 7, -8
 2274              		.cfi_offset 14, -4
 2275 0002 82B0     		sub	sp, sp, #8
 2276              		.cfi_def_cfa_offset 16
 2277 0004 00AF     		add	r7, sp, #0
 2278              		.cfi_def_cfa_register 7
 2279 0006 7860     		str	r0, [r7, #4]
2755:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_RVR_REG = (value & CY_SYS_SYST_RVR_CNT_MASK);
 2280              		.loc 1 2755 0
 2281 0008 044B     		ldr	r3, .L138
 2282 000a 7A68     		ldr	r2, [r7, #4]
 2283 000c 1202     		lsls	r2, r2, #8
 2284 000e 120A     		lsrs	r2, r2, #8
 2285 0010 1A60     		str	r2, [r3]
2756:Generated_Source\PSoC4/CyLib.c **** }
 2286              		.loc 1 2756 0
 2287 0012 C046     		nop
 2288 0014 BD46     		mov	sp, r7
 2289 0016 02B0     		add	sp, sp, #8
 2290              		@ sp needed
 2291 0018 80BD     		pop	{r7, pc}
 2292              	.L139:
 2293 001a C046     		.align	2
 2294              	.L138:
 2295 001c 14E000E0 		.word	-536813548
 2296              		.cfi_endproc
 2297              	.LFE36:
 2298              		.size	CySysTickSetReload, .-CySysTickSetReload
 2299              		.section	.text.CySysTickGetReload,"ax",%progbits
 2300              		.align	2
 2301              		.global	CySysTickGetReload
 2302              		.code	16
 2303              		.thumb_func
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 90


 2304              		.type	CySysTickGetReload, %function
 2305              	CySysTickGetReload:
 2306              	.LFB37:
2757:Generated_Source\PSoC4/CyLib.c **** 
2758:Generated_Source\PSoC4/CyLib.c **** 
2759:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2760:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickGetReload
2761:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2762:Generated_Source\PSoC4/CyLib.c **** *
2763:Generated_Source\PSoC4/CyLib.c **** *  Gets value the counter is set to on startup and after it reaches zero.
2764:Generated_Source\PSoC4/CyLib.c **** *
2765:Generated_Source\PSoC4/CyLib.c **** * \return
2766:Generated_Source\PSoC4/CyLib.c **** *  Counter reset value.
2767:Generated_Source\PSoC4/CyLib.c **** *
2768:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2769:Generated_Source\PSoC4/CyLib.c **** uint32 CySysTickGetReload(void)
2770:Generated_Source\PSoC4/CyLib.c **** {
 2307              		.loc 1 2770 0
 2308              		.cfi_startproc
 2309              		@ args = 0, pretend = 0, frame = 0
 2310              		@ frame_needed = 1, uses_anonymous_args = 0
 2311 0000 80B5     		push	{r7, lr}
 2312              		.cfi_def_cfa_offset 8
 2313              		.cfi_offset 7, -8
 2314              		.cfi_offset 14, -4
 2315 0002 00AF     		add	r7, sp, #0
 2316              		.cfi_def_cfa_register 7
2771:Generated_Source\PSoC4/CyLib.c ****     return(CY_SYS_SYST_RVR_REG & CY_SYS_SYST_RVR_CNT_MASK);
 2317              		.loc 1 2771 0
 2318 0004 034B     		ldr	r3, .L142
 2319 0006 1B68     		ldr	r3, [r3]
 2320 0008 1B02     		lsls	r3, r3, #8
 2321 000a 1B0A     		lsrs	r3, r3, #8
2772:Generated_Source\PSoC4/CyLib.c **** }
 2322              		.loc 1 2772 0
 2323 000c 1800     		movs	r0, r3
 2324 000e BD46     		mov	sp, r7
 2325              		@ sp needed
 2326 0010 80BD     		pop	{r7, pc}
 2327              	.L143:
 2328 0012 C046     		.align	2
 2329              	.L142:
 2330 0014 14E000E0 		.word	-536813548
 2331              		.cfi_endproc
 2332              	.LFE37:
 2333              		.size	CySysTickGetReload, .-CySysTickGetReload
 2334              		.section	.text.CySysTickGetValue,"ax",%progbits
 2335              		.align	2
 2336              		.global	CySysTickGetValue
 2337              		.code	16
 2338              		.thumb_func
 2339              		.type	CySysTickGetValue, %function
 2340              	CySysTickGetValue:
 2341              	.LFB38:
2773:Generated_Source\PSoC4/CyLib.c **** 
2774:Generated_Source\PSoC4/CyLib.c **** 
2775:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 91


2776:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickGetValue
2777:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2778:Generated_Source\PSoC4/CyLib.c **** *
2779:Generated_Source\PSoC4/CyLib.c **** *  Gets current SysTick counter value.
2780:Generated_Source\PSoC4/CyLib.c **** *
2781:Generated_Source\PSoC4/CyLib.c **** * \return
2782:Generated_Source\PSoC4/CyLib.c **** *  Current SysTick counter value
2783:Generated_Source\PSoC4/CyLib.c **** *
2784:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2785:Generated_Source\PSoC4/CyLib.c **** uint32 CySysTickGetValue(void)
2786:Generated_Source\PSoC4/CyLib.c **** {
 2342              		.loc 1 2786 0
 2343              		.cfi_startproc
 2344              		@ args = 0, pretend = 0, frame = 0
 2345              		@ frame_needed = 1, uses_anonymous_args = 0
 2346 0000 80B5     		push	{r7, lr}
 2347              		.cfi_def_cfa_offset 8
 2348              		.cfi_offset 7, -8
 2349              		.cfi_offset 14, -4
 2350 0002 00AF     		add	r7, sp, #0
 2351              		.cfi_def_cfa_register 7
2787:Generated_Source\PSoC4/CyLib.c ****     return(CY_SYS_SYST_CVR_REG & CY_SYS_SYST_CVR_CNT_MASK);
 2352              		.loc 1 2787 0
 2353 0004 034B     		ldr	r3, .L146
 2354 0006 1B68     		ldr	r3, [r3]
 2355 0008 1B02     		lsls	r3, r3, #8
 2356 000a 1B0A     		lsrs	r3, r3, #8
2788:Generated_Source\PSoC4/CyLib.c **** }
 2357              		.loc 1 2788 0
 2358 000c 1800     		movs	r0, r3
 2359 000e BD46     		mov	sp, r7
 2360              		@ sp needed
 2361 0010 80BD     		pop	{r7, pc}
 2362              	.L147:
 2363 0012 C046     		.align	2
 2364              	.L146:
 2365 0014 18E000E0 		.word	-536813544
 2366              		.cfi_endproc
 2367              	.LFE38:
 2368              		.size	CySysTickGetValue, .-CySysTickGetValue
 2369              		.section	.text.CySysTickGetCountFlag,"ax",%progbits
 2370              		.align	2
 2371              		.global	CySysTickGetCountFlag
 2372              		.code	16
 2373              		.thumb_func
 2374              		.type	CySysTickGetCountFlag, %function
 2375              	CySysTickGetCountFlag:
 2376              	.LFB39:
2789:Generated_Source\PSoC4/CyLib.c **** 
2790:Generated_Source\PSoC4/CyLib.c **** 
2791:Generated_Source\PSoC4/CyLib.c **** #if(CY_SYSTICK_LFCLK_SOURCE)
2792:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2793:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysTickSetClockSource
2794:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2795:Generated_Source\PSoC4/CyLib.c ****     *
2796:Generated_Source\PSoC4/CyLib.c ****     *  Sets the clock source for the SysTick counter.
2797:Generated_Source\PSoC4/CyLib.c ****     *
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 92


2798:Generated_Source\PSoC4/CyLib.c ****     *  Clears SysTick count flag if it was set. If clock source is not ready this
2799:Generated_Source\PSoC4/CyLib.c ****     *  function call will have no effect. After changing clock source to the low
2800:Generated_Source\PSoC4/CyLib.c ****     *  frequency clock the counter and reload register values will remain unchanged
2801:Generated_Source\PSoC4/CyLib.c ****     *  so time to the interrupt will be significantly longer and vice versa.
2802:Generated_Source\PSoC4/CyLib.c ****     *
2803:Generated_Source\PSoC4/CyLib.c ****     *  The changing of SysTick clock source and\or its frequency will change 
2804:Generated_Source\PSoC4/CyLib.c ****     *  the interrupt interval and that CySysTickSetReload() should be 
2805:Generated_Source\PSoC4/CyLib.c ****     *  called to compensate this change.    
2806:Generated_Source\PSoC4/CyLib.c ****     *
2807:Generated_Source\PSoC4/CyLib.c ****     *  The function is not available on PSoC 4000, PSoC 4100, and PSoC 42000
2808:Generated_Source\PSoC4/CyLib.c ****     *  devices. The SysTick timer clocked by the System clock on these devices.
2809:Generated_Source\PSoC4/CyLib.c ****     *
2810:Generated_Source\PSoC4/CyLib.c ****     *  \param clockSource Clock source for SysTick counter
2811:Generated_Source\PSoC4/CyLib.c ****     *         Define                     Clock Source
2812:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_SYST_CSR_CLK_SRC_SYSCLK     SysTick is clocked by the CPU clock.
2813:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_SYST_CSR_CLK_SRC_LFCLK      SysTick is clocked by the low frequency
2814:Generated_Source\PSoC4/CyLib.c ****     *                                      clock. (ILO 100 KHz for PSoC 5LP, and
2815:Generated_Source\PSoC4/CyLib.c ****     *                                      LFCLK for PSoC 4).
2816:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2817:Generated_Source\PSoC4/CyLib.c ****     void CySysTickSetClockSource(uint32 clockSource)
2818:Generated_Source\PSoC4/CyLib.c ****     {
2819:Generated_Source\PSoC4/CyLib.c ****         if (clockSource == CY_SYS_SYST_CSR_CLK_SRC_SYSCLK)
2820:Generated_Source\PSoC4/CyLib.c ****         {
2821:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_SYST_CSR_REG |= (uint32)(CY_SYS_SYST_CSR_CLK_SRC_SYSCLK << CY_SYS_SYST_CSR_CLK_S
2822:Generated_Source\PSoC4/CyLib.c ****         }
2823:Generated_Source\PSoC4/CyLib.c ****         else
2824:Generated_Source\PSoC4/CyLib.c ****         {
2825:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_SYST_CSR_REG &= ((uint32) ~((uint32)(CY_SYS_SYST_CSR_CLK_SRC_SYSCLK << CY_SYS_SY
2826:Generated_Source\PSoC4/CyLib.c ****         }
2827:Generated_Source\PSoC4/CyLib.c ****     }
2828:Generated_Source\PSoC4/CyLib.c **** 
2829:Generated_Source\PSoC4/CyLib.c ****     
2830:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2831:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysTickGetClockSource
2832:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2833:Generated_Source\PSoC4/CyLib.c ****     *
2834:Generated_Source\PSoC4/CyLib.c ****     *  Returns the current clock source of the SysTick counter.
2835:Generated_Source\PSoC4/CyLib.c ****     *
2836:Generated_Source\PSoC4/CyLib.c ****     *  \return 
2837:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_SYST_CSR_CLK_SRC_SYSCLK     SysTick is clocked by CPU clock.
2838:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_SYST_CSR_CLK_SRC_LFCLK      SysTick is clocked by the low frequency
2839:Generated_Source\PSoC4/CyLib.c ****     *                                      clock. (ILO 100 KHz for PSoC 5LP, and
2840:Generated_Source\PSoC4/CyLib.c ****     *                                      LFCLK for PSoC 4).
2841:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2842:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysTickGetClockSource(void)
2843:Generated_Source\PSoC4/CyLib.c ****     {
2844:Generated_Source\PSoC4/CyLib.c ****         return ((CY_SYS_SYST_CSR_REG >> CY_SYS_SYST_CSR_CLK_SOURCE_SHIFT) & CY_SYS_SYST_CSR_CLK_SRC
2845:Generated_Source\PSoC4/CyLib.c ****     }
2846:Generated_Source\PSoC4/CyLib.c ****     
2847:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_SYSTICK_LFCLK_SOURCE) */
2848:Generated_Source\PSoC4/CyLib.c **** 
2849:Generated_Source\PSoC4/CyLib.c **** 
2850:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2851:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickGetCountFlag
2852:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2853:Generated_Source\PSoC4/CyLib.c **** *
2854:Generated_Source\PSoC4/CyLib.c **** *  The count flag is set once SysTick counter reaches zero.
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 93


2855:Generated_Source\PSoC4/CyLib.c **** *  The flag cleared on read.
2856:Generated_Source\PSoC4/CyLib.c **** *
2857:Generated_Source\PSoC4/CyLib.c **** * \return
2858:Generated_Source\PSoC4/CyLib.c ****     *  Returns non-zero value if flag is set, otherwise zero is returned.
2859:Generated_Source\PSoC4/CyLib.c **** *
2860:Generated_Source\PSoC4/CyLib.c **** *
2861:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2862:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set.
2863:Generated_Source\PSoC4/CyLib.c **** *
2864:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2865:Generated_Source\PSoC4/CyLib.c **** uint32 CySysTickGetCountFlag(void)
2866:Generated_Source\PSoC4/CyLib.c **** {
 2377              		.loc 1 2866 0
 2378              		.cfi_startproc
 2379              		@ args = 0, pretend = 0, frame = 0
 2380              		@ frame_needed = 1, uses_anonymous_args = 0
 2381 0000 80B5     		push	{r7, lr}
 2382              		.cfi_def_cfa_offset 8
 2383              		.cfi_offset 7, -8
 2384              		.cfi_offset 14, -4
 2385 0002 00AF     		add	r7, sp, #0
 2386              		.cfi_def_cfa_register 7
2867:Generated_Source\PSoC4/CyLib.c ****     return ((CY_SYS_SYST_CSR_REG >> CY_SYS_SYST_CSR_COUNTFLAG_SHIFT) & 0x01u);
 2387              		.loc 1 2867 0
 2388 0004 034B     		ldr	r3, .L150
 2389 0006 1B68     		ldr	r3, [r3]
 2390 0008 1B0C     		lsrs	r3, r3, #16
 2391 000a 0122     		movs	r2, #1
 2392 000c 1340     		ands	r3, r2
2868:Generated_Source\PSoC4/CyLib.c **** }
 2393              		.loc 1 2868 0
 2394 000e 1800     		movs	r0, r3
 2395 0010 BD46     		mov	sp, r7
 2396              		@ sp needed
 2397 0012 80BD     		pop	{r7, pc}
 2398              	.L151:
 2399              		.align	2
 2400              	.L150:
 2401 0014 10E000E0 		.word	-536813552
 2402              		.cfi_endproc
 2403              	.LFE39:
 2404              		.size	CySysTickGetCountFlag, .-CySysTickGetCountFlag
 2405              		.section	.text.CySysTickClear,"ax",%progbits
 2406              		.align	2
 2407              		.global	CySysTickClear
 2408              		.code	16
 2409              		.thumb_func
 2410              		.type	CySysTickClear, %function
 2411              	CySysTickClear:
 2412              	.LFB40:
2869:Generated_Source\PSoC4/CyLib.c **** 
2870:Generated_Source\PSoC4/CyLib.c **** 
2871:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2872:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickClear
2873:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2874:Generated_Source\PSoC4/CyLib.c **** *
2875:Generated_Source\PSoC4/CyLib.c **** *  Clears the SysTick counter for well-defined startup.
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 94


2876:Generated_Source\PSoC4/CyLib.c **** *
2877:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2878:Generated_Source\PSoC4/CyLib.c **** void CySysTickClear(void)
2879:Generated_Source\PSoC4/CyLib.c **** {
 2413              		.loc 1 2879 0
 2414              		.cfi_startproc
 2415              		@ args = 0, pretend = 0, frame = 0
 2416              		@ frame_needed = 1, uses_anonymous_args = 0
 2417 0000 80B5     		push	{r7, lr}
 2418              		.cfi_def_cfa_offset 8
 2419              		.cfi_offset 7, -8
 2420              		.cfi_offset 14, -4
 2421 0002 00AF     		add	r7, sp, #0
 2422              		.cfi_def_cfa_register 7
2880:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_CVR_REG = 0u;
 2423              		.loc 1 2880 0
 2424 0004 024B     		ldr	r3, .L153
 2425 0006 0022     		movs	r2, #0
 2426 0008 1A60     		str	r2, [r3]
2881:Generated_Source\PSoC4/CyLib.c **** }
 2427              		.loc 1 2881 0
 2428 000a C046     		nop
 2429 000c BD46     		mov	sp, r7
 2430              		@ sp needed
 2431 000e 80BD     		pop	{r7, pc}
 2432              	.L154:
 2433              		.align	2
 2434              	.L153:
 2435 0010 18E000E0 		.word	-536813544
 2436              		.cfi_endproc
 2437              	.LFE40:
 2438              		.size	CySysTickClear, .-CySysTickClear
 2439              		.section	.text.CySysTickSetCallback,"ax",%progbits
 2440              		.align	2
 2441              		.global	CySysTickSetCallback
 2442              		.code	16
 2443              		.thumb_func
 2444              		.type	CySysTickSetCallback, %function
 2445              	CySysTickSetCallback:
 2446              	.LFB41:
2882:Generated_Source\PSoC4/CyLib.c **** 
2883:Generated_Source\PSoC4/CyLib.c **** 
2884:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2885:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickSetCallback
2886:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2887:Generated_Source\PSoC4/CyLib.c **** *
2888:Generated_Source\PSoC4/CyLib.c **** *  This function allows up to five user-defined interrupt service routine
2889:Generated_Source\PSoC4/CyLib.c **** *  functions to be associated with the SysTick interrupt. These are specified
2890:Generated_Source\PSoC4/CyLib.c **** *  through the use of pointers to the function.
2891:Generated_Source\PSoC4/CyLib.c **** *
2892:Generated_Source\PSoC4/CyLib.c **** *  To set a custom callback function without the overhead of the system provided
2893:Generated_Source\PSoC4/CyLib.c **** *  one, use CyIntSetSysVector(CY_INT_SYSTICK_IRQN, cyisraddress <address>),
2894:Generated_Source\PSoC4/CyLib.c **** *  where <address> is address of the custom defined interrupt service routine.
2895:Generated_Source\PSoC4/CyLib.c **** *  Note: a custom callback function overrides the system defined callback
2896:Generated_Source\PSoC4/CyLib.c **** *  functions.
2897:Generated_Source\PSoC4/CyLib.c **** *
2898:Generated_Source\PSoC4/CyLib.c **** *  \param number: The number of the callback function addresses to be set. The valid
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 95


2899:Generated_Source\PSoC4/CyLib.c **** *          range is from 0 to 4.
2900:Generated_Source\PSoC4/CyLib.c **** *
2901:Generated_Source\PSoC4/CyLib.c **** *  void(*CallbackFunction(void): A pointer to the function that will be
2902:Generated_Source\PSoC4/CyLib.c **** *                                associated with the SysTick ISR for the
2903:Generated_Source\PSoC4/CyLib.c **** *                                specified number.
2904:Generated_Source\PSoC4/CyLib.c **** *
2905:Generated_Source\PSoC4/CyLib.c **** * \return
2906:Generated_Source\PSoC4/CyLib.c **** *  Returns the address of the previous callback function.
2907:Generated_Source\PSoC4/CyLib.c **** *  The NULL is returned if the specified address in not set.
2908:Generated_Source\PSoC4/CyLib.c **** *
2909:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2910:Generated_Source\PSoC4/CyLib.c **** *  The registered callback functions will be executed in the interrupt.
2911:Generated_Source\PSoC4/CyLib.c **** *
2912:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2913:Generated_Source\PSoC4/CyLib.c **** cySysTickCallback CySysTickSetCallback(uint32 number, cySysTickCallback function)
2914:Generated_Source\PSoC4/CyLib.c **** {
 2447              		.loc 1 2914 0
 2448              		.cfi_startproc
 2449              		@ args = 0, pretend = 0, frame = 16
 2450              		@ frame_needed = 1, uses_anonymous_args = 0
 2451 0000 80B5     		push	{r7, lr}
 2452              		.cfi_def_cfa_offset 8
 2453              		.cfi_offset 7, -8
 2454              		.cfi_offset 14, -4
 2455 0002 84B0     		sub	sp, sp, #16
 2456              		.cfi_def_cfa_offset 24
 2457 0004 00AF     		add	r7, sp, #0
 2458              		.cfi_def_cfa_register 7
 2459 0006 7860     		str	r0, [r7, #4]
 2460 0008 3960     		str	r1, [r7]
2915:Generated_Source\PSoC4/CyLib.c ****     cySysTickCallback retVal;
2916:Generated_Source\PSoC4/CyLib.c **** 
2917:Generated_Source\PSoC4/CyLib.c ****     retVal = CySysTickCallbacks[number];
 2461              		.loc 1 2917 0
 2462 000a 074B     		ldr	r3, .L157
 2463 000c 7A68     		ldr	r2, [r7, #4]
 2464 000e 9200     		lsls	r2, r2, #2
 2465 0010 D358     		ldr	r3, [r2, r3]
 2466 0012 FB60     		str	r3, [r7, #12]
2918:Generated_Source\PSoC4/CyLib.c ****     CySysTickCallbacks[number] = function;
 2467              		.loc 1 2918 0
 2468 0014 044B     		ldr	r3, .L157
 2469 0016 7A68     		ldr	r2, [r7, #4]
 2470 0018 9200     		lsls	r2, r2, #2
 2471 001a 3968     		ldr	r1, [r7]
 2472 001c D150     		str	r1, [r2, r3]
2919:Generated_Source\PSoC4/CyLib.c ****     return (retVal);
 2473              		.loc 1 2919 0
 2474 001e FB68     		ldr	r3, [r7, #12]
2920:Generated_Source\PSoC4/CyLib.c **** }
 2475              		.loc 1 2920 0
 2476 0020 1800     		movs	r0, r3
 2477 0022 BD46     		mov	sp, r7
 2478 0024 04B0     		add	sp, sp, #16
 2479              		@ sp needed
 2480 0026 80BD     		pop	{r7, pc}
 2481              	.L158:
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 96


 2482              		.align	2
 2483              	.L157:
 2484 0028 00000000 		.word	CySysTickCallbacks
 2485              		.cfi_endproc
 2486              	.LFE41:
 2487              		.size	CySysTickSetCallback, .-CySysTickSetCallback
 2488              		.section	.text.CySysTickGetCallback,"ax",%progbits
 2489              		.align	2
 2490              		.global	CySysTickGetCallback
 2491              		.code	16
 2492              		.thumb_func
 2493              		.type	CySysTickGetCallback, %function
 2494              	CySysTickGetCallback:
 2495              	.LFB42:
2921:Generated_Source\PSoC4/CyLib.c **** 
2922:Generated_Source\PSoC4/CyLib.c **** 
2923:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2924:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickGetCallback
2925:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2926:Generated_Source\PSoC4/CyLib.c **** *
2927:Generated_Source\PSoC4/CyLib.c **** *  The function get the specified callback pointer.
2928:Generated_Source\PSoC4/CyLib.c **** *
2929:Generated_Source\PSoC4/CyLib.c **** *  \param number: The number of callback function address to get. The valid
2930:Generated_Source\PSoC4/CyLib.c **** *          range is from 0 to 4.
2931:Generated_Source\PSoC4/CyLib.c **** *
2932:Generated_Source\PSoC4/CyLib.c **** * \return
2933:Generated_Source\PSoC4/CyLib.c **** *  Returns the address of the specified callback function.
2934:Generated_Source\PSoC4/CyLib.c **** *  The NULL is returned if the specified address in not initialized.
2935:Generated_Source\PSoC4/CyLib.c **** *
2936:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2937:Generated_Source\PSoC4/CyLib.c **** cySysTickCallback CySysTickGetCallback(uint32 number)
2938:Generated_Source\PSoC4/CyLib.c **** {
 2496              		.loc 1 2938 0
 2497              		.cfi_startproc
 2498              		@ args = 0, pretend = 0, frame = 8
 2499              		@ frame_needed = 1, uses_anonymous_args = 0
 2500 0000 80B5     		push	{r7, lr}
 2501              		.cfi_def_cfa_offset 8
 2502              		.cfi_offset 7, -8
 2503              		.cfi_offset 14, -4
 2504 0002 82B0     		sub	sp, sp, #8
 2505              		.cfi_def_cfa_offset 16
 2506 0004 00AF     		add	r7, sp, #0
 2507              		.cfi_def_cfa_register 7
 2508 0006 7860     		str	r0, [r7, #4]
2939:Generated_Source\PSoC4/CyLib.c ****     return ((cySysTickCallback) CySysTickCallbacks[number]);
 2509              		.loc 1 2939 0
 2510 0008 034B     		ldr	r3, .L161
 2511 000a 7A68     		ldr	r2, [r7, #4]
 2512 000c 9200     		lsls	r2, r2, #2
 2513 000e D358     		ldr	r3, [r2, r3]
2940:Generated_Source\PSoC4/CyLib.c **** }
 2514              		.loc 1 2940 0
 2515 0010 1800     		movs	r0, r3
 2516 0012 BD46     		mov	sp, r7
 2517 0014 02B0     		add	sp, sp, #8
 2518              		@ sp needed
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 97


 2519 0016 80BD     		pop	{r7, pc}
 2520              	.L162:
 2521              		.align	2
 2522              	.L161:
 2523 0018 00000000 		.word	CySysTickCallbacks
 2524              		.cfi_endproc
 2525              	.LFE42:
 2526              		.size	CySysTickGetCallback, .-CySysTickGetCallback
 2527              		.section	.text.CySysTickServiceCallbacks,"ax",%progbits
 2528              		.align	2
 2529              		.code	16
 2530              		.thumb_func
 2531              		.type	CySysTickServiceCallbacks, %function
 2532              	CySysTickServiceCallbacks:
 2533              	.LFB43:
2941:Generated_Source\PSoC4/CyLib.c **** 
2942:Generated_Source\PSoC4/CyLib.c **** 
2943:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2944:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickServiceCallbacks
2945:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2946:Generated_Source\PSoC4/CyLib.c **** *
2947:Generated_Source\PSoC4/CyLib.c **** *  System Tick timer interrupt routine
2948:Generated_Source\PSoC4/CyLib.c **** *
2949:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2950:Generated_Source\PSoC4/CyLib.c **** static void CySysTickServiceCallbacks(void)
2951:Generated_Source\PSoC4/CyLib.c **** {
 2534              		.loc 1 2951 0
 2535              		.cfi_startproc
 2536              		@ args = 0, pretend = 0, frame = 8
 2537              		@ frame_needed = 1, uses_anonymous_args = 0
 2538 0000 80B5     		push	{r7, lr}
 2539              		.cfi_def_cfa_offset 8
 2540              		.cfi_offset 7, -8
 2541              		.cfi_offset 14, -4
 2542 0002 82B0     		sub	sp, sp, #8
 2543              		.cfi_def_cfa_offset 16
 2544 0004 00AF     		add	r7, sp, #0
 2545              		.cfi_def_cfa_register 7
2952:Generated_Source\PSoC4/CyLib.c ****     uint32 i;
2953:Generated_Source\PSoC4/CyLib.c **** 
2954:Generated_Source\PSoC4/CyLib.c ****     /* Verify that tick timer flag was set */
2955:Generated_Source\PSoC4/CyLib.c ****     if (1u == CySysTickGetCountFlag())
 2546              		.loc 1 2955 0
 2547 0006 FFF7FEFF 		bl	CySysTickGetCountFlag
 2548 000a 0300     		movs	r3, r0
 2549 000c 012B     		cmp	r3, #1
 2550 000e 13D1     		bne	.L168
2956:Generated_Source\PSoC4/CyLib.c ****     {
2957:Generated_Source\PSoC4/CyLib.c ****         for (i=0u; i < CY_SYS_SYST_NUM_OF_CALLBACKS; i++)
 2551              		.loc 1 2957 0
 2552 0010 0023     		movs	r3, #0
 2553 0012 7B60     		str	r3, [r7, #4]
 2554 0014 0DE0     		b	.L165
 2555              	.L167:
2958:Generated_Source\PSoC4/CyLib.c ****         {
2959:Generated_Source\PSoC4/CyLib.c ****             if (CySysTickCallbacks[i] != (void *) 0)
 2556              		.loc 1 2959 0
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 98


 2557 0016 0A4B     		ldr	r3, .L169
 2558 0018 7A68     		ldr	r2, [r7, #4]
 2559 001a 9200     		lsls	r2, r2, #2
 2560 001c D358     		ldr	r3, [r2, r3]
 2561 001e 002B     		cmp	r3, #0
 2562 0020 04D0     		beq	.L166
2960:Generated_Source\PSoC4/CyLib.c ****             {
2961:Generated_Source\PSoC4/CyLib.c ****                 (void)(CySysTickCallbacks[i])();
 2563              		.loc 1 2961 0
 2564 0022 074B     		ldr	r3, .L169
 2565 0024 7A68     		ldr	r2, [r7, #4]
 2566 0026 9200     		lsls	r2, r2, #2
 2567 0028 D358     		ldr	r3, [r2, r3]
 2568 002a 9847     		blx	r3
 2569              	.L166:
2957:Generated_Source\PSoC4/CyLib.c ****         {
 2570              		.loc 1 2957 0 discriminator 2
 2571 002c 7B68     		ldr	r3, [r7, #4]
 2572 002e 0133     		adds	r3, r3, #1
 2573 0030 7B60     		str	r3, [r7, #4]
 2574              	.L165:
2957:Generated_Source\PSoC4/CyLib.c ****         {
 2575              		.loc 1 2957 0 is_stmt 0 discriminator 1
 2576 0032 7B68     		ldr	r3, [r7, #4]
 2577 0034 042B     		cmp	r3, #4
 2578 0036 EED9     		bls	.L167
 2579              	.L168:
2962:Generated_Source\PSoC4/CyLib.c ****             }
2963:Generated_Source\PSoC4/CyLib.c ****         }
2964:Generated_Source\PSoC4/CyLib.c ****     }
2965:Generated_Source\PSoC4/CyLib.c **** }
 2580              		.loc 1 2965 0 is_stmt 1
 2581 0038 C046     		nop
 2582 003a BD46     		mov	sp, r7
 2583 003c 02B0     		add	sp, sp, #8
 2584              		@ sp needed
 2585 003e 80BD     		pop	{r7, pc}
 2586              	.L170:
 2587              		.align	2
 2588              	.L169:
 2589 0040 00000000 		.word	CySysTickCallbacks
 2590              		.cfi_endproc
 2591              	.LFE43:
 2592              		.size	CySysTickServiceCallbacks, .-CySysTickServiceCallbacks
 2593              		.section	.text.CyGetUniqueId,"ax",%progbits
 2594              		.align	2
 2595              		.global	CyGetUniqueId
 2596              		.code	16
 2597              		.thumb_func
 2598              		.type	CyGetUniqueId, %function
 2599              	CyGetUniqueId:
 2600              	.LFB44:
2966:Generated_Source\PSoC4/CyLib.c **** 
2967:Generated_Source\PSoC4/CyLib.c **** 
2968:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2969:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyGetUniqueId
2970:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 99


2971:Generated_Source\PSoC4/CyLib.c **** *
2972:Generated_Source\PSoC4/CyLib.c **** *  Returns the 64-bit unique ID of the device. The uniqueness of the number is
2973:Generated_Source\PSoC4/CyLib.c **** *  guaranteed for 10 years due to the die lot number having a cycle life of 10
2974:Generated_Source\PSoC4/CyLib.c **** *  years and even after 10 years, the probability of getting two identical
2975:Generated_Source\PSoC4/CyLib.c **** *  numbers is very small.
2976:Generated_Source\PSoC4/CyLib.c **** *
2977:Generated_Source\PSoC4/CyLib.c **** *  \param uniqueId: The pointer to a two element 32-bit unsigned integer array. Returns
2978:Generated_Source\PSoC4/CyLib.c **** *  the 64-bit unique ID of the device by loading them into the integer array
2979:Generated_Source\PSoC4/CyLib.c **** *  pointed to by uniqueId.
2980:Generated_Source\PSoC4/CyLib.c **** *
2981:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2982:Generated_Source\PSoC4/CyLib.c **** void CyGetUniqueId(uint32* uniqueId)
2983:Generated_Source\PSoC4/CyLib.c **** {
 2601              		.loc 1 2983 0
 2602              		.cfi_startproc
 2603              		@ args = 0, pretend = 0, frame = 8
 2604              		@ frame_needed = 1, uses_anonymous_args = 0
 2605 0000 80B5     		push	{r7, lr}
 2606              		.cfi_def_cfa_offset 8
 2607              		.cfi_offset 7, -8
 2608              		.cfi_offset 14, -4
 2609 0002 82B0     		sub	sp, sp, #8
 2610              		.cfi_def_cfa_offset 16
 2611 0004 00AF     		add	r7, sp, #0
 2612              		.cfi_def_cfa_register 7
 2613 0006 7860     		str	r0, [r7, #4]
2984:Generated_Source\PSoC4/CyLib.c **** #if(CY_PSOC4)
2985:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u]  =  (uint32)(* (reg8 *) CYREG_SFLASH_DIE_LOT0  );
 2614              		.loc 1 2985 0
 2615 0008 254B     		ldr	r3, .L172
 2616 000a 1B78     		ldrb	r3, [r3]
 2617 000c DBB2     		uxtb	r3, r3
 2618 000e 1A00     		movs	r2, r3
 2619 0010 7B68     		ldr	r3, [r7, #4]
 2620 0012 1A60     		str	r2, [r3]
2986:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_LOT1  ) <<  8u);
 2621              		.loc 1 2986 0
 2622 0014 234B     		ldr	r3, .L172+4
 2623 0016 1B78     		ldrb	r3, [r3]
 2624 0018 DBB2     		uxtb	r3, r3
 2625 001a 1A02     		lsls	r2, r3, #8
 2626 001c 7B68     		ldr	r3, [r7, #4]
 2627 001e 1B68     		ldr	r3, [r3]
 2628 0020 1A43     		orrs	r2, r3
 2629 0022 7B68     		ldr	r3, [r7, #4]
 2630 0024 1A60     		str	r2, [r3]
2987:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_LOT2  ) << 16u);
 2631              		.loc 1 2987 0
 2632 0026 204B     		ldr	r3, .L172+8
 2633 0028 1B78     		ldrb	r3, [r3]
 2634 002a DBB2     		uxtb	r3, r3
 2635 002c 1A04     		lsls	r2, r3, #16
 2636 002e 7B68     		ldr	r3, [r7, #4]
 2637 0030 1B68     		ldr	r3, [r3]
 2638 0032 1A43     		orrs	r2, r3
 2639 0034 7B68     		ldr	r3, [r7, #4]
 2640 0036 1A60     		str	r2, [r3]
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 100


2988:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_WAFER ) << 24u);
 2641              		.loc 1 2988 0
 2642 0038 1C4B     		ldr	r3, .L172+12
 2643 003a 1B78     		ldrb	r3, [r3]
 2644 003c DBB2     		uxtb	r3, r3
 2645 003e 1A06     		lsls	r2, r3, #24
 2646 0040 7B68     		ldr	r3, [r7, #4]
 2647 0042 1B68     		ldr	r3, [r3]
 2648 0044 1A43     		orrs	r2, r3
 2649 0046 7B68     		ldr	r3, [r7, #4]
 2650 0048 1A60     		str	r2, [r3]
2989:Generated_Source\PSoC4/CyLib.c **** 
2990:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u]  =  (uint32)(* (reg8 *) CYREG_SFLASH_DIE_X     );
 2651              		.loc 1 2990 0
 2652 004a 7B68     		ldr	r3, [r7, #4]
 2653 004c 0433     		adds	r3, r3, #4
 2654 004e 184A     		ldr	r2, .L172+16
 2655 0050 1278     		ldrb	r2, [r2]
 2656 0052 D2B2     		uxtb	r2, r2
 2657 0054 1A60     		str	r2, [r3]
2991:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_Y     ) <<  8u);
 2658              		.loc 1 2991 0
 2659 0056 174B     		ldr	r3, .L172+20
 2660 0058 1B78     		ldrb	r3, [r3]
 2661 005a DBB2     		uxtb	r3, r3
 2662 005c 1902     		lsls	r1, r3, #8
 2663 005e 7B68     		ldr	r3, [r7, #4]
 2664 0060 0433     		adds	r3, r3, #4
 2665 0062 7A68     		ldr	r2, [r7, #4]
 2666 0064 0432     		adds	r2, r2, #4
 2667 0066 1268     		ldr	r2, [r2]
 2668 0068 0A43     		orrs	r2, r1
 2669 006a 1A60     		str	r2, [r3]
2992:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_SORT  ) << 16u);
 2670              		.loc 1 2992 0
 2671 006c 124B     		ldr	r3, .L172+24
 2672 006e 1B78     		ldrb	r3, [r3]
 2673 0070 DBB2     		uxtb	r3, r3
 2674 0072 1904     		lsls	r1, r3, #16
 2675 0074 7B68     		ldr	r3, [r7, #4]
 2676 0076 0433     		adds	r3, r3, #4
 2677 0078 7A68     		ldr	r2, [r7, #4]
 2678 007a 0432     		adds	r2, r2, #4
 2679 007c 1268     		ldr	r2, [r2]
 2680 007e 0A43     		orrs	r2, r1
 2681 0080 1A60     		str	r2, [r3]
2993:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_MINOR ) << 24u);
 2682              		.loc 1 2993 0
 2683 0082 0E4B     		ldr	r3, .L172+28
 2684 0084 1B78     		ldrb	r3, [r3]
 2685 0086 DBB2     		uxtb	r3, r3
 2686 0088 1906     		lsls	r1, r3, #24
 2687 008a 7B68     		ldr	r3, [r7, #4]
 2688 008c 0433     		adds	r3, r3, #4
 2689 008e 7A68     		ldr	r2, [r7, #4]
 2690 0090 0432     		adds	r2, r2, #4
 2691 0092 1268     		ldr	r2, [r2]
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 101


 2692 0094 0A43     		orrs	r2, r1
 2693 0096 1A60     		str	r2, [r3]
2994:Generated_Source\PSoC4/CyLib.c **** #else
2995:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u]  =  (uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_LOT_LSB   )
2996:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_LOT_MSB   )
2997:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_MLOGIC_REV_ID                )
2998:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_WAFER_NUM )
2999:Generated_Source\PSoC4/CyLib.c **** 
3000:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u]  =  (uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_X_LOC     )
3001:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_Y_LOC     )
3002:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_WRK_WK    )
3003:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_FAB_YR    )
3004:Generated_Source\PSoC4/CyLib.c **** #endif  /* (CY_PSOC4) */
3005:Generated_Source\PSoC4/CyLib.c **** }
 2694              		.loc 1 3005 0
 2695 0098 C046     		nop
 2696 009a BD46     		mov	sp, r7
 2697 009c 02B0     		add	sp, sp, #8
 2698              		@ sp needed
 2699 009e 80BD     		pop	{r7, pc}
 2700              	.L173:
 2701              		.align	2
 2702              	.L172:
 2703 00a0 78F1FF0F 		.word	268431736
 2704 00a4 79F1FF0F 		.word	268431737
 2705 00a8 7AF1FF0F 		.word	268431738
 2706 00ac 7BF1FF0F 		.word	268431739
 2707 00b0 7CF1FF0F 		.word	268431740
 2708 00b4 7DF1FF0F 		.word	268431741
 2709 00b8 7EF1FF0F 		.word	268431742
 2710 00bc 7FF1FF0F 		.word	268431743
 2711              		.cfi_endproc
 2712              	.LFE44:
 2713              		.size	CyGetUniqueId, .-CyGetUniqueId
 2714              		.text
 2715              	.Letext0:
 2716              		.file 2 "Generated_Source\\PSoC4\\cytypes.h"
 2717              		.file 3 "Generated_Source\\PSoC4\\CyLib.h"
 2718              		.section	.debug_info,"",%progbits
 2719              	.Ldebug_info0:
 2720 0000 EB080000 		.4byte	0x8eb
 2721 0004 0400     		.2byte	0x4
 2722 0006 00000000 		.4byte	.Ldebug_abbrev0
 2723 000a 04       		.byte	0x4
 2724 000b 01       		.uleb128 0x1
 2725 000c E6020000 		.4byte	.LASF102
 2726 0010 0C       		.byte	0xc
 2727 0011 5C060000 		.4byte	.LASF103
 2728 0015 86030000 		.4byte	.LASF104
 2729 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2730 001d 00000000 		.4byte	0
 2731 0021 00000000 		.4byte	.Ldebug_line0
 2732 0025 02       		.uleb128 0x2
 2733 0026 01       		.byte	0x1
 2734 0027 06       		.byte	0x6
 2735 0028 FE000000 		.4byte	.LASF0
 2736 002c 02       		.uleb128 0x2
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 102


 2737 002d 01       		.byte	0x1
 2738 002e 08       		.byte	0x8
 2739 002f 1A050000 		.4byte	.LASF1
 2740 0033 02       		.uleb128 0x2
 2741 0034 02       		.byte	0x2
 2742 0035 05       		.byte	0x5
 2743 0036 28050000 		.4byte	.LASF2
 2744 003a 02       		.uleb128 0x2
 2745 003b 02       		.byte	0x2
 2746 003c 07       		.byte	0x7
 2747 003d 9F020000 		.4byte	.LASF3
 2748 0041 02       		.uleb128 0x2
 2749 0042 04       		.byte	0x4
 2750 0043 05       		.byte	0x5
 2751 0044 3D010000 		.4byte	.LASF4
 2752 0048 02       		.uleb128 0x2
 2753 0049 04       		.byte	0x4
 2754 004a 07       		.byte	0x7
 2755 004b 3E020000 		.4byte	.LASF5
 2756 004f 02       		.uleb128 0x2
 2757 0050 08       		.byte	0x8
 2758 0051 05       		.byte	0x5
 2759 0052 F0000000 		.4byte	.LASF6
 2760 0056 02       		.uleb128 0x2
 2761 0057 08       		.byte	0x8
 2762 0058 07       		.byte	0x7
 2763 0059 84000000 		.4byte	.LASF7
 2764 005d 03       		.uleb128 0x3
 2765 005e 04       		.byte	0x4
 2766 005f 05       		.byte	0x5
 2767 0060 696E7400 		.ascii	"int\000"
 2768 0064 02       		.uleb128 0x2
 2769 0065 04       		.byte	0x4
 2770 0066 07       		.byte	0x7
 2771 0067 22020000 		.4byte	.LASF8
 2772 006b 04       		.uleb128 0x4
 2773 006c 68010000 		.4byte	.LASF9
 2774 0070 02       		.byte	0x2
 2775 0071 D201     		.2byte	0x1d2
 2776 0073 2C000000 		.4byte	0x2c
 2777 0077 04       		.uleb128 0x4
 2778 0078 17000000 		.4byte	.LASF10
 2779 007c 02       		.byte	0x2
 2780 007d D301     		.2byte	0x1d3
 2781 007f 3A000000 		.4byte	0x3a
 2782 0083 04       		.uleb128 0x4
 2783 0084 A8010000 		.4byte	.LASF11
 2784 0088 02       		.byte	0x2
 2785 0089 D401     		.2byte	0x1d4
 2786 008b 48000000 		.4byte	0x48
 2787 008f 02       		.uleb128 0x2
 2788 0090 04       		.byte	0x4
 2789 0091 04       		.byte	0x4
 2790 0092 C1040000 		.4byte	.LASF12
 2791 0096 02       		.uleb128 0x2
 2792 0097 08       		.byte	0x8
 2793 0098 04       		.byte	0x4
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 103


 2794 0099 84010000 		.4byte	.LASF13
 2795 009d 02       		.uleb128 0x2
 2796 009e 01       		.byte	0x1
 2797 009f 08       		.byte	0x8
 2798 00a0 6B050000 		.4byte	.LASF14
 2799 00a4 04       		.uleb128 0x4
 2800 00a5 04050000 		.4byte	.LASF15
 2801 00a9 02       		.byte	0x2
 2802 00aa 7C02     		.2byte	0x27c
 2803 00ac B0000000 		.4byte	0xb0
 2804 00b0 05       		.uleb128 0x5
 2805 00b1 6B000000 		.4byte	0x6b
 2806 00b5 04       		.uleb128 0x4
 2807 00b6 10040000 		.4byte	.LASF16
 2808 00ba 02       		.byte	0x2
 2809 00bb 7E02     		.2byte	0x27e
 2810 00bd C1000000 		.4byte	0xc1
 2811 00c1 05       		.uleb128 0x5
 2812 00c2 83000000 		.4byte	0x83
 2813 00c6 04       		.uleb128 0x4
 2814 00c7 70050000 		.4byte	.LASF17
 2815 00cb 02       		.byte	0x2
 2816 00cc 8E02     		.2byte	0x28e
 2817 00ce D2000000 		.4byte	0xd2
 2818 00d2 06       		.uleb128 0x6
 2819 00d3 04       		.byte	0x4
 2820 00d4 D8000000 		.4byte	0xd8
 2821 00d8 07       		.uleb128 0x7
 2822 00d9 02       		.uleb128 0x2
 2823 00da 08       		.byte	0x8
 2824 00db 04       		.byte	0x4
 2825 00dc 4D040000 		.4byte	.LASF18
 2826 00e0 02       		.uleb128 0x2
 2827 00e1 04       		.byte	0x4
 2828 00e2 07       		.byte	0x7
 2829 00e3 32040000 		.4byte	.LASF19
 2830 00e7 08       		.uleb128 0x8
 2831 00e8 D6040000 		.4byte	.LASF20
 2832 00ec 03       		.byte	0x3
 2833 00ed F5       		.byte	0xf5
 2834 00ee D2000000 		.4byte	0xd2
 2835 00f2 09       		.uleb128 0x9
 2836 00f3 3A060000 		.4byte	.LASF21
 2837 00f7 01       		.byte	0x1
 2838 00f8 6B       		.byte	0x6b
 2839 00f9 00000000 		.4byte	.LFB0
 2840 00fd 1C000000 		.4byte	.LFE0-.LFB0
 2841 0101 01       		.uleb128 0x1
 2842 0102 9C       		.byte	0x9c
 2843 0103 09       		.uleb128 0x9
 2844 0104 6B020000 		.4byte	.LASF22
 2845 0108 01       		.byte	0x1
 2846 0109 8B       		.byte	0x8b
 2847 010a 00000000 		.4byte	.LFB1
 2848 010e 1C000000 		.4byte	.LFE1-.LFB1
 2849 0112 01       		.uleb128 0x1
 2850 0113 9C       		.byte	0x9c
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 104


 2851 0114 0A       		.uleb128 0xa
 2852 0115 27000000 		.4byte	.LASF25
 2853 0119 01       		.byte	0x1
 2854 011a AD01     		.2byte	0x1ad
 2855 011c 00000000 		.4byte	.LFB2
 2856 0120 48000000 		.4byte	.LFE2-.LFB2
 2857 0124 01       		.uleb128 0x1
 2858 0125 9C       		.byte	0x9c
 2859 0126 58010000 		.4byte	0x158
 2860 012a 0B       		.uleb128 0xb
 2861 012b 50050000 		.4byte	.LASF27
 2862 012f 01       		.byte	0x1
 2863 0130 AD01     		.2byte	0x1ad
 2864 0132 83000000 		.4byte	0x83
 2865 0136 02       		.uleb128 0x2
 2866 0137 91       		.byte	0x91
 2867 0138 64       		.sleb128 -28
 2868 0139 0C       		.uleb128 0xc
 2869 013a 1B010000 		.4byte	.LASF23
 2870 013e 01       		.byte	0x1
 2871 013f AF01     		.2byte	0x1af
 2872 0141 6B000000 		.4byte	0x6b
 2873 0145 02       		.uleb128 0x2
 2874 0146 91       		.byte	0x91
 2875 0147 6F       		.sleb128 -17
 2876 0148 0C       		.uleb128 0xc
 2877 0149 88060000 		.4byte	.LASF24
 2878 014d 01       		.byte	0x1
 2879 014e B001     		.2byte	0x1b0
 2880 0150 83000000 		.4byte	0x83
 2881 0154 02       		.uleb128 0x2
 2882 0155 91       		.byte	0x91
 2883 0156 68       		.sleb128 -24
 2884 0157 00       		.byte	0
 2885 0158 0D       		.uleb128 0xd
 2886 0159 FB030000 		.4byte	.LASF26
 2887 015d 01       		.byte	0x1
 2888 015e D901     		.2byte	0x1d9
 2889 0160 00000000 		.4byte	.LFB3
 2890 0164 50000000 		.4byte	.LFE3-.LFB3
 2891 0168 01       		.uleb128 0x1
 2892 0169 9C       		.byte	0x9c
 2893 016a 7E010000 		.4byte	0x17e
 2894 016e 0B       		.uleb128 0xb
 2895 016f 7D010000 		.4byte	.LASF28
 2896 0173 01       		.byte	0x1
 2897 0174 D901     		.2byte	0x1d9
 2898 0176 83000000 		.4byte	0x83
 2899 017a 02       		.uleb128 0x2
 2900 017b 91       		.byte	0x91
 2901 017c 74       		.sleb128 -12
 2902 017d 00       		.byte	0
 2903 017e 0E       		.uleb128 0xe
 2904 017f B4010000 		.4byte	.LASF43
 2905 0183 01       		.byte	0x1
 2906 0184 FE01     		.2byte	0x1fe
 2907 0186 83000000 		.4byte	0x83
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 105


 2908 018a 00000000 		.4byte	.LFB4
 2909 018e 34000000 		.4byte	.LFE4-.LFB4
 2910 0192 01       		.uleb128 0x1
 2911 0193 9C       		.byte	0x9c
 2912 0194 B7010000 		.4byte	0x1b7
 2913 0198 0C       		.uleb128 0xc
 2914 0199 1B010000 		.4byte	.LASF23
 2915 019d 01       		.byte	0x1
 2916 019e 0002     		.2byte	0x200
 2917 01a0 6B000000 		.4byte	0x6b
 2918 01a4 02       		.uleb128 0x2
 2919 01a5 91       		.byte	0x91
 2920 01a6 6F       		.sleb128 -17
 2921 01a7 0C       		.uleb128 0xc
 2922 01a8 69040000 		.4byte	.LASF29
 2923 01ac 01       		.byte	0x1
 2924 01ad 0102     		.2byte	0x201
 2925 01af 83000000 		.4byte	0x83
 2926 01b3 02       		.uleb128 0x2
 2927 01b4 91       		.byte	0x91
 2928 01b5 68       		.sleb128 -24
 2929 01b6 00       		.byte	0
 2930 01b7 0A       		.uleb128 0xa
 2931 01b8 8D050000 		.4byte	.LASF30
 2932 01bc 01       		.byte	0x1
 2933 01bd 3502     		.2byte	0x235
 2934 01bf 00000000 		.4byte	.LFB5
 2935 01c3 48000000 		.4byte	.LFE5-.LFB5
 2936 01c7 01       		.uleb128 0x1
 2937 01c8 9C       		.byte	0x9c
 2938 01c9 EC010000 		.4byte	0x1ec
 2939 01cd 0B       		.uleb128 0xb
 2940 01ce 32060000 		.4byte	.LASF31
 2941 01d2 01       		.byte	0x1
 2942 01d3 3502     		.2byte	0x235
 2943 01d5 83000000 		.4byte	0x83
 2944 01d9 02       		.uleb128 0x2
 2945 01da 91       		.byte	0x91
 2946 01db 64       		.sleb128 -28
 2947 01dc 0C       		.uleb128 0xc
 2948 01dd 1B010000 		.4byte	.LASF23
 2949 01e1 01       		.byte	0x1
 2950 01e2 3702     		.2byte	0x237
 2951 01e4 6B000000 		.4byte	0x6b
 2952 01e8 02       		.uleb128 0x2
 2953 01e9 91       		.byte	0x91
 2954 01ea 6F       		.sleb128 -17
 2955 01eb 00       		.byte	0
 2956 01ec 0A       		.uleb128 0xa
 2957 01ed D1020000 		.4byte	.LASF32
 2958 01f1 01       		.byte	0x1
 2959 01f2 6F02     		.2byte	0x26f
 2960 01f4 00000000 		.4byte	.LFB6
 2961 01f8 EC010000 		.4byte	.LFE6-.LFB6
 2962 01fc 01       		.uleb128 0x1
 2963 01fd 9C       		.byte	0x9c
 2964 01fe 6C020000 		.4byte	0x26c
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 106


 2965 0202 0B       		.uleb128 0xb
 2966 0203 0A010000 		.4byte	.LASF33
 2967 0207 01       		.byte	0x1
 2968 0208 6F02     		.2byte	0x26f
 2969 020a 83000000 		.4byte	0x83
 2970 020e 02       		.uleb128 0x2
 2971 020f 91       		.byte	0x91
 2972 0210 64       		.sleb128 -28
 2973 0211 0C       		.uleb128 0xc
 2974 0212 0F000000 		.4byte	.LASF34
 2975 0216 01       		.byte	0x1
 2976 0217 7502     		.2byte	0x275
 2977 0219 6B000000 		.4byte	0x6b
 2978 021d 02       		.uleb128 0x2
 2979 021e 91       		.byte	0x91
 2980 021f 6F       		.sleb128 -17
 2981 0220 0C       		.uleb128 0xc
 2982 0221 61040000 		.4byte	.LASF35
 2983 0225 01       		.byte	0x1
 2984 0226 7602     		.2byte	0x276
 2985 0228 6B000000 		.4byte	0x6b
 2986 022c 02       		.uleb128 0x2
 2987 022d 91       		.byte	0x91
 2988 022e 6E       		.sleb128 -18
 2989 022f 0C       		.uleb128 0xc
 2990 0230 4B060000 		.4byte	.LASF36
 2991 0234 01       		.byte	0x1
 2992 0235 7702     		.2byte	0x277
 2993 0237 6B000000 		.4byte	0x6b
 2994 023b 02       		.uleb128 0x2
 2995 023c 91       		.byte	0x91
 2996 023d 6B       		.sleb128 -21
 2997 023e 0C       		.uleb128 0xc
 2998 023f 6F000000 		.4byte	.LASF37
 2999 0243 01       		.byte	0x1
 3000 0244 7802     		.2byte	0x278
 3001 0246 6B000000 		.4byte	0x6b
 3002 024a 02       		.uleb128 0x2
 3003 024b 91       		.byte	0x91
 3004 024c 6D       		.sleb128 -19
 3005 024d 0C       		.uleb128 0xc
 3006 024e CC050000 		.4byte	.LASF38
 3007 0252 01       		.byte	0x1
 3008 0253 7902     		.2byte	0x279
 3009 0255 6B000000 		.4byte	0x6b
 3010 0259 02       		.uleb128 0x2
 3011 025a 91       		.byte	0x91
 3012 025b 6A       		.sleb128 -22
 3013 025c 0C       		.uleb128 0xc
 3014 025d 1B010000 		.4byte	.LASF23
 3015 0261 01       		.byte	0x1
 3016 0262 8402     		.2byte	0x284
 3017 0264 6B000000 		.4byte	0x6b
 3018 0268 02       		.uleb128 0x2
 3019 0269 91       		.byte	0x91
 3020 026a 6C       		.sleb128 -20
 3021 026b 00       		.byte	0
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 107


 3022 026c 0A       		.uleb128 0xa
 3023 026d C7040000 		.4byte	.LASF39
 3024 0271 01       		.byte	0x1
 3025 0272 4608     		.2byte	0x846
 3026 0274 00000000 		.4byte	.LFB7
 3027 0278 64000000 		.4byte	.LFE7-.LFB7
 3028 027c 01       		.uleb128 0x1
 3029 027d 9C       		.byte	0x9c
 3030 027e 92020000 		.4byte	0x292
 3031 0282 0B       		.uleb128 0xb
 3032 0283 09050000 		.4byte	.LASF40
 3033 0287 01       		.byte	0x1
 3034 0288 4608     		.2byte	0x846
 3035 028a 83000000 		.4byte	0x83
 3036 028e 02       		.uleb128 0x2
 3037 028f 91       		.byte	0x91
 3038 0290 74       		.sleb128 -12
 3039 0291 00       		.byte	0
 3040 0292 0F       		.uleb128 0xf
 3041 0293 05060000 		.4byte	.LASF41
 3042 0297 01       		.byte	0x1
 3043 0298 6408     		.2byte	0x864
 3044 029a 00000000 		.4byte	.LFB8
 3045 029e 2C000000 		.4byte	.LFE8-.LFB8
 3046 02a2 01       		.uleb128 0x1
 3047 02a3 9C       		.byte	0x9c
 3048 02a4 10       		.uleb128 0x10
 3049 02a5 50020000 		.4byte	.LASF83
 3050 02a9 01       		.byte	0x1
 3051 02aa 7608     		.2byte	0x876
 3052 02ac 83000000 		.4byte	0x83
 3053 02b0 00000000 		.4byte	.LFB9
 3054 02b4 18000000 		.4byte	.LFE9-.LFB9
 3055 02b8 01       		.uleb128 0x1
 3056 02b9 9C       		.byte	0x9c
 3057 02ba 0F       		.uleb128 0xf
 3058 02bb 91010000 		.4byte	.LASF42
 3059 02bf 01       		.byte	0x1
 3060 02c0 8608     		.2byte	0x886
 3061 02c2 00000000 		.4byte	.LFB10
 3062 02c6 14000000 		.4byte	.LFE10-.LFB10
 3063 02ca 01       		.uleb128 0x1
 3064 02cb 9C       		.byte	0x9c
 3065 02cc 11       		.uleb128 0x11
 3066 02cd 8B020000 		.4byte	.LASF44
 3067 02d1 01       		.byte	0x1
 3068 02d2 A008     		.2byte	0x8a0
 3069 02d4 83000000 		.4byte	0x83
 3070 02d8 00000000 		.4byte	.LFB11
 3071 02dc 30000000 		.4byte	.LFE11-.LFB11
 3072 02e0 01       		.uleb128 0x1
 3073 02e1 9C       		.byte	0x9c
 3074 02e2 05030000 		.4byte	0x305
 3075 02e6 0B       		.uleb128 0xb
 3076 02e7 64050000 		.4byte	.LASF45
 3077 02eb 01       		.byte	0x1
 3078 02ec A008     		.2byte	0x8a0
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 108


 3079 02ee 83000000 		.4byte	0x83
 3080 02f2 02       		.uleb128 0x2
 3081 02f3 91       		.byte	0x91
 3082 02f4 6C       		.sleb128 -20
 3083 02f5 0C       		.uleb128 0xc
 3084 02f6 25040000 		.4byte	.LASF46
 3085 02fa 01       		.byte	0x1
 3086 02fb A208     		.2byte	0x8a2
 3087 02fd 83000000 		.4byte	0x83
 3088 0301 02       		.uleb128 0x2
 3089 0302 91       		.byte	0x91
 3090 0303 74       		.sleb128 -12
 3091 0304 00       		.byte	0
 3092 0305 11       		.uleb128 0x11
 3093 0306 61000000 		.4byte	.LASF47
 3094 030a 01       		.byte	0x1
 3095 030b B708     		.2byte	0x8b7
 3096 030d 83000000 		.4byte	0x83
 3097 0311 00000000 		.4byte	.LFB12
 3098 0315 24000000 		.4byte	.LFE12-.LFB12
 3099 0319 01       		.uleb128 0x1
 3100 031a 9C       		.byte	0x9c
 3101 031b 2F030000 		.4byte	0x32f
 3102 031f 0C       		.uleb128 0xc
 3103 0320 1E000000 		.4byte	.LASF48
 3104 0324 01       		.byte	0x1
 3105 0325 B908     		.2byte	0x8b9
 3106 0327 83000000 		.4byte	0x83
 3107 032b 02       		.uleb128 0x2
 3108 032c 91       		.byte	0x91
 3109 032d 74       		.sleb128 -12
 3110 032e 00       		.byte	0
 3111 032f 0D       		.uleb128 0xd
 3112 0330 AC000000 		.4byte	.LASF49
 3113 0334 01       		.byte	0x1
 3114 0335 CE08     		.2byte	0x8ce
 3115 0337 00000000 		.4byte	.LFB13
 3116 033b 1C000000 		.4byte	.LFE13-.LFB13
 3117 033f 01       		.uleb128 0x1
 3118 0340 9C       		.byte	0x9c
 3119 0341 55030000 		.4byte	0x355
 3120 0345 0B       		.uleb128 0xb
 3121 0346 AF010000 		.4byte	.LASF50
 3122 034a 01       		.byte	0x1
 3123 034b CE08     		.2byte	0x8ce
 3124 034d 83000000 		.4byte	0x83
 3125 0351 02       		.uleb128 0x2
 3126 0352 91       		.byte	0x91
 3127 0353 74       		.sleb128 -12
 3128 0354 00       		.byte	0
 3129 0355 0E       		.uleb128 0xe
 3130 0356 74030000 		.4byte	.LASF51
 3131 035a 01       		.byte	0x1
 3132 035b E708     		.2byte	0x8e7
 3133 035d C6000000 		.4byte	0xc6
 3134 0361 00000000 		.4byte	.LFB14
 3135 0365 48000000 		.4byte	.LFE14-.LFB14
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 109


 3136 0369 01       		.uleb128 0x1
 3137 036a 9C       		.byte	0x9c
 3138 036b AC030000 		.4byte	0x3ac
 3139 036f 0B       		.uleb128 0xb
 3140 0370 C1020000 		.4byte	.LASF52
 3141 0374 01       		.byte	0x1
 3142 0375 E708     		.2byte	0x8e7
 3143 0377 6B000000 		.4byte	0x6b
 3144 037b 02       		.uleb128 0x2
 3145 037c 91       		.byte	0x91
 3146 037d 6F       		.sleb128 -17
 3147 037e 0B       		.uleb128 0xb
 3148 037f 59040000 		.4byte	.LASF53
 3149 0383 01       		.byte	0x1
 3150 0384 E708     		.2byte	0x8e7
 3151 0386 C6000000 		.4byte	0xc6
 3152 038a 02       		.uleb128 0x2
 3153 038b 91       		.byte	0x91
 3154 038c 68       		.sleb128 -24
 3155 038d 0C       		.uleb128 0xc
 3156 038e 53000000 		.4byte	.LASF54
 3157 0392 01       		.byte	0x1
 3158 0393 E908     		.2byte	0x8e9
 3159 0395 C6000000 		.4byte	0xc6
 3160 0399 02       		.uleb128 0x2
 3161 039a 91       		.byte	0x91
 3162 039b 70       		.sleb128 -16
 3163 039c 0C       		.uleb128 0xc
 3164 039d 00000000 		.4byte	.LASF55
 3165 03a1 01       		.byte	0x1
 3166 03a2 EA08     		.2byte	0x8ea
 3167 03a4 AC030000 		.4byte	0x3ac
 3168 03a8 02       		.uleb128 0x2
 3169 03a9 91       		.byte	0x91
 3170 03aa 74       		.sleb128 -12
 3171 03ab 00       		.byte	0
 3172 03ac 06       		.uleb128 0x6
 3173 03ad 04       		.byte	0x4
 3174 03ae C6000000 		.4byte	0xc6
 3175 03b2 0E       		.uleb128 0xe
 3176 03b3 3E050000 		.4byte	.LASF56
 3177 03b7 01       		.byte	0x1
 3178 03b8 0909     		.2byte	0x909
 3179 03ba C6000000 		.4byte	0xc6
 3180 03be 00000000 		.4byte	.LFB15
 3181 03c2 34000000 		.4byte	.LFE15-.LFB15
 3182 03c6 01       		.uleb128 0x1
 3183 03c7 9C       		.byte	0x9c
 3184 03c8 EB030000 		.4byte	0x3eb
 3185 03cc 0B       		.uleb128 0xb
 3186 03cd C1020000 		.4byte	.LASF52
 3187 03d1 01       		.byte	0x1
 3188 03d2 0909     		.2byte	0x909
 3189 03d4 6B000000 		.4byte	0x6b
 3190 03d8 02       		.uleb128 0x2
 3191 03d9 91       		.byte	0x91
 3192 03da 6F       		.sleb128 -17
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 110


 3193 03db 0C       		.uleb128 0xc
 3194 03dc 00000000 		.4byte	.LASF55
 3195 03e0 01       		.byte	0x1
 3196 03e1 0B09     		.2byte	0x90b
 3197 03e3 AC030000 		.4byte	0x3ac
 3198 03e7 02       		.uleb128 0x2
 3199 03e8 91       		.byte	0x91
 3200 03e9 74       		.sleb128 -12
 3201 03ea 00       		.byte	0
 3202 03eb 0E       		.uleb128 0xe
 3203 03ec B2020000 		.4byte	.LASF57
 3204 03f0 01       		.byte	0x1
 3205 03f1 1F09     		.2byte	0x91f
 3206 03f3 C6000000 		.4byte	0xc6
 3207 03f7 00000000 		.4byte	.LFB16
 3208 03fb 4C000000 		.4byte	.LFE16-.LFB16
 3209 03ff 01       		.uleb128 0x1
 3210 0400 9C       		.byte	0x9c
 3211 0401 42040000 		.4byte	0x442
 3212 0405 0B       		.uleb128 0xb
 3213 0406 C1020000 		.4byte	.LASF52
 3214 040a 01       		.byte	0x1
 3215 040b 1F09     		.2byte	0x91f
 3216 040d 6B000000 		.4byte	0x6b
 3217 0411 02       		.uleb128 0x2
 3218 0412 91       		.byte	0x91
 3219 0413 6F       		.sleb128 -17
 3220 0414 0B       		.uleb128 0xb
 3221 0415 59040000 		.4byte	.LASF53
 3222 0419 01       		.byte	0x1
 3223 041a 1F09     		.2byte	0x91f
 3224 041c C6000000 		.4byte	0xc6
 3225 0420 02       		.uleb128 0x2
 3226 0421 91       		.byte	0x91
 3227 0422 68       		.sleb128 -24
 3228 0423 0C       		.uleb128 0xc
 3229 0424 53000000 		.4byte	.LASF54
 3230 0428 01       		.byte	0x1
 3231 0429 2109     		.2byte	0x921
 3232 042b C6000000 		.4byte	0xc6
 3233 042f 02       		.uleb128 0x2
 3234 0430 91       		.byte	0x91
 3235 0431 70       		.sleb128 -16
 3236 0432 0C       		.uleb128 0xc
 3237 0433 00000000 		.4byte	.LASF55
 3238 0437 01       		.byte	0x1
 3239 0438 2209     		.2byte	0x922
 3240 043a AC030000 		.4byte	0x3ac
 3241 043e 02       		.uleb128 0x2
 3242 043f 91       		.byte	0x91
 3243 0440 74       		.sleb128 -12
 3244 0441 00       		.byte	0
 3245 0442 0E       		.uleb128 0xe
 3246 0443 E8040000 		.4byte	.LASF58
 3247 0447 01       		.byte	0x1
 3248 0448 3B09     		.2byte	0x93b
 3249 044a C6000000 		.4byte	0xc6
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 111


 3250 044e 00000000 		.4byte	.LFB17
 3251 0452 36000000 		.4byte	.LFE17-.LFB17
 3252 0456 01       		.uleb128 0x1
 3253 0457 9C       		.byte	0x9c
 3254 0458 7B040000 		.4byte	0x47b
 3255 045c 0B       		.uleb128 0xb
 3256 045d C1020000 		.4byte	.LASF52
 3257 0461 01       		.byte	0x1
 3258 0462 3B09     		.2byte	0x93b
 3259 0464 6B000000 		.4byte	0x6b
 3260 0468 02       		.uleb128 0x2
 3261 0469 91       		.byte	0x91
 3262 046a 6F       		.sleb128 -17
 3263 046b 0C       		.uleb128 0xc
 3264 046c 00000000 		.4byte	.LASF55
 3265 0470 01       		.byte	0x1
 3266 0471 3D09     		.2byte	0x93d
 3267 0473 AC030000 		.4byte	0x3ac
 3268 0477 02       		.uleb128 0x2
 3269 0478 91       		.byte	0x91
 3270 0479 74       		.sleb128 -12
 3271 047a 00       		.byte	0
 3272 047b 0A       		.uleb128 0xa
 3273 047c B0040000 		.4byte	.LASF59
 3274 0480 01       		.byte	0x1
 3275 0481 4E09     		.2byte	0x94e
 3276 0483 00000000 		.4byte	.LFB18
 3277 0487 A8000000 		.4byte	.LFE18-.LFB18
 3278 048b 01       		.uleb128 0x1
 3279 048c 9C       		.byte	0x9c
 3280 048d DD040000 		.4byte	0x4dd
 3281 0491 0B       		.uleb128 0xb
 3282 0492 C1020000 		.4byte	.LASF52
 3283 0496 01       		.byte	0x1
 3284 0497 4E09     		.2byte	0x94e
 3285 0499 6B000000 		.4byte	0x6b
 3286 049d 02       		.uleb128 0x2
 3287 049e 91       		.byte	0x91
 3288 049f 5F       		.sleb128 -33
 3289 04a0 0B       		.uleb128 0xb
 3290 04a1 C8020000 		.4byte	.LASF60
 3291 04a5 01       		.byte	0x1
 3292 04a6 4E09     		.2byte	0x94e
 3293 04a8 6B000000 		.4byte	0x6b
 3294 04ac 02       		.uleb128 0x2
 3295 04ad 91       		.byte	0x91
 3296 04ae 5E       		.sleb128 -34
 3297 04af 0C       		.uleb128 0xc
 3298 04b0 1B010000 		.4byte	.LASF23
 3299 04b4 01       		.byte	0x1
 3300 04b5 5009     		.2byte	0x950
 3301 04b7 6B000000 		.4byte	0x6b
 3302 04bb 02       		.uleb128 0x2
 3303 04bc 91       		.byte	0x91
 3304 04bd 6B       		.sleb128 -21
 3305 04be 0C       		.uleb128 0xc
 3306 04bf 8B010000 		.4byte	.LASF61
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 112


 3307 04c3 01       		.byte	0x1
 3308 04c4 5109     		.2byte	0x951
 3309 04c6 83000000 		.4byte	0x83
 3310 04ca 02       		.uleb128 0x2
 3311 04cb 91       		.byte	0x91
 3312 04cc 6C       		.sleb128 -20
 3313 04cd 0C       		.uleb128 0xc
 3314 04ce F8010000 		.4byte	.LASF62
 3315 04d2 01       		.byte	0x1
 3316 04d3 5209     		.2byte	0x952
 3317 04d5 83000000 		.4byte	0x83
 3318 04d9 02       		.uleb128 0x2
 3319 04da 91       		.byte	0x91
 3320 04db 64       		.sleb128 -28
 3321 04dc 00       		.byte	0
 3322 04dd 0E       		.uleb128 0xe
 3323 04de CC010000 		.4byte	.LASF63
 3324 04e2 01       		.byte	0x1
 3325 04e3 7009     		.2byte	0x970
 3326 04e5 6B000000 		.4byte	0x6b
 3327 04e9 00000000 		.4byte	.LFB19
 3328 04ed 58000000 		.4byte	.LFE19-.LFB19
 3329 04f1 01       		.uleb128 0x1
 3330 04f2 9C       		.byte	0x9c
 3331 04f3 16050000 		.4byte	0x516
 3332 04f7 0B       		.uleb128 0xb
 3333 04f8 C1020000 		.4byte	.LASF52
 3334 04fc 01       		.byte	0x1
 3335 04fd 7009     		.2byte	0x970
 3336 04ff 6B000000 		.4byte	0x6b
 3337 0503 02       		.uleb128 0x2
 3338 0504 91       		.byte	0x91
 3339 0505 6F       		.sleb128 -17
 3340 0506 0C       		.uleb128 0xc
 3341 0507 C8020000 		.4byte	.LASF60
 3342 050b 01       		.byte	0x1
 3343 050c 7209     		.2byte	0x972
 3344 050e 6B000000 		.4byte	0x6b
 3345 0512 02       		.uleb128 0x2
 3346 0513 91       		.byte	0x91
 3347 0514 77       		.sleb128 -9
 3348 0515 00       		.byte	0
 3349 0516 0D       		.uleb128 0xd
 3350 0517 32050000 		.4byte	.LASF64
 3351 051b 01       		.byte	0x1
 3352 051c 8509     		.2byte	0x985
 3353 051e 00000000 		.4byte	.LFB20
 3354 0522 2C000000 		.4byte	.LFE20-.LFB20
 3355 0526 01       		.uleb128 0x1
 3356 0527 9C       		.byte	0x9c
 3357 0528 3C050000 		.4byte	0x53c
 3358 052c 0B       		.uleb128 0xb
 3359 052d C1020000 		.4byte	.LASF52
 3360 0531 01       		.byte	0x1
 3361 0532 8509     		.2byte	0x985
 3362 0534 6B000000 		.4byte	0x6b
 3363 0538 02       		.uleb128 0x2
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 113


 3364 0539 91       		.byte	0x91
 3365 053a 77       		.sleb128 -9
 3366 053b 00       		.byte	0
 3367 053c 11       		.uleb128 0x11
 3368 053d E2000000 		.4byte	.LASF65
 3369 0541 01       		.byte	0x1
 3370 0542 9709     		.2byte	0x997
 3371 0544 6B000000 		.4byte	0x6b
 3372 0548 00000000 		.4byte	.LFB21
 3373 054c 30000000 		.4byte	.LFE21-.LFB21
 3374 0550 01       		.uleb128 0x1
 3375 0551 9C       		.byte	0x9c
 3376 0552 66050000 		.4byte	0x566
 3377 0556 0B       		.uleb128 0xb
 3378 0557 C1020000 		.4byte	.LASF52
 3379 055b 01       		.byte	0x1
 3380 055c 9709     		.2byte	0x997
 3381 055e 6B000000 		.4byte	0x6b
 3382 0562 02       		.uleb128 0x2
 3383 0563 91       		.byte	0x91
 3384 0564 77       		.sleb128 -9
 3385 0565 00       		.byte	0
 3386 0566 0D       		.uleb128 0xd
 3387 0567 46010000 		.4byte	.LASF66
 3388 056b 01       		.byte	0x1
 3389 056c A709     		.2byte	0x9a7
 3390 056e 00000000 		.4byte	.LFB22
 3391 0572 2C000000 		.4byte	.LFE22-.LFB22
 3392 0576 01       		.uleb128 0x1
 3393 0577 9C       		.byte	0x9c
 3394 0578 8C050000 		.4byte	0x58c
 3395 057c 0B       		.uleb128 0xb
 3396 057d C1020000 		.4byte	.LASF52
 3397 0581 01       		.byte	0x1
 3398 0582 A709     		.2byte	0x9a7
 3399 0584 6B000000 		.4byte	0x6b
 3400 0588 02       		.uleb128 0x2
 3401 0589 91       		.byte	0x91
 3402 058a 77       		.sleb128 -9
 3403 058b 00       		.byte	0
 3404 058c 0D       		.uleb128 0xd
 3405 058d 7B020000 		.4byte	.LASF67
 3406 0591 01       		.byte	0x1
 3407 0592 B509     		.2byte	0x9b5
 3408 0594 00000000 		.4byte	.LFB23
 3409 0598 2C000000 		.4byte	.LFE23-.LFB23
 3410 059c 01       		.uleb128 0x1
 3411 059d 9C       		.byte	0x9c
 3412 059e B2050000 		.4byte	0x5b2
 3413 05a2 0B       		.uleb128 0xb
 3414 05a3 C1020000 		.4byte	.LASF52
 3415 05a7 01       		.byte	0x1
 3416 05a8 B509     		.2byte	0x9b5
 3417 05aa 6B000000 		.4byte	0x6b
 3418 05ae 02       		.uleb128 0x2
 3419 05af 91       		.byte	0x91
 3420 05b0 77       		.sleb128 -9
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 114


 3421 05b1 00       		.byte	0
 3422 05b2 0D       		.uleb128 0xd
 3423 05b3 3B040000 		.4byte	.LASF68
 3424 05b7 01       		.byte	0x1
 3425 05b8 C409     		.2byte	0x9c4
 3426 05ba 00000000 		.4byte	.LFB24
 3427 05be 2C000000 		.4byte	.LFE24-.LFB24
 3428 05c2 01       		.uleb128 0x1
 3429 05c3 9C       		.byte	0x9c
 3430 05c4 D8050000 		.4byte	0x5d8
 3431 05c8 0B       		.uleb128 0xb
 3432 05c9 C1020000 		.4byte	.LASF52
 3433 05cd 01       		.byte	0x1
 3434 05ce C409     		.2byte	0x9c4
 3435 05d0 6B000000 		.4byte	0x6b
 3436 05d4 02       		.uleb128 0x2
 3437 05d5 91       		.byte	0x91
 3438 05d6 77       		.sleb128 -9
 3439 05d7 00       		.byte	0
 3440 05d8 0D       		.uleb128 0xd
 3441 05d9 13050000 		.4byte	.LASF69
 3442 05dd 01       		.byte	0x1
 3443 05de D309     		.2byte	0x9d3
 3444 05e0 00000000 		.4byte	.LFB25
 3445 05e4 16000000 		.4byte	.LFE25-.LFB25
 3446 05e8 01       		.uleb128 0x1
 3447 05e9 9C       		.byte	0x9c
 3448 05ea FE050000 		.4byte	0x5fe
 3449 05ee 0B       		.uleb128 0xb
 3450 05ef 64050000 		.4byte	.LASF45
 3451 05f3 01       		.byte	0x1
 3452 05f4 D309     		.2byte	0x9d3
 3453 05f6 6B000000 		.4byte	0x6b
 3454 05fa 02       		.uleb128 0x2
 3455 05fb 91       		.byte	0x91
 3456 05fc 77       		.sleb128 -9
 3457 05fd 00       		.byte	0
 3458 05fe 0F       		.uleb128 0xf
 3459 05ff B9000000 		.4byte	.LASF70
 3460 0603 01       		.byte	0x1
 3461 0604 EB09     		.2byte	0x9eb
 3462 0606 00000000 		.4byte	.LFB26
 3463 060a 24000000 		.4byte	.LFE26-.LFB26
 3464 060e 01       		.uleb128 0x1
 3465 060f 9C       		.byte	0x9c
 3466 0610 0A       		.uleb128 0xa
 3467 0611 E3050000 		.4byte	.LASF71
 3468 0615 01       		.byte	0x1
 3469 0616 FF09     		.2byte	0x9ff
 3470 0618 00000000 		.4byte	.LFB27
 3471 061c 4C000000 		.4byte	.LFE27-.LFB27
 3472 0620 01       		.uleb128 0x1
 3473 0621 9C       		.byte	0x9c
 3474 0622 36060000 		.4byte	0x636
 3475 0626 0B       		.uleb128 0xb
 3476 0627 F7040000 		.4byte	.LASF72
 3477 062b 01       		.byte	0x1
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 115


 3478 062c FF09     		.2byte	0x9ff
 3479 062e 83000000 		.4byte	0x83
 3480 0632 02       		.uleb128 0x2
 3481 0633 91       		.byte	0x91
 3482 0634 74       		.sleb128 -12
 3483 0635 00       		.byte	0
 3484 0636 0A       		.uleb128 0xa
 3485 0637 5A050000 		.4byte	.LASF73
 3486 063b 01       		.byte	0x1
 3487 063c 160A     		.2byte	0xa16
 3488 063e 00000000 		.4byte	.LFB28
 3489 0642 28000000 		.4byte	.LFE28-.LFB28
 3490 0646 01       		.uleb128 0x1
 3491 0647 9C       		.byte	0x9c
 3492 0648 5C060000 		.4byte	0x65c
 3493 064c 0B       		.uleb128 0xb
 3494 064d 7B060000 		.4byte	.LASF74
 3495 0651 01       		.byte	0x1
 3496 0652 160A     		.2byte	0xa16
 3497 0654 77000000 		.4byte	0x77
 3498 0658 02       		.uleb128 0x2
 3499 0659 91       		.byte	0x91
 3500 065a 76       		.sleb128 -10
 3501 065b 00       		.byte	0
 3502 065c 0A       		.uleb128 0xa
 3503 065d 0F010000 		.4byte	.LASF75
 3504 0661 01       		.byte	0x1
 3505 0662 240A     		.2byte	0xa24
 3506 0664 00000000 		.4byte	.LFB29
 3507 0668 84000000 		.4byte	.LFE29-.LFB29
 3508 066c 01       		.uleb128 0x1
 3509 066d 9C       		.byte	0x9c
 3510 066e 82060000 		.4byte	0x682
 3511 0672 0B       		.uleb128 0xb
 3512 0673 0A010000 		.4byte	.LASF33
 3513 0677 01       		.byte	0x1
 3514 0678 240A     		.2byte	0xa24
 3515 067a 83000000 		.4byte	0x83
 3516 067e 02       		.uleb128 0x2
 3517 067f 91       		.byte	0x91
 3518 0680 74       		.sleb128 -12
 3519 0681 00       		.byte	0
 3520 0682 12       		.uleb128 0x12
 3521 0683 16040000 		.4byte	.LASF76
 3522 0687 01       		.byte	0x1
 3523 0688 440A     		.2byte	0xa44
 3524 068a 00000000 		.4byte	.LFB30
 3525 068e 24000000 		.4byte	.LFE30-.LFB30
 3526 0692 01       		.uleb128 0x1
 3527 0693 9C       		.byte	0x9c
 3528 0694 0A       		.uleb128 0xa
 3529 0695 EA010000 		.4byte	.LASF77
 3530 0699 01       		.byte	0x1
 3531 069a 610A     		.2byte	0xa61
 3532 069c 00000000 		.4byte	.LFB31
 3533 06a0 5C000000 		.4byte	.LFE31-.LFB31
 3534 06a4 01       		.uleb128 0x1
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 116


 3535 06a5 9C       		.byte	0x9c
 3536 06a6 B8060000 		.4byte	0x6b8
 3537 06aa 13       		.uleb128 0x13
 3538 06ab 6900     		.ascii	"i\000"
 3539 06ad 01       		.byte	0x1
 3540 06ae 630A     		.2byte	0xa63
 3541 06b0 83000000 		.4byte	0x83
 3542 06b4 02       		.uleb128 0x2
 3543 06b5 91       		.byte	0x91
 3544 06b6 74       		.sleb128 -12
 3545 06b7 00       		.byte	0
 3546 06b8 12       		.uleb128 0x12
 3547 06b9 7D050000 		.4byte	.LASF78
 3548 06bd 01       		.byte	0x1
 3549 06be 7F0A     		.2byte	0xa7f
 3550 06c0 00000000 		.4byte	.LFB32
 3551 06c4 20000000 		.4byte	.LFE32-.LFB32
 3552 06c8 01       		.uleb128 0x1
 3553 06c9 9C       		.byte	0x9c
 3554 06ca 0F       		.uleb128 0xf
 3555 06cb 24060000 		.4byte	.LASF79
 3556 06cf 01       		.byte	0x1
 3557 06d0 900A     		.2byte	0xa90
 3558 06d2 00000000 		.4byte	.LFB33
 3559 06d6 1C000000 		.4byte	.LFE33-.LFB33
 3560 06da 01       		.uleb128 0x1
 3561 06db 9C       		.byte	0x9c
 3562 06dc 0F       		.uleb128 0xf
 3563 06dd C9000000 		.4byte	.LASF80
 3564 06e1 01       		.byte	0x1
 3565 06e2 A00A     		.2byte	0xaa0
 3566 06e4 00000000 		.4byte	.LFB34
 3567 06e8 1C000000 		.4byte	.LFE34-.LFB34
 3568 06ec 01       		.uleb128 0x1
 3569 06ed 9C       		.byte	0x9c
 3570 06ee 0F       		.uleb128 0xf
 3571 06ef EB050000 		.4byte	.LASF81
 3572 06f3 01       		.byte	0x1
 3573 06f4 B00A     		.2byte	0xab0
 3574 06f6 00000000 		.4byte	.LFB35
 3575 06fa 1C000000 		.4byte	.LFE35-.LFB35
 3576 06fe 01       		.uleb128 0x1
 3577 06ff 9C       		.byte	0x9c
 3578 0700 0D       		.uleb128 0xd
 3579 0701 8F060000 		.4byte	.LASF82
 3580 0705 01       		.byte	0x1
 3581 0706 C10A     		.2byte	0xac1
 3582 0708 00000000 		.4byte	.LFB36
 3583 070c 20000000 		.4byte	.LFE36-.LFB36
 3584 0710 01       		.uleb128 0x1
 3585 0711 9C       		.byte	0x9c
 3586 0712 26070000 		.4byte	0x726
 3587 0716 0B       		.uleb128 0xb
 3588 0717 F8010000 		.4byte	.LASF62
 3589 071b 01       		.byte	0x1
 3590 071c C10A     		.2byte	0xac1
 3591 071e 83000000 		.4byte	0x83
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 117


 3592 0722 02       		.uleb128 0x2
 3593 0723 91       		.byte	0x91
 3594 0724 74       		.sleb128 -12
 3595 0725 00       		.byte	0
 3596 0726 10       		.uleb128 0x10
 3597 0727 2A010000 		.4byte	.LASF84
 3598 072b 01       		.byte	0x1
 3599 072c D10A     		.2byte	0xad1
 3600 072e 83000000 		.4byte	0x83
 3601 0732 00000000 		.4byte	.LFB37
 3602 0736 18000000 		.4byte	.LFE37-.LFB37
 3603 073a 01       		.uleb128 0x1
 3604 073b 9C       		.byte	0x9c
 3605 073c 10       		.uleb128 0x10
 3606 073d 90040000 		.4byte	.LASF85
 3607 0741 01       		.byte	0x1
 3608 0742 E10A     		.2byte	0xae1
 3609 0744 83000000 		.4byte	0x83
 3610 0748 00000000 		.4byte	.LFB38
 3611 074c 18000000 		.4byte	.LFE38-.LFB38
 3612 0750 01       		.uleb128 0x1
 3613 0751 9C       		.byte	0x9c
 3614 0752 10       		.uleb128 0x10
 3615 0753 0C020000 		.4byte	.LASF86
 3616 0757 01       		.byte	0x1
 3617 0758 310B     		.2byte	0xb31
 3618 075a 83000000 		.4byte	0x83
 3619 075e 00000000 		.4byte	.LFB39
 3620 0762 18000000 		.4byte	.LFE39-.LFB39
 3621 0766 01       		.uleb128 0x1
 3622 0767 9C       		.byte	0x9c
 3623 0768 0F       		.uleb128 0xf
 3624 0769 2F020000 		.4byte	.LASF87
 3625 076d 01       		.byte	0x1
 3626 076e 3E0B     		.2byte	0xb3e
 3627 0770 00000000 		.4byte	.LFB40
 3628 0774 14000000 		.4byte	.LFE40-.LFB40
 3629 0778 01       		.uleb128 0x1
 3630 0779 9C       		.byte	0x9c
 3631 077a 11       		.uleb128 0x11
 3632 077b A4050000 		.4byte	.LASF88
 3633 077f 01       		.byte	0x1
 3634 0780 610B     		.2byte	0xb61
 3635 0782 E7000000 		.4byte	0xe7
 3636 0786 00000000 		.4byte	.LFB41
 3637 078a 2C000000 		.4byte	.LFE41-.LFB41
 3638 078e 01       		.uleb128 0x1
 3639 078f 9C       		.byte	0x9c
 3640 0790 C2070000 		.4byte	0x7c2
 3641 0794 0B       		.uleb128 0xb
 3642 0795 C1020000 		.4byte	.LASF52
 3643 0799 01       		.byte	0x1
 3644 079a 610B     		.2byte	0xb61
 3645 079c 83000000 		.4byte	0x83
 3646 07a0 02       		.uleb128 0x2
 3647 07a1 91       		.byte	0x91
 3648 07a2 6C       		.sleb128 -20
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 118


 3649 07a3 0B       		.uleb128 0xb
 3650 07a4 76040000 		.4byte	.LASF89
 3651 07a8 01       		.byte	0x1
 3652 07a9 610B     		.2byte	0xb61
 3653 07ab E7000000 		.4byte	0xe7
 3654 07af 02       		.uleb128 0x2
 3655 07b0 91       		.byte	0x91
 3656 07b1 68       		.sleb128 -24
 3657 07b2 0C       		.uleb128 0xc
 3658 07b3 5A000000 		.4byte	.LASF90
 3659 07b7 01       		.byte	0x1
 3660 07b8 630B     		.2byte	0xb63
 3661 07ba E7000000 		.4byte	0xe7
 3662 07be 02       		.uleb128 0x2
 3663 07bf 91       		.byte	0x91
 3664 07c0 74       		.sleb128 -12
 3665 07c1 00       		.byte	0
 3666 07c2 11       		.uleb128 0x11
 3667 07c3 53010000 		.4byte	.LASF91
 3668 07c7 01       		.byte	0x1
 3669 07c8 790B     		.2byte	0xb79
 3670 07ca E7000000 		.4byte	0xe7
 3671 07ce 00000000 		.4byte	.LFB42
 3672 07d2 1C000000 		.4byte	.LFE42-.LFB42
 3673 07d6 01       		.uleb128 0x1
 3674 07d7 9C       		.byte	0x9c
 3675 07d8 EC070000 		.4byte	0x7ec
 3676 07dc 0B       		.uleb128 0xb
 3677 07dd C1020000 		.4byte	.LASF52
 3678 07e1 01       		.byte	0x1
 3679 07e2 790B     		.2byte	0xb79
 3680 07e4 83000000 		.4byte	0x83
 3681 07e8 02       		.uleb128 0x2
 3682 07e9 91       		.byte	0x91
 3683 07ea 74       		.sleb128 -12
 3684 07eb 00       		.byte	0
 3685 07ec 14       		.uleb128 0x14
 3686 07ed A2060000 		.4byte	.LASF105
 3687 07f1 01       		.byte	0x1
 3688 07f2 860B     		.2byte	0xb86
 3689 07f4 00000000 		.4byte	.LFB43
 3690 07f8 44000000 		.4byte	.LFE43-.LFB43
 3691 07fc 01       		.uleb128 0x1
 3692 07fd 9C       		.byte	0x9c
 3693 07fe 10080000 		.4byte	0x810
 3694 0802 13       		.uleb128 0x13
 3695 0803 6900     		.ascii	"i\000"
 3696 0805 01       		.byte	0x1
 3697 0806 880B     		.2byte	0xb88
 3698 0808 83000000 		.4byte	0x83
 3699 080c 02       		.uleb128 0x2
 3700 080d 91       		.byte	0x91
 3701 080e 74       		.sleb128 -12
 3702 080f 00       		.byte	0
 3703 0810 0D       		.uleb128 0xd
 3704 0811 FE010000 		.4byte	.LASF92
 3705 0815 01       		.byte	0x1
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 119


 3706 0816 A60B     		.2byte	0xba6
 3707 0818 00000000 		.4byte	.LFB44
 3708 081c C0000000 		.4byte	.LFE44-.LFB44
 3709 0820 01       		.uleb128 0x1
 3710 0821 9C       		.byte	0x9c
 3711 0822 36080000 		.4byte	0x836
 3712 0826 0B       		.uleb128 0xb
 3713 0827 DA050000 		.4byte	.LASF93
 3714 082b 01       		.byte	0x1
 3715 082c A60B     		.2byte	0xba6
 3716 082e 36080000 		.4byte	0x836
 3717 0832 02       		.uleb128 0x2
 3718 0833 91       		.byte	0x91
 3719 0834 74       		.sleb128 -12
 3720 0835 00       		.byte	0
 3721 0836 06       		.uleb128 0x6
 3722 0837 04       		.byte	0x4
 3723 0838 83000000 		.4byte	0x83
 3724 083c 15       		.uleb128 0x15
 3725 083d E7000000 		.4byte	0xe7
 3726 0841 4C080000 		.4byte	0x84c
 3727 0845 16       		.uleb128 0x16
 3728 0846 E0000000 		.4byte	0xe0
 3729 084a 04       		.byte	0x4
 3730 084b 00       		.byte	0
 3731 084c 17       		.uleb128 0x17
 3732 084d B9050000 		.4byte	.LASF94
 3733 0851 01       		.byte	0x1
 3734 0852 22       		.byte	0x22
 3735 0853 3C080000 		.4byte	0x83c
 3736 0857 05       		.uleb128 0x5
 3737 0858 03       		.byte	0x3
 3738 0859 00000000 		.4byte	CySysTickCallbacks
 3739 085d 18       		.uleb128 0x18
 3740 085e A2040000 		.4byte	.LASF95
 3741 0862 01       		.byte	0x1
 3742 0863 1B       		.byte	0x1b
 3743 0864 83000000 		.4byte	0x83
 3744 0868 05       		.uleb128 0x5
 3745 0869 03       		.byte	0x3
 3746 086a 00000000 		.4byte	cydelayFreqHz
 3747 086e 18       		.uleb128 0x18
 3748 086f 6E010000 		.4byte	.LASF96
 3749 0873 01       		.byte	0x1
 3750 0874 1C       		.byte	0x1c
 3751 0875 83000000 		.4byte	0x83
 3752 0879 05       		.uleb128 0x5
 3753 087a 03       		.byte	0x3
 3754 087b 00000000 		.4byte	cydelayFreqKhz
 3755 087f 18       		.uleb128 0x18
 3756 0880 15060000 		.4byte	.LASF97
 3757 0884 01       		.byte	0x1
 3758 0885 1D       		.byte	0x1d
 3759 0886 6B000000 		.4byte	0x6b
 3760 088a 05       		.uleb128 0x5
 3761 088b 03       		.byte	0x3
 3762 088c 00000000 		.4byte	cydelayFreqMhz
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 120


 3763 0890 18       		.uleb128 0x18
 3764 0891 DD010000 		.4byte	.LASF98
 3765 0895 01       		.byte	0x1
 3766 0896 1E       		.byte	0x1e
 3767 0897 83000000 		.4byte	0x83
 3768 089b 05       		.uleb128 0x5
 3769 089c 03       		.byte	0x3
 3770 089d 00000000 		.4byte	cydelay32kMs
 3771 08a1 18       		.uleb128 0x18
 3772 08a2 9B000000 		.4byte	.LASF99
 3773 08a6 01       		.byte	0x1
 3774 08a7 36       		.byte	0x36
 3775 08a8 83000000 		.4byte	0x83
 3776 08ac 05       		.uleb128 0x5
 3777 08ad 03       		.byte	0x3
 3778 08ae 00000000 		.4byte	CySysTickInitVar
 3779 08b2 15       		.uleb128 0x15
 3780 08b3 C2080000 		.4byte	0x8c2
 3781 08b7 C2080000 		.4byte	0x8c2
 3782 08bb 16       		.uleb128 0x16
 3783 08bc E0000000 		.4byte	0xe0
 3784 08c0 2D       		.byte	0x2d
 3785 08c1 00       		.byte	0
 3786 08c2 19       		.uleb128 0x19
 3787 08c3 6B000000 		.4byte	0x6b
 3788 08c7 18       		.uleb128 0x18
 3789 08c8 7F040000 		.4byte	.LASF100
 3790 08cc 01       		.byte	0x1
 3791 08cd 3B       		.byte	0x3b
 3792 08ce D8080000 		.4byte	0x8d8
 3793 08d2 05       		.uleb128 0x5
 3794 08d3 03       		.byte	0x3
 3795 08d4 00000000 		.4byte	cyImoFreqMhz2Reg
 3796 08d8 19       		.uleb128 0x19
 3797 08d9 B2080000 		.4byte	0x8b2
 3798 08dd 18       		.uleb128 0x18
 3799 08de 40000000 		.4byte	.LASF101
 3800 08e2 01       		.byte	0x1
 3801 08e3 5B       		.byte	0x5b
 3802 08e4 83000000 		.4byte	0x83
 3803 08e8 05       		.uleb128 0x5
 3804 08e9 03       		.byte	0x3
 3805 08ea 00000000 		.4byte	CySysClkPumpConfig
 3806 08ee 00       		.byte	0
 3807              		.section	.debug_abbrev,"",%progbits
 3808              	.Ldebug_abbrev0:
 3809 0000 01       		.uleb128 0x1
 3810 0001 11       		.uleb128 0x11
 3811 0002 01       		.byte	0x1
 3812 0003 25       		.uleb128 0x25
 3813 0004 0E       		.uleb128 0xe
 3814 0005 13       		.uleb128 0x13
 3815 0006 0B       		.uleb128 0xb
 3816 0007 03       		.uleb128 0x3
 3817 0008 0E       		.uleb128 0xe
 3818 0009 1B       		.uleb128 0x1b
 3819 000a 0E       		.uleb128 0xe
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 121


 3820 000b 55       		.uleb128 0x55
 3821 000c 17       		.uleb128 0x17
 3822 000d 11       		.uleb128 0x11
 3823 000e 01       		.uleb128 0x1
 3824 000f 10       		.uleb128 0x10
 3825 0010 17       		.uleb128 0x17
 3826 0011 00       		.byte	0
 3827 0012 00       		.byte	0
 3828 0013 02       		.uleb128 0x2
 3829 0014 24       		.uleb128 0x24
 3830 0015 00       		.byte	0
 3831 0016 0B       		.uleb128 0xb
 3832 0017 0B       		.uleb128 0xb
 3833 0018 3E       		.uleb128 0x3e
 3834 0019 0B       		.uleb128 0xb
 3835 001a 03       		.uleb128 0x3
 3836 001b 0E       		.uleb128 0xe
 3837 001c 00       		.byte	0
 3838 001d 00       		.byte	0
 3839 001e 03       		.uleb128 0x3
 3840 001f 24       		.uleb128 0x24
 3841 0020 00       		.byte	0
 3842 0021 0B       		.uleb128 0xb
 3843 0022 0B       		.uleb128 0xb
 3844 0023 3E       		.uleb128 0x3e
 3845 0024 0B       		.uleb128 0xb
 3846 0025 03       		.uleb128 0x3
 3847 0026 08       		.uleb128 0x8
 3848 0027 00       		.byte	0
 3849 0028 00       		.byte	0
 3850 0029 04       		.uleb128 0x4
 3851 002a 16       		.uleb128 0x16
 3852 002b 00       		.byte	0
 3853 002c 03       		.uleb128 0x3
 3854 002d 0E       		.uleb128 0xe
 3855 002e 3A       		.uleb128 0x3a
 3856 002f 0B       		.uleb128 0xb
 3857 0030 3B       		.uleb128 0x3b
 3858 0031 05       		.uleb128 0x5
 3859 0032 49       		.uleb128 0x49
 3860 0033 13       		.uleb128 0x13
 3861 0034 00       		.byte	0
 3862 0035 00       		.byte	0
 3863 0036 05       		.uleb128 0x5
 3864 0037 35       		.uleb128 0x35
 3865 0038 00       		.byte	0
 3866 0039 49       		.uleb128 0x49
 3867 003a 13       		.uleb128 0x13
 3868 003b 00       		.byte	0
 3869 003c 00       		.byte	0
 3870 003d 06       		.uleb128 0x6
 3871 003e 0F       		.uleb128 0xf
 3872 003f 00       		.byte	0
 3873 0040 0B       		.uleb128 0xb
 3874 0041 0B       		.uleb128 0xb
 3875 0042 49       		.uleb128 0x49
 3876 0043 13       		.uleb128 0x13
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 122


 3877 0044 00       		.byte	0
 3878 0045 00       		.byte	0
 3879 0046 07       		.uleb128 0x7
 3880 0047 15       		.uleb128 0x15
 3881 0048 00       		.byte	0
 3882 0049 27       		.uleb128 0x27
 3883 004a 19       		.uleb128 0x19
 3884 004b 00       		.byte	0
 3885 004c 00       		.byte	0
 3886 004d 08       		.uleb128 0x8
 3887 004e 16       		.uleb128 0x16
 3888 004f 00       		.byte	0
 3889 0050 03       		.uleb128 0x3
 3890 0051 0E       		.uleb128 0xe
 3891 0052 3A       		.uleb128 0x3a
 3892 0053 0B       		.uleb128 0xb
 3893 0054 3B       		.uleb128 0x3b
 3894 0055 0B       		.uleb128 0xb
 3895 0056 49       		.uleb128 0x49
 3896 0057 13       		.uleb128 0x13
 3897 0058 00       		.byte	0
 3898 0059 00       		.byte	0
 3899 005a 09       		.uleb128 0x9
 3900 005b 2E       		.uleb128 0x2e
 3901 005c 00       		.byte	0
 3902 005d 3F       		.uleb128 0x3f
 3903 005e 19       		.uleb128 0x19
 3904 005f 03       		.uleb128 0x3
 3905 0060 0E       		.uleb128 0xe
 3906 0061 3A       		.uleb128 0x3a
 3907 0062 0B       		.uleb128 0xb
 3908 0063 3B       		.uleb128 0x3b
 3909 0064 0B       		.uleb128 0xb
 3910 0065 27       		.uleb128 0x27
 3911 0066 19       		.uleb128 0x19
 3912 0067 11       		.uleb128 0x11
 3913 0068 01       		.uleb128 0x1
 3914 0069 12       		.uleb128 0x12
 3915 006a 06       		.uleb128 0x6
 3916 006b 40       		.uleb128 0x40
 3917 006c 18       		.uleb128 0x18
 3918 006d 9742     		.uleb128 0x2117
 3919 006f 19       		.uleb128 0x19
 3920 0070 00       		.byte	0
 3921 0071 00       		.byte	0
 3922 0072 0A       		.uleb128 0xa
 3923 0073 2E       		.uleb128 0x2e
 3924 0074 01       		.byte	0x1
 3925 0075 3F       		.uleb128 0x3f
 3926 0076 19       		.uleb128 0x19
 3927 0077 03       		.uleb128 0x3
 3928 0078 0E       		.uleb128 0xe
 3929 0079 3A       		.uleb128 0x3a
 3930 007a 0B       		.uleb128 0xb
 3931 007b 3B       		.uleb128 0x3b
 3932 007c 05       		.uleb128 0x5
 3933 007d 27       		.uleb128 0x27
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 123


 3934 007e 19       		.uleb128 0x19
 3935 007f 11       		.uleb128 0x11
 3936 0080 01       		.uleb128 0x1
 3937 0081 12       		.uleb128 0x12
 3938 0082 06       		.uleb128 0x6
 3939 0083 40       		.uleb128 0x40
 3940 0084 18       		.uleb128 0x18
 3941 0085 9642     		.uleb128 0x2116
 3942 0087 19       		.uleb128 0x19
 3943 0088 01       		.uleb128 0x1
 3944 0089 13       		.uleb128 0x13
 3945 008a 00       		.byte	0
 3946 008b 00       		.byte	0
 3947 008c 0B       		.uleb128 0xb
 3948 008d 05       		.uleb128 0x5
 3949 008e 00       		.byte	0
 3950 008f 03       		.uleb128 0x3
 3951 0090 0E       		.uleb128 0xe
 3952 0091 3A       		.uleb128 0x3a
 3953 0092 0B       		.uleb128 0xb
 3954 0093 3B       		.uleb128 0x3b
 3955 0094 05       		.uleb128 0x5
 3956 0095 49       		.uleb128 0x49
 3957 0096 13       		.uleb128 0x13
 3958 0097 02       		.uleb128 0x2
 3959 0098 18       		.uleb128 0x18
 3960 0099 00       		.byte	0
 3961 009a 00       		.byte	0
 3962 009b 0C       		.uleb128 0xc
 3963 009c 34       		.uleb128 0x34
 3964 009d 00       		.byte	0
 3965 009e 03       		.uleb128 0x3
 3966 009f 0E       		.uleb128 0xe
 3967 00a0 3A       		.uleb128 0x3a
 3968 00a1 0B       		.uleb128 0xb
 3969 00a2 3B       		.uleb128 0x3b
 3970 00a3 05       		.uleb128 0x5
 3971 00a4 49       		.uleb128 0x49
 3972 00a5 13       		.uleb128 0x13
 3973 00a6 02       		.uleb128 0x2
 3974 00a7 18       		.uleb128 0x18
 3975 00a8 00       		.byte	0
 3976 00a9 00       		.byte	0
 3977 00aa 0D       		.uleb128 0xd
 3978 00ab 2E       		.uleb128 0x2e
 3979 00ac 01       		.byte	0x1
 3980 00ad 3F       		.uleb128 0x3f
 3981 00ae 19       		.uleb128 0x19
 3982 00af 03       		.uleb128 0x3
 3983 00b0 0E       		.uleb128 0xe
 3984 00b1 3A       		.uleb128 0x3a
 3985 00b2 0B       		.uleb128 0xb
 3986 00b3 3B       		.uleb128 0x3b
 3987 00b4 05       		.uleb128 0x5
 3988 00b5 27       		.uleb128 0x27
 3989 00b6 19       		.uleb128 0x19
 3990 00b7 11       		.uleb128 0x11
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 124


 3991 00b8 01       		.uleb128 0x1
 3992 00b9 12       		.uleb128 0x12
 3993 00ba 06       		.uleb128 0x6
 3994 00bb 40       		.uleb128 0x40
 3995 00bc 18       		.uleb128 0x18
 3996 00bd 9742     		.uleb128 0x2117
 3997 00bf 19       		.uleb128 0x19
 3998 00c0 01       		.uleb128 0x1
 3999 00c1 13       		.uleb128 0x13
 4000 00c2 00       		.byte	0
 4001 00c3 00       		.byte	0
 4002 00c4 0E       		.uleb128 0xe
 4003 00c5 2E       		.uleb128 0x2e
 4004 00c6 01       		.byte	0x1
 4005 00c7 3F       		.uleb128 0x3f
 4006 00c8 19       		.uleb128 0x19
 4007 00c9 03       		.uleb128 0x3
 4008 00ca 0E       		.uleb128 0xe
 4009 00cb 3A       		.uleb128 0x3a
 4010 00cc 0B       		.uleb128 0xb
 4011 00cd 3B       		.uleb128 0x3b
 4012 00ce 05       		.uleb128 0x5
 4013 00cf 27       		.uleb128 0x27
 4014 00d0 19       		.uleb128 0x19
 4015 00d1 49       		.uleb128 0x49
 4016 00d2 13       		.uleb128 0x13
 4017 00d3 11       		.uleb128 0x11
 4018 00d4 01       		.uleb128 0x1
 4019 00d5 12       		.uleb128 0x12
 4020 00d6 06       		.uleb128 0x6
 4021 00d7 40       		.uleb128 0x40
 4022 00d8 18       		.uleb128 0x18
 4023 00d9 9642     		.uleb128 0x2116
 4024 00db 19       		.uleb128 0x19
 4025 00dc 01       		.uleb128 0x1
 4026 00dd 13       		.uleb128 0x13
 4027 00de 00       		.byte	0
 4028 00df 00       		.byte	0
 4029 00e0 0F       		.uleb128 0xf
 4030 00e1 2E       		.uleb128 0x2e
 4031 00e2 00       		.byte	0
 4032 00e3 3F       		.uleb128 0x3f
 4033 00e4 19       		.uleb128 0x19
 4034 00e5 03       		.uleb128 0x3
 4035 00e6 0E       		.uleb128 0xe
 4036 00e7 3A       		.uleb128 0x3a
 4037 00e8 0B       		.uleb128 0xb
 4038 00e9 3B       		.uleb128 0x3b
 4039 00ea 05       		.uleb128 0x5
 4040 00eb 27       		.uleb128 0x27
 4041 00ec 19       		.uleb128 0x19
 4042 00ed 11       		.uleb128 0x11
 4043 00ee 01       		.uleb128 0x1
 4044 00ef 12       		.uleb128 0x12
 4045 00f0 06       		.uleb128 0x6
 4046 00f1 40       		.uleb128 0x40
 4047 00f2 18       		.uleb128 0x18
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 125


 4048 00f3 9742     		.uleb128 0x2117
 4049 00f5 19       		.uleb128 0x19
 4050 00f6 00       		.byte	0
 4051 00f7 00       		.byte	0
 4052 00f8 10       		.uleb128 0x10
 4053 00f9 2E       		.uleb128 0x2e
 4054 00fa 00       		.byte	0
 4055 00fb 3F       		.uleb128 0x3f
 4056 00fc 19       		.uleb128 0x19
 4057 00fd 03       		.uleb128 0x3
 4058 00fe 0E       		.uleb128 0xe
 4059 00ff 3A       		.uleb128 0x3a
 4060 0100 0B       		.uleb128 0xb
 4061 0101 3B       		.uleb128 0x3b
 4062 0102 05       		.uleb128 0x5
 4063 0103 27       		.uleb128 0x27
 4064 0104 19       		.uleb128 0x19
 4065 0105 49       		.uleb128 0x49
 4066 0106 13       		.uleb128 0x13
 4067 0107 11       		.uleb128 0x11
 4068 0108 01       		.uleb128 0x1
 4069 0109 12       		.uleb128 0x12
 4070 010a 06       		.uleb128 0x6
 4071 010b 40       		.uleb128 0x40
 4072 010c 18       		.uleb128 0x18
 4073 010d 9742     		.uleb128 0x2117
 4074 010f 19       		.uleb128 0x19
 4075 0110 00       		.byte	0
 4076 0111 00       		.byte	0
 4077 0112 11       		.uleb128 0x11
 4078 0113 2E       		.uleb128 0x2e
 4079 0114 01       		.byte	0x1
 4080 0115 3F       		.uleb128 0x3f
 4081 0116 19       		.uleb128 0x19
 4082 0117 03       		.uleb128 0x3
 4083 0118 0E       		.uleb128 0xe
 4084 0119 3A       		.uleb128 0x3a
 4085 011a 0B       		.uleb128 0xb
 4086 011b 3B       		.uleb128 0x3b
 4087 011c 05       		.uleb128 0x5
 4088 011d 27       		.uleb128 0x27
 4089 011e 19       		.uleb128 0x19
 4090 011f 49       		.uleb128 0x49
 4091 0120 13       		.uleb128 0x13
 4092 0121 11       		.uleb128 0x11
 4093 0122 01       		.uleb128 0x1
 4094 0123 12       		.uleb128 0x12
 4095 0124 06       		.uleb128 0x6
 4096 0125 40       		.uleb128 0x40
 4097 0126 18       		.uleb128 0x18
 4098 0127 9742     		.uleb128 0x2117
 4099 0129 19       		.uleb128 0x19
 4100 012a 01       		.uleb128 0x1
 4101 012b 13       		.uleb128 0x13
 4102 012c 00       		.byte	0
 4103 012d 00       		.byte	0
 4104 012e 12       		.uleb128 0x12
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 126


 4105 012f 2E       		.uleb128 0x2e
 4106 0130 00       		.byte	0
 4107 0131 3F       		.uleb128 0x3f
 4108 0132 19       		.uleb128 0x19
 4109 0133 03       		.uleb128 0x3
 4110 0134 0E       		.uleb128 0xe
 4111 0135 3A       		.uleb128 0x3a
 4112 0136 0B       		.uleb128 0xb
 4113 0137 3B       		.uleb128 0x3b
 4114 0138 05       		.uleb128 0x5
 4115 0139 27       		.uleb128 0x27
 4116 013a 19       		.uleb128 0x19
 4117 013b 11       		.uleb128 0x11
 4118 013c 01       		.uleb128 0x1
 4119 013d 12       		.uleb128 0x12
 4120 013e 06       		.uleb128 0x6
 4121 013f 40       		.uleb128 0x40
 4122 0140 18       		.uleb128 0x18
 4123 0141 9642     		.uleb128 0x2116
 4124 0143 19       		.uleb128 0x19
 4125 0144 00       		.byte	0
 4126 0145 00       		.byte	0
 4127 0146 13       		.uleb128 0x13
 4128 0147 34       		.uleb128 0x34
 4129 0148 00       		.byte	0
 4130 0149 03       		.uleb128 0x3
 4131 014a 08       		.uleb128 0x8
 4132 014b 3A       		.uleb128 0x3a
 4133 014c 0B       		.uleb128 0xb
 4134 014d 3B       		.uleb128 0x3b
 4135 014e 05       		.uleb128 0x5
 4136 014f 49       		.uleb128 0x49
 4137 0150 13       		.uleb128 0x13
 4138 0151 02       		.uleb128 0x2
 4139 0152 18       		.uleb128 0x18
 4140 0153 00       		.byte	0
 4141 0154 00       		.byte	0
 4142 0155 14       		.uleb128 0x14
 4143 0156 2E       		.uleb128 0x2e
 4144 0157 01       		.byte	0x1
 4145 0158 03       		.uleb128 0x3
 4146 0159 0E       		.uleb128 0xe
 4147 015a 3A       		.uleb128 0x3a
 4148 015b 0B       		.uleb128 0xb
 4149 015c 3B       		.uleb128 0x3b
 4150 015d 05       		.uleb128 0x5
 4151 015e 27       		.uleb128 0x27
 4152 015f 19       		.uleb128 0x19
 4153 0160 11       		.uleb128 0x11
 4154 0161 01       		.uleb128 0x1
 4155 0162 12       		.uleb128 0x12
 4156 0163 06       		.uleb128 0x6
 4157 0164 40       		.uleb128 0x40
 4158 0165 18       		.uleb128 0x18
 4159 0166 9642     		.uleb128 0x2116
 4160 0168 19       		.uleb128 0x19
 4161 0169 01       		.uleb128 0x1
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 127


 4162 016a 13       		.uleb128 0x13
 4163 016b 00       		.byte	0
 4164 016c 00       		.byte	0
 4165 016d 15       		.uleb128 0x15
 4166 016e 01       		.uleb128 0x1
 4167 016f 01       		.byte	0x1
 4168 0170 49       		.uleb128 0x49
 4169 0171 13       		.uleb128 0x13
 4170 0172 01       		.uleb128 0x1
 4171 0173 13       		.uleb128 0x13
 4172 0174 00       		.byte	0
 4173 0175 00       		.byte	0
 4174 0176 16       		.uleb128 0x16
 4175 0177 21       		.uleb128 0x21
 4176 0178 00       		.byte	0
 4177 0179 49       		.uleb128 0x49
 4178 017a 13       		.uleb128 0x13
 4179 017b 2F       		.uleb128 0x2f
 4180 017c 0B       		.uleb128 0xb
 4181 017d 00       		.byte	0
 4182 017e 00       		.byte	0
 4183 017f 17       		.uleb128 0x17
 4184 0180 34       		.uleb128 0x34
 4185 0181 00       		.byte	0
 4186 0182 03       		.uleb128 0x3
 4187 0183 0E       		.uleb128 0xe
 4188 0184 3A       		.uleb128 0x3a
 4189 0185 0B       		.uleb128 0xb
 4190 0186 3B       		.uleb128 0x3b
 4191 0187 0B       		.uleb128 0xb
 4192 0188 49       		.uleb128 0x49
 4193 0189 13       		.uleb128 0x13
 4194 018a 02       		.uleb128 0x2
 4195 018b 18       		.uleb128 0x18
 4196 018c 00       		.byte	0
 4197 018d 00       		.byte	0
 4198 018e 18       		.uleb128 0x18
 4199 018f 34       		.uleb128 0x34
 4200 0190 00       		.byte	0
 4201 0191 03       		.uleb128 0x3
 4202 0192 0E       		.uleb128 0xe
 4203 0193 3A       		.uleb128 0x3a
 4204 0194 0B       		.uleb128 0xb
 4205 0195 3B       		.uleb128 0x3b
 4206 0196 0B       		.uleb128 0xb
 4207 0197 49       		.uleb128 0x49
 4208 0198 13       		.uleb128 0x13
 4209 0199 3F       		.uleb128 0x3f
 4210 019a 19       		.uleb128 0x19
 4211 019b 02       		.uleb128 0x2
 4212 019c 18       		.uleb128 0x18
 4213 019d 00       		.byte	0
 4214 019e 00       		.byte	0
 4215 019f 19       		.uleb128 0x19
 4216 01a0 26       		.uleb128 0x26
 4217 01a1 00       		.byte	0
 4218 01a2 49       		.uleb128 0x49
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 128


 4219 01a3 13       		.uleb128 0x13
 4220 01a4 00       		.byte	0
 4221 01a5 00       		.byte	0
 4222 01a6 00       		.byte	0
 4223              		.section	.debug_aranges,"",%progbits
 4224 0000 7C010000 		.4byte	0x17c
 4225 0004 0200     		.2byte	0x2
 4226 0006 00000000 		.4byte	.Ldebug_info0
 4227 000a 04       		.byte	0x4
 4228 000b 00       		.byte	0
 4229 000c 0000     		.2byte	0
 4230 000e 0000     		.2byte	0
 4231 0010 00000000 		.4byte	.LFB0
 4232 0014 1C000000 		.4byte	.LFE0-.LFB0
 4233 0018 00000000 		.4byte	.LFB1
 4234 001c 1C000000 		.4byte	.LFE1-.LFB1
 4235 0020 00000000 		.4byte	.LFB2
 4236 0024 48000000 		.4byte	.LFE2-.LFB2
 4237 0028 00000000 		.4byte	.LFB3
 4238 002c 50000000 		.4byte	.LFE3-.LFB3
 4239 0030 00000000 		.4byte	.LFB4
 4240 0034 34000000 		.4byte	.LFE4-.LFB4
 4241 0038 00000000 		.4byte	.LFB5
 4242 003c 48000000 		.4byte	.LFE5-.LFB5
 4243 0040 00000000 		.4byte	.LFB6
 4244 0044 EC010000 		.4byte	.LFE6-.LFB6
 4245 0048 00000000 		.4byte	.LFB7
 4246 004c 64000000 		.4byte	.LFE7-.LFB7
 4247 0050 00000000 		.4byte	.LFB8
 4248 0054 2C000000 		.4byte	.LFE8-.LFB8
 4249 0058 00000000 		.4byte	.LFB9
 4250 005c 18000000 		.4byte	.LFE9-.LFB9
 4251 0060 00000000 		.4byte	.LFB10
 4252 0064 14000000 		.4byte	.LFE10-.LFB10
 4253 0068 00000000 		.4byte	.LFB11
 4254 006c 30000000 		.4byte	.LFE11-.LFB11
 4255 0070 00000000 		.4byte	.LFB12
 4256 0074 24000000 		.4byte	.LFE12-.LFB12
 4257 0078 00000000 		.4byte	.LFB13
 4258 007c 1C000000 		.4byte	.LFE13-.LFB13
 4259 0080 00000000 		.4byte	.LFB14
 4260 0084 48000000 		.4byte	.LFE14-.LFB14
 4261 0088 00000000 		.4byte	.LFB15
 4262 008c 34000000 		.4byte	.LFE15-.LFB15
 4263 0090 00000000 		.4byte	.LFB16
 4264 0094 4C000000 		.4byte	.LFE16-.LFB16
 4265 0098 00000000 		.4byte	.LFB17
 4266 009c 36000000 		.4byte	.LFE17-.LFB17
 4267 00a0 00000000 		.4byte	.LFB18
 4268 00a4 A8000000 		.4byte	.LFE18-.LFB18
 4269 00a8 00000000 		.4byte	.LFB19
 4270 00ac 58000000 		.4byte	.LFE19-.LFB19
 4271 00b0 00000000 		.4byte	.LFB20
 4272 00b4 2C000000 		.4byte	.LFE20-.LFB20
 4273 00b8 00000000 		.4byte	.LFB21
 4274 00bc 30000000 		.4byte	.LFE21-.LFB21
 4275 00c0 00000000 		.4byte	.LFB22
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 129


 4276 00c4 2C000000 		.4byte	.LFE22-.LFB22
 4277 00c8 00000000 		.4byte	.LFB23
 4278 00cc 2C000000 		.4byte	.LFE23-.LFB23
 4279 00d0 00000000 		.4byte	.LFB24
 4280 00d4 2C000000 		.4byte	.LFE24-.LFB24
 4281 00d8 00000000 		.4byte	.LFB25
 4282 00dc 16000000 		.4byte	.LFE25-.LFB25
 4283 00e0 00000000 		.4byte	.LFB26
 4284 00e4 24000000 		.4byte	.LFE26-.LFB26
 4285 00e8 00000000 		.4byte	.LFB27
 4286 00ec 4C000000 		.4byte	.LFE27-.LFB27
 4287 00f0 00000000 		.4byte	.LFB28
 4288 00f4 28000000 		.4byte	.LFE28-.LFB28
 4289 00f8 00000000 		.4byte	.LFB29
 4290 00fc 84000000 		.4byte	.LFE29-.LFB29
 4291 0100 00000000 		.4byte	.LFB30
 4292 0104 24000000 		.4byte	.LFE30-.LFB30
 4293 0108 00000000 		.4byte	.LFB31
 4294 010c 5C000000 		.4byte	.LFE31-.LFB31
 4295 0110 00000000 		.4byte	.LFB32
 4296 0114 20000000 		.4byte	.LFE32-.LFB32
 4297 0118 00000000 		.4byte	.LFB33
 4298 011c 1C000000 		.4byte	.LFE33-.LFB33
 4299 0120 00000000 		.4byte	.LFB34
 4300 0124 1C000000 		.4byte	.LFE34-.LFB34
 4301 0128 00000000 		.4byte	.LFB35
 4302 012c 1C000000 		.4byte	.LFE35-.LFB35
 4303 0130 00000000 		.4byte	.LFB36
 4304 0134 20000000 		.4byte	.LFE36-.LFB36
 4305 0138 00000000 		.4byte	.LFB37
 4306 013c 18000000 		.4byte	.LFE37-.LFB37
 4307 0140 00000000 		.4byte	.LFB38
 4308 0144 18000000 		.4byte	.LFE38-.LFB38
 4309 0148 00000000 		.4byte	.LFB39
 4310 014c 18000000 		.4byte	.LFE39-.LFB39
 4311 0150 00000000 		.4byte	.LFB40
 4312 0154 14000000 		.4byte	.LFE40-.LFB40
 4313 0158 00000000 		.4byte	.LFB41
 4314 015c 2C000000 		.4byte	.LFE41-.LFB41
 4315 0160 00000000 		.4byte	.LFB42
 4316 0164 1C000000 		.4byte	.LFE42-.LFB42
 4317 0168 00000000 		.4byte	.LFB43
 4318 016c 44000000 		.4byte	.LFE43-.LFB43
 4319 0170 00000000 		.4byte	.LFB44
 4320 0174 C0000000 		.4byte	.LFE44-.LFB44
 4321 0178 00000000 		.4byte	0
 4322 017c 00000000 		.4byte	0
 4323              		.section	.debug_ranges,"",%progbits
 4324              	.Ldebug_ranges0:
 4325 0000 00000000 		.4byte	.LFB0
 4326 0004 1C000000 		.4byte	.LFE0
 4327 0008 00000000 		.4byte	.LFB1
 4328 000c 1C000000 		.4byte	.LFE1
 4329 0010 00000000 		.4byte	.LFB2
 4330 0014 48000000 		.4byte	.LFE2
 4331 0018 00000000 		.4byte	.LFB3
 4332 001c 50000000 		.4byte	.LFE3
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 130


 4333 0020 00000000 		.4byte	.LFB4
 4334 0024 34000000 		.4byte	.LFE4
 4335 0028 00000000 		.4byte	.LFB5
 4336 002c 48000000 		.4byte	.LFE5
 4337 0030 00000000 		.4byte	.LFB6
 4338 0034 EC010000 		.4byte	.LFE6
 4339 0038 00000000 		.4byte	.LFB7
 4340 003c 64000000 		.4byte	.LFE7
 4341 0040 00000000 		.4byte	.LFB8
 4342 0044 2C000000 		.4byte	.LFE8
 4343 0048 00000000 		.4byte	.LFB9
 4344 004c 18000000 		.4byte	.LFE9
 4345 0050 00000000 		.4byte	.LFB10
 4346 0054 14000000 		.4byte	.LFE10
 4347 0058 00000000 		.4byte	.LFB11
 4348 005c 30000000 		.4byte	.LFE11
 4349 0060 00000000 		.4byte	.LFB12
 4350 0064 24000000 		.4byte	.LFE12
 4351 0068 00000000 		.4byte	.LFB13
 4352 006c 1C000000 		.4byte	.LFE13
 4353 0070 00000000 		.4byte	.LFB14
 4354 0074 48000000 		.4byte	.LFE14
 4355 0078 00000000 		.4byte	.LFB15
 4356 007c 34000000 		.4byte	.LFE15
 4357 0080 00000000 		.4byte	.LFB16
 4358 0084 4C000000 		.4byte	.LFE16
 4359 0088 00000000 		.4byte	.LFB17
 4360 008c 36000000 		.4byte	.LFE17
 4361 0090 00000000 		.4byte	.LFB18
 4362 0094 A8000000 		.4byte	.LFE18
 4363 0098 00000000 		.4byte	.LFB19
 4364 009c 58000000 		.4byte	.LFE19
 4365 00a0 00000000 		.4byte	.LFB20
 4366 00a4 2C000000 		.4byte	.LFE20
 4367 00a8 00000000 		.4byte	.LFB21
 4368 00ac 30000000 		.4byte	.LFE21
 4369 00b0 00000000 		.4byte	.LFB22
 4370 00b4 2C000000 		.4byte	.LFE22
 4371 00b8 00000000 		.4byte	.LFB23
 4372 00bc 2C000000 		.4byte	.LFE23
 4373 00c0 00000000 		.4byte	.LFB24
 4374 00c4 2C000000 		.4byte	.LFE24
 4375 00c8 00000000 		.4byte	.LFB25
 4376 00cc 16000000 		.4byte	.LFE25
 4377 00d0 00000000 		.4byte	.LFB26
 4378 00d4 24000000 		.4byte	.LFE26
 4379 00d8 00000000 		.4byte	.LFB27
 4380 00dc 4C000000 		.4byte	.LFE27
 4381 00e0 00000000 		.4byte	.LFB28
 4382 00e4 28000000 		.4byte	.LFE28
 4383 00e8 00000000 		.4byte	.LFB29
 4384 00ec 84000000 		.4byte	.LFE29
 4385 00f0 00000000 		.4byte	.LFB30
 4386 00f4 24000000 		.4byte	.LFE30
 4387 00f8 00000000 		.4byte	.LFB31
 4388 00fc 5C000000 		.4byte	.LFE31
 4389 0100 00000000 		.4byte	.LFB32
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 131


 4390 0104 20000000 		.4byte	.LFE32
 4391 0108 00000000 		.4byte	.LFB33
 4392 010c 1C000000 		.4byte	.LFE33
 4393 0110 00000000 		.4byte	.LFB34
 4394 0114 1C000000 		.4byte	.LFE34
 4395 0118 00000000 		.4byte	.LFB35
 4396 011c 1C000000 		.4byte	.LFE35
 4397 0120 00000000 		.4byte	.LFB36
 4398 0124 20000000 		.4byte	.LFE36
 4399 0128 00000000 		.4byte	.LFB37
 4400 012c 18000000 		.4byte	.LFE37
 4401 0130 00000000 		.4byte	.LFB38
 4402 0134 18000000 		.4byte	.LFE38
 4403 0138 00000000 		.4byte	.LFB39
 4404 013c 18000000 		.4byte	.LFE39
 4405 0140 00000000 		.4byte	.LFB40
 4406 0144 14000000 		.4byte	.LFE40
 4407 0148 00000000 		.4byte	.LFB41
 4408 014c 2C000000 		.4byte	.LFE41
 4409 0150 00000000 		.4byte	.LFB42
 4410 0154 1C000000 		.4byte	.LFE42
 4411 0158 00000000 		.4byte	.LFB43
 4412 015c 44000000 		.4byte	.LFE43
 4413 0160 00000000 		.4byte	.LFB44
 4414 0164 C0000000 		.4byte	.LFE44
 4415 0168 00000000 		.4byte	0
 4416 016c 00000000 		.4byte	0
 4417              		.section	.debug_line,"",%progbits
 4418              	.Ldebug_line0:
 4419 0000 76040000 		.section	.debug_str,"MS",%progbits,1
 4419      02004D00 
 4419      00000201 
 4419      FB0E0D00 
 4419      01010101 
 4420              	.LASF55:
 4421 0000 72616D56 		.ascii	"ramVectorTable\000"
 4421      6563746F 
 4421      72546162 
 4421      6C6500
 4422              	.LASF34:
 4423 000f 62675472 		.ascii	"bgTrim4\000"
 4423      696D3400 
 4424              	.LASF10:
 4425 0017 75696E74 		.ascii	"uint16\000"
 4425      313600
 4426              	.LASF48:
 4427 001e 696E7453 		.ascii	"intState\000"
 4427      74617465 
 4427      00
 4428              	.LASF25:
 4429 0027 43795379 		.ascii	"CySysClkWriteHfclkDirect\000"
 4429      73436C6B 
 4429      57726974 
 4429      65486663 
 4429      6C6B4469 
 4430              	.LASF101:
 4431 0040 43795379 		.ascii	"CySysClkPumpConfig\000"
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 132


 4431      73436C6B 
 4431      50756D70 
 4431      436F6E66 
 4431      696700
 4432              	.LASF54:
 4433 0053 6F6C6449 		.ascii	"oldIsr\000"
 4433      737200
 4434              	.LASF90:
 4435 005a 72657456 		.ascii	"retVal\000"
 4435      616C00
 4436              	.LASF47:
 4437 0061 43794469 		.ascii	"CyDisableInts\000"
 4437      7361626C 
 4437      65496E74 
 4437      7300
 4438              	.LASF37:
 4439 006f 63757272 		.ascii	"currentImoTrim2Value\000"
 4439      656E7449 
 4439      6D6F5472 
 4439      696D3256 
 4439      616C7565 
 4440              	.LASF7:
 4441 0084 6C6F6E67 		.ascii	"long long unsigned int\000"
 4441      206C6F6E 
 4441      6720756E 
 4441      7369676E 
 4441      65642069 
 4442              	.LASF99:
 4443 009b 43795379 		.ascii	"CySysTickInitVar\000"
 4443      73546963 
 4443      6B496E69 
 4443      74566172 
 4443      00
 4444              	.LASF49:
 4445 00ac 4379456E 		.ascii	"CyEnableInts\000"
 4445      61626C65 
 4445      496E7473 
 4445      00
 4446              	.LASF70:
 4447 00b9 4379536F 		.ascii	"CySoftwareReset\000"
 4447      66747761 
 4447      72655265 
 4447      73657400 
 4448              	.LASF80:
 4449 00c9 43795379 		.ascii	"CySysTickEnableInterrupt\000"
 4449      73546963 
 4449      6B456E61 
 4449      626C6549 
 4449      6E746572 
 4450              	.LASF65:
 4451 00e2 4379496E 		.ascii	"CyIntGetState\000"
 4451      74476574 
 4451      53746174 
 4451      6500
 4452              	.LASF6:
 4453 00f0 6C6F6E67 		.ascii	"long long int\000"
 4453      206C6F6E 
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 133


 4453      6720696E 
 4453      7400
 4454              	.LASF0:
 4455 00fe 7369676E 		.ascii	"signed char\000"
 4455      65642063 
 4455      68617200 
 4456              	.LASF33:
 4457 010a 66726571 		.ascii	"freq\000"
 4457      00
 4458              	.LASF75:
 4459 010f 43794465 		.ascii	"CyDelayFreq\000"
 4459      6C617946 
 4459      72657100 
 4460              	.LASF23:
 4461 011b 696E7465 		.ascii	"interruptState\000"
 4461      72727570 
 4461      74537461 
 4461      746500
 4462              	.LASF84:
 4463 012a 43795379 		.ascii	"CySysTickGetReload\000"
 4463      73546963 
 4463      6B476574 
 4463      52656C6F 
 4463      616400
 4464              	.LASF4:
 4465 013d 6C6F6E67 		.ascii	"long int\000"
 4465      20696E74 
 4465      00
 4466              	.LASF66:
 4467 0146 4379496E 		.ascii	"CyIntDisable\000"
 4467      74446973 
 4467      61626C65 
 4467      00
 4468              	.LASF91:
 4469 0153 43795379 		.ascii	"CySysTickGetCallback\000"
 4469      73546963 
 4469      6B476574 
 4469      43616C6C 
 4469      6261636B 
 4470              	.LASF9:
 4471 0168 75696E74 		.ascii	"uint8\000"
 4471      3800
 4472              	.LASF96:
 4473 016e 63796465 		.ascii	"cydelayFreqKhz\000"
 4473      6C617946 
 4473      7265714B 
 4473      687A00
 4474              	.LASF28:
 4475 017d 656E6162 		.ascii	"enable\000"
 4475      6C6500
 4476              	.LASF13:
 4477 0184 646F7562 		.ascii	"double\000"
 4477      6C6500
 4478              	.LASF61:
 4479 018b 73686966 		.ascii	"shift\000"
 4479      7400
 4480              	.LASF42:
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 134


 4481 0191 43795379 		.ascii	"CySysLvdClearInterrupt\000"
 4481      734C7664 
 4481      436C6561 
 4481      72496E74 
 4481      65727275 
 4482              	.LASF11:
 4483 01a8 75696E74 		.ascii	"uint32\000"
 4483      333200
 4484              	.LASF50:
 4485 01af 6D61736B 		.ascii	"mask\000"
 4485      00
 4486              	.LASF43:
 4487 01b4 43795379 		.ascii	"CySysClkGetSysclkSource\000"
 4487      73436C6B 
 4487      47657453 
 4487      7973636C 
 4487      6B536F75 
 4488              	.LASF63:
 4489 01cc 4379496E 		.ascii	"CyIntGetPriority\000"
 4489      74476574 
 4489      5072696F 
 4489      72697479 
 4489      00
 4490              	.LASF98:
 4491 01dd 63796465 		.ascii	"cydelay32kMs\000"
 4491      6C617933 
 4491      326B4D73 
 4491      00
 4492              	.LASF77:
 4493 01ea 43795379 		.ascii	"CySysTickInit\000"
 4493      73546963 
 4493      6B496E69 
 4493      7400
 4494              	.LASF62:
 4495 01f8 76616C75 		.ascii	"value\000"
 4495      6500
 4496              	.LASF92:
 4497 01fe 43794765 		.ascii	"CyGetUniqueId\000"
 4497      74556E69 
 4497      71756549 
 4497      6400
 4498              	.LASF86:
 4499 020c 43795379 		.ascii	"CySysTickGetCountFlag\000"
 4499      73546963 
 4499      6B476574 
 4499      436F756E 
 4499      74466C61 
 4500              	.LASF8:
 4501 0222 756E7369 		.ascii	"unsigned int\000"
 4501      676E6564 
 4501      20696E74 
 4501      00
 4502              	.LASF87:
 4503 022f 43795379 		.ascii	"CySysTickClear\000"
 4503      73546963 
 4503      6B436C65 
 4503      617200
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 135


 4504              	.LASF5:
 4505 023e 6C6F6E67 		.ascii	"long unsigned int\000"
 4505      20756E73 
 4505      69676E65 
 4505      6420696E 
 4505      7400
 4506              	.LASF83:
 4507 0250 43795379 		.ascii	"CySysLvdGetInterruptSource\000"
 4507      734C7664 
 4507      47657449 
 4507      6E746572 
 4507      72757074 
 4508              	.LASF22:
 4509 026b 43795379 		.ascii	"CySysClkImoStop\000"
 4509      73436C6B 
 4509      496D6F53 
 4509      746F7000 
 4510              	.LASF67:
 4511 027b 4379496E 		.ascii	"CyIntSetPending\000"
 4511      74536574 
 4511      50656E64 
 4511      696E6700 
 4512              	.LASF44:
 4513 028b 43795379 		.ascii	"CySysGetResetReason\000"
 4513      73476574 
 4513      52657365 
 4513      74526561 
 4513      736F6E00 
 4514              	.LASF3:
 4515 029f 73686F72 		.ascii	"short unsigned int\000"
 4515      7420756E 
 4515      7369676E 
 4515      65642069 
 4515      6E7400
 4516              	.LASF57:
 4517 02b2 4379496E 		.ascii	"CyIntSetVector\000"
 4517      74536574 
 4517      56656374 
 4517      6F7200
 4518              	.LASF52:
 4519 02c1 6E756D62 		.ascii	"number\000"
 4519      657200
 4520              	.LASF60:
 4521 02c8 7072696F 		.ascii	"priority\000"
 4521      72697479 
 4521      00
 4522              	.LASF32:
 4523 02d1 43795379 		.ascii	"CySysClkWriteImoFreq\000"
 4523      73436C6B 
 4523      57726974 
 4523      65496D6F 
 4523      46726571 
 4524              	.LASF102:
 4525 02e6 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 4525      43313120 
 4525      352E342E 
 4525      31203230 
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 136


 4525      31363036 
 4526 0319 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 4526      20726576 
 4526      6973696F 
 4526      6E203233 
 4526      37373135 
 4527 034c 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 4527      66756E63 
 4527      74696F6E 
 4527      2D736563 
 4527      74696F6E 
 4528              	.LASF51:
 4529 0374 4379496E 		.ascii	"CyIntSetSysVector\000"
 4529      74536574 
 4529      53797356 
 4529      6563746F 
 4529      7200
 4530              	.LASF104:
 4531 0386 433A5C53 		.ascii	"C:\\SVN\\apps\\trunk\\Cypress Academy\\PSoC-101\\Pr"
 4531      564E5C61 
 4531      7070735C 
 4531      7472756E 
 4531      6B5C4379 
 4532 03b3 6F6A6563 		.ascii	"ojects\\Team_Project\\Simon\\Simon_Slave_Pioneer\\S"
 4532      74735C54 
 4532      65616D5F 
 4532      50726F6A 
 4532      6563745C 
 4533 03e2 696D6F6E 		.ascii	"imon_Slave_Pioneer.cydsn\000"
 4533      5F536C61 
 4533      76655F50 
 4533      696F6E65 
 4533      65722E63 
 4534              	.LASF26:
 4535 03fb 43795379 		.ascii	"CySysEnablePumpClock\000"
 4535      73456E61 
 4535      626C6550 
 4535      756D7043 
 4535      6C6F636B 
 4536              	.LASF16:
 4537 0410 72656733 		.ascii	"reg32\000"
 4537      3200
 4538              	.LASF76:
 4539 0416 43795379 		.ascii	"CySysTickStart\000"
 4539      73546963 
 4539      6B537461 
 4539      727400
 4540              	.LASF46:
 4541 0425 72657475 		.ascii	"returnStatus\000"
 4541      726E5374 
 4541      61747573 
 4541      00
 4542              	.LASF19:
 4543 0432 73697A65 		.ascii	"sizetype\000"
 4543      74797065 
 4543      00
 4544              	.LASF68:
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 137


 4545 043b 4379496E 		.ascii	"CyIntClearPending\000"
 4545      74436C65 
 4545      61725065 
 4545      6E64696E 
 4545      6700
 4546              	.LASF18:
 4547 044d 6C6F6E67 		.ascii	"long double\000"
 4547      20646F75 
 4547      626C6500 
 4548              	.LASF53:
 4549 0459 61646472 		.ascii	"address\000"
 4549      65737300 
 4550              	.LASF35:
 4551 0461 62675472 		.ascii	"bgTrim5\000"
 4551      696D3500 
 4552              	.LASF29:
 4553 0469 73797363 		.ascii	"sysclkSource\000"
 4553      6C6B536F 
 4553      75726365 
 4553      00
 4554              	.LASF89:
 4555 0476 66756E63 		.ascii	"function\000"
 4555      74696F6E 
 4555      00
 4556              	.LASF100:
 4557 047f 6379496D 		.ascii	"cyImoFreqMhz2Reg\000"
 4557      6F467265 
 4557      714D687A 
 4557      32526567 
 4557      00
 4558              	.LASF85:
 4559 0490 43795379 		.ascii	"CySysTickGetValue\000"
 4559      73546963 
 4559      6B476574 
 4559      56616C75 
 4559      6500
 4560              	.LASF95:
 4561 04a2 63796465 		.ascii	"cydelayFreqHz\000"
 4561      6C617946 
 4561      72657148 
 4561      7A00
 4562              	.LASF59:
 4563 04b0 4379496E 		.ascii	"CyIntSetPriority\000"
 4563      74536574 
 4563      5072696F 
 4563      72697479 
 4563      00
 4564              	.LASF12:
 4565 04c1 666C6F61 		.ascii	"float\000"
 4565      7400
 4566              	.LASF39:
 4567 04c7 43795379 		.ascii	"CySysLvdEnable\000"
 4567      734C7664 
 4567      456E6162 
 4567      6C6500
 4568              	.LASF20:
 4569 04d6 63795379 		.ascii	"cySysTickCallback\000"
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 138


 4569      73546963 
 4569      6B43616C 
 4569      6C626163 
 4569      6B00
 4570              	.LASF58:
 4571 04e8 4379496E 		.ascii	"CyIntGetVector\000"
 4571      74476574 
 4571      56656374 
 4571      6F7200
 4572              	.LASF72:
 4573 04f7 6D696C6C 		.ascii	"milliseconds\000"
 4573      69736563 
 4573      6F6E6473 
 4573      00
 4574              	.LASF15:
 4575 0504 72656738 		.ascii	"reg8\000"
 4575      00
 4576              	.LASF40:
 4577 0509 74687265 		.ascii	"threshold\000"
 4577      73686F6C 
 4577      6400
 4578              	.LASF69:
 4579 0513 43794861 		.ascii	"CyHalt\000"
 4579      6C7400
 4580              	.LASF1:
 4581 051a 756E7369 		.ascii	"unsigned char\000"
 4581      676E6564 
 4581      20636861 
 4581      7200
 4582              	.LASF2:
 4583 0528 73686F72 		.ascii	"short int\000"
 4583      7420696E 
 4583      7400
 4584              	.LASF64:
 4585 0532 4379496E 		.ascii	"CyIntEnable\000"
 4585      74456E61 
 4585      626C6500 
 4586              	.LASF56:
 4587 053e 4379496E 		.ascii	"CyIntGetSysVector\000"
 4587      74476574 
 4587      53797356 
 4587      6563746F 
 4587      7200
 4588              	.LASF27:
 4589 0550 636C6B53 		.ascii	"clkSelect\000"
 4589      656C6563 
 4589      7400
 4590              	.LASF73:
 4591 055a 43794465 		.ascii	"CyDelayUs\000"
 4591      6C617955 
 4591      7300
 4592              	.LASF45:
 4593 0564 72656173 		.ascii	"reason\000"
 4593      6F6E00
 4594              	.LASF14:
 4595 056b 63686172 		.ascii	"char\000"
 4595      00
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 139


 4596              	.LASF17:
 4597 0570 63796973 		.ascii	"cyisraddress\000"
 4597      72616464 
 4597      72657373 
 4597      00
 4598              	.LASF78:
 4599 057d 43795379 		.ascii	"CySysTickEnable\000"
 4599      73546963 
 4599      6B456E61 
 4599      626C6500 
 4600              	.LASF30:
 4601 058d 43795379 		.ascii	"CySysClkWriteSysclkDiv\000"
 4601      73436C6B 
 4601      57726974 
 4601      65537973 
 4601      636C6B44 
 4602              	.LASF88:
 4603 05a4 43795379 		.ascii	"CySysTickSetCallback\000"
 4603      73546963 
 4603      6B536574 
 4603      43616C6C 
 4603      6261636B 
 4604              	.LASF94:
 4605 05b9 43795379 		.ascii	"CySysTickCallbacks\000"
 4605      73546963 
 4605      6B43616C 
 4605      6C626163 
 4605      6B7300
 4606              	.LASF38:
 4607 05cc 696D6F54 		.ascii	"imoTrim1Value\000"
 4607      72696D31 
 4607      56616C75 
 4607      6500
 4608              	.LASF93:
 4609 05da 756E6971 		.ascii	"uniqueId\000"
 4609      75654964 
 4609      00
 4610              	.LASF71:
 4611 05e3 43794465 		.ascii	"CyDelay\000"
 4611      6C617900 
 4612              	.LASF81:
 4613 05eb 43795379 		.ascii	"CySysTickDisableInterrupt\000"
 4613      73546963 
 4613      6B446973 
 4613      61626C65 
 4613      496E7465 
 4614              	.LASF41:
 4615 0605 43795379 		.ascii	"CySysLvdDisable\000"
 4615      734C7664 
 4615      44697361 
 4615      626C6500 
 4616              	.LASF97:
 4617 0615 63796465 		.ascii	"cydelayFreqMhz\000"
 4617      6C617946 
 4617      7265714D 
 4617      687A00
 4618              	.LASF79:
ARM GAS  C:\Users\gjl\AppData\Local\Temp\ccCWeJAc.s 			page 140


 4619 0624 43795379 		.ascii	"CySysTickStop\000"
 4619      73546963 
 4619      6B53746F 
 4619      7000
 4620              	.LASF31:
 4621 0632 64697669 		.ascii	"divider\000"
 4621      64657200 
 4622              	.LASF21:
 4623 063a 43795379 		.ascii	"CySysClkImoStart\000"
 4623      73436C6B 
 4623      496D6F53 
 4623      74617274 
 4623      00
 4624              	.LASF36:
 4625 064b 6E657749 		.ascii	"newImoTrim2Value\000"
 4625      6D6F5472 
 4625      696D3256 
 4625      616C7565 
 4625      00
 4626              	.LASF103:
 4627 065c 47656E65 		.ascii	"Generated_Source\\PSoC4\\CyLib.c\000"
 4627      72617465 
 4627      645F536F 
 4627      75726365 
 4627      5C50536F 
 4628              	.LASF74:
 4629 067b 6D696372 		.ascii	"microseconds\000"
 4629      6F736563 
 4629      6F6E6473 
 4629      00
 4630              	.LASF24:
 4631 0688 746D7052 		.ascii	"tmpReg\000"
 4631      656700
 4632              	.LASF82:
 4633 068f 43795379 		.ascii	"CySysTickSetReload\000"
 4633      73546963 
 4633      6B536574 
 4633      52656C6F 
 4633      616400
 4634              	.LASF105:
 4635 06a2 43795379 		.ascii	"CySysTickServiceCallbacks\000"
 4635      73546963 
 4635      6B536572 
 4635      76696365 
 4635      43616C6C 
 4636              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
